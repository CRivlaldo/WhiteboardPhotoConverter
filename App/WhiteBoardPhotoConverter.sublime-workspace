{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cam",
				"camera_update"
			],
			[
				"rota",
				"rotateSpeed"
			],
			[
				"Fir",
				"FirstPersonControls"
			],
			[
				"Tra",
				"TransformControls"
			],
			[
				"load",
				"loadedObjectsCount"
			],
			[
				"0xeee",
				"0xeeeeee"
			],
			[
				"Aw",
				"AwesomiumWebBrowser"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/WPCTest.cpp",
			"settings":
			{
				"buffer_size": 1579,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/stdafx.h",
			"settings":
			{
				"buffer_size": 425,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/dev/eclipse/svg-viewer-android-master/assets/svg-logo.svg",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1857 files for \"TessBaseAPI\"\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrTaskProcessor.java:\n   35  import com.googlecode.leptonica.android.Scale;\n   36  import com.googlecode.leptonica.android.WriteFile;\n   37: import com.googlecode.tesseract.android.TessBaseAPI;\n   38  \n   39  import java.io.File;\n   ..\n   50  \n   51      /** The wrapper for the native Tesseract instance. */\n   52:     private final TessBaseAPI mTessBaseAPI;\n   53  \n   54      /** The wrapper for the native Hydrogen instance. */\n   ..\n   78  \n   79          mHandler = new Handler();\n   80:         mTessBaseAPI = new TessBaseAPI();\n   81          mTextDetector = new HydrogenTextDetector();\n   82          mTaskQueue = new LinkedList<OcrTask>();\n   ..\n  166          abort();\n  167  \n  168:         mTessBaseAPI.end();\n  169      }\n  170  \n  ...\n  314                      .getPageSegMode();\n  315  \n  316:             mTessBaseAPI.init(mDatapath.getAbsolutePath() + \"/\", language);\n  317:             mTessBaseAPI.setDebug(debug);\n  318:             mTessBaseAPI.setPageSegMode(pageSegMode);\n  319  \n  320              for (String key : params.getVariableKeys()) {\n  321                  String value = params.getVariable(key);\n  322:                 mTessBaseAPI.setVariable(key, value);\n  323              }\n  324          }\n  ...\n  428              }\n  429  \n  430:             mTessBaseAPI.setImage(pix);\n  431:             String string = mTessBaseAPI.getUTF8Text();\n  432:             int[] confidences = mTessBaseAPI.wordConfidences();\n  433:             mTessBaseAPI.clear();\n  434  \n  435              pix.recycle();\n  ...\n  532  \n  533          private void cleanupOcrLibrary() {\n  534:             mTessBaseAPI.clear();\n  535          }\n  536      }\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\opticflow\\OcrQueue.java:\n   21  \n   22  import com.googlecode.eyesfree.opticflow.TextTrackerProcessor.TrackedRect;\n   23: import com.googlecode.tesseract.android.TessBaseAPI;\n   24  \n   25  import java.util.Collection;\n   ..\n   35      private static final String DEFAULT_WHITELIST = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/:=.@,!-'%()$&?*\";\n   36  \n   37:     private final TessBaseAPI mOcrAPI;\n   38      private final LinkedList<TrackedRect> mRectQueue;\n   39      private final String mTessdata;\n   ..\n   56          mLanguage = language;\n   57          mRectQueue = new LinkedList<TrackedRect>();\n   58:         mOcrAPI = new TessBaseAPI();\n   59      }\n   60  \n   ..\n   75  \n   76          if (success) {\n   77:             mOcrAPI.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n   78:             mOcrAPI.setVariable(TessBaseAPI.VAR_CHAR_WHITELIST, DEFAULT_WHITELIST);\n   79  \n   80              mInitialized = true;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two-test\\src\\com\\googlecode\\tesseract\\android\\test\\TessBaseAPITest.java:\n   19  import com.googlecode.leptonica.android.Pixa;\n   20  import com.googlecode.tesseract.android.ResultIterator;\n   21: import com.googlecode.tesseract.android.TessBaseAPI;\n   22: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   23  \n   24  import android.graphics.Bitmap;\n   ..\n   34  import junit.framework.TestCase;\n   35  \n   36: public class TessBaseAPITest extends TestCase {\n   37      private static final String TESSBASE_PATH = \"/mnt/sdcard/tesseract/\";\n   38      private static final String DEFAULT_LANGUAGE = \"eng\";\n   ..\n   47  \n   48          // Attempt to initialize the API.\n   49:         final TessBaseAPI baseApi = new TessBaseAPI();\n   50          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   51  \n   ..\n   61  \n   62          // Attempt to initialize the API.\n   63:         final TessBaseAPI baseApi = new TessBaseAPI();\n   64          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   65  \n   ..\n   99  \n  100          // Attempt to initialize the API.\n  101:         final TessBaseAPI baseApi = new TessBaseAPI();\n  102          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n  103:         baseApi.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n  104          baseApi.setImage(bmp);\n  105  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\Android.mk:\n   62    pageiterator.cpp \\\n   63    resultiterator.cpp \\\n   64:   tessbaseapi.cpp\n   65  \n   66  LOCAL_C_INCLUDES += \\\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.cpp:\n  103  const int kMaxCredibleResolution = 2400;\n  104  \n  105: TessBaseAPI::TessBaseAPI()\n  106    : tesseract_(NULL),\n  107      osd_tesseract_(NULL),\n  ...\n  126  }\n  127  \n  128: TessBaseAPI::~TessBaseAPI() {\n  129    End();\n  130  }\n  ...\n  133   * Returns the version identifier as a static string. Do not delete.\n  134   */\n  135: const char* TessBaseAPI::Version() {\n  136    return VERSION;\n  137  }\n  ...\n  149  #endif\n  150  #endif\n  151: size_t TessBaseAPI::getOpenCLDevice(void **data) {\n  152  #ifdef USE_OPENCL\n  153  #if USE_DEVICE_SELECTION\n  ...\n  169   * SIGSEGV, SIGFPE, or SIGBUS signal. (Linux/Unix only).\n  170   */\n  171: void TessBaseAPI::CatchSignals() {\n  172  #ifdef __linux__\n  173    struct sigaction action;\n  ...\n  188   * loading a UNLV zone file.\n  189   */\n  190: void TessBaseAPI::SetInputName(const char* name) {\n  191    if (input_file_ == NULL)\n  192      input_file_ = new STRING(name);\n  ...\n  196  \n  197  /** Set the name of the output files. Needed only for debugging. */\n  198: void TessBaseAPI::SetOutputName(const char* name) {\n  199    if (output_file_ == NULL)\n  200      output_file_ = new STRING(name);\n  ...\n  203  }\n  204  \n  205: bool TessBaseAPI::SetVariable(const char* name, const char* value) {\n  206    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  207    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_NON_INIT_ONLY,\n  ...\n  209  }\n  210  \n  211: bool TessBaseAPI::SetDebugVariable(const char* name, const char* value) {\n  212    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  213    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_DEBUG_ONLY,\n  ...\n  215  }\n  216  \n  217: bool TessBaseAPI::GetIntVariable(const char *name, int *value) const {\n  218    IntParam *p = ParamUtils::FindParam<IntParam>(\n  219        name, GlobalParams()->int_params, tesseract_->params()->int_params);\n  ...\n  223  }\n  224  \n  225: bool TessBaseAPI::GetBoolVariable(const char *name, bool *value) const {\n  226    BoolParam *p = ParamUtils::FindParam<BoolParam>(\n  227        name, GlobalParams()->bool_params, tesseract_->params()->bool_params);\n  ...\n  231  }\n  232  \n  233: const char *TessBaseAPI::GetStringVariable(const char *name) const {\n  234    StringParam *p = ParamUtils::FindParam<StringParam>(\n  235        name, GlobalParams()->string_params, tesseract_->params()->string_params);\n  ...\n  237  }\n  238  \n  239: bool TessBaseAPI::GetDoubleVariable(const char *name, double *value) const {\n  240    DoubleParam *p = ParamUtils::FindParam<DoubleParam>(\n  241        name, GlobalParams()->double_params, tesseract_->params()->double_params);\n  ...\n  246  \n  247  /** Get value of named variable as a string, if it exists. */\n  248: bool TessBaseAPI::GetVariableAsString(const char *name, STRING *val) {\n  249    return ParamUtils::GetParamAsString(name, tesseract_->params(), val);\n  250  }\n  251  \n  252  /** Print Tesseract parameters to the given file. */\n  253: void TessBaseAPI::PrintVariables(FILE *fp) const {\n  254    ParamUtils::PrintParams(fp, tesseract_->params());\n  255  }\n  ...\n  263   * @return: 0 on success and -1 on initialization failure.\n  264   */\n  265: int TessBaseAPI::Init(const char* datapath, const char* language,\n  266                        OcrEngineMode oem, char **configs, int configs_size,\n  267                        const GenericVector<STRING> *vars_vec,\n  268                        const GenericVector<STRING> *vars_values,\n  269                        bool set_only_non_debug_params) {\n  270:   PERF_COUNT_START(\"TessBaseAPI::Init\")\n  271    // Default language is \"eng\".\n  272    if (language == NULL) language = \"eng\";\n  ...\n  333   * The returned string should NOT be deleted.\n  334   */\n  335: const char* TessBaseAPI::GetInitLanguagesAsString() const {\n  336    return (language_ == NULL || language_->string() == NULL) ?\n  337        \"\" : language_->string();\n  ...\n  343   * as dependencies of other loaded languages.\n  344   */\n  345: void TessBaseAPI::GetLoadedLanguagesAsVector(\n  346      GenericVector<STRING>* langs) const {\n  347    langs->clear();\n  ...\n  357   * Returns the available languages in the vector of STRINGs.\n  358   */\n  359: void TessBaseAPI::GetAvailableLanguagesAsVector(\n  360      GenericVector<STRING>* langs) const {\n  361    langs->clear();\n  ...\n  409   * in a separate API at some future time.\n  410   */\n  411: int TessBaseAPI::InitLangMod(const char* datapath, const char* language) {\n  412    if (tesseract_ == NULL)\n  413      tesseract_ = new Tesseract;\n  ...\n  421   * AnalysePage. Calls that attempt recognition will generate an error.\n  422   */\n  423: void TessBaseAPI::InitForAnalysePage() {\n  424    if (tesseract_ == NULL) {\n  425      tesseract_ = new Tesseract;\n  ...\n  433   * and also accepts a relative or absolute path name.\n  434   */\n  435: void TessBaseAPI::ReadConfigFile(const char* filename) {\n  436    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_NON_INIT_ONLY);\n  437  }\n  438  \n  439  /** Same as above, but only set debug params from the given config file. */\n  440: void TessBaseAPI::ReadDebugConfigFile(const char* filename) {\n  441    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_DEBUG_ONLY);\n  442  }\n  ...\n  447   * ReadConfigFile or SetVariable(\"tessedit_pageseg_mode\", mode as string).\n  448   */\n  449: void TessBaseAPI::SetPageSegMode(PageSegMode mode) {\n  450    if (tesseract_ == NULL)\n  451      tesseract_ = new Tesseract;\n  ...\n  454  \n  455  /** Return the current page segmentation mode. */\n  456: PageSegMode TessBaseAPI::GetPageSegMode() const {\n  457    if (tesseract_ == NULL)\n  458      return PSM_SINGLE_BLOCK;\n  ...\n  474   * as UTF8 and must be freed with the delete [] operator.\n  475   */\n  476: char* TessBaseAPI::TesseractRect(const unsigned char* imagedata,\n  477                                   int bytes_per_pixel,\n  478                                   int bytes_per_line,\n  ...\n  496   * adaptive data.\n  497   */\n  498: void TessBaseAPI::ClearAdaptiveClassifier() {\n  499    if (tesseract_ == NULL)\n  500      return;\n  ...\n  512   * will automatically perform recognition.\n  513   */\n  514: void TessBaseAPI::SetImage(const unsigned char* imagedata,\n  515                             int width, int height,\n  516                             int bytes_per_pixel, int bytes_per_line) {\n  ...\n  520  }\n  521  \n  522: void TessBaseAPI::SetSourceResolution(int ppi) {\n  523    if (thresholder_)\n  524      thresholder_->SetSourceYResolution(ppi);\n  ...\n  537   * with less copies than an implementation that does not.\n  538   */\n  539: void TessBaseAPI::SetImage(const Pix* pix) {\n  540    if (InternalSetImage())\n  541      thresholder_->SetImage(pix);\n  ...\n  547   * can be recognized with the same image.\n  548   */\n  549: void TessBaseAPI::SetRectangle(int left, int top, int width, int height) {\n  550    if (thresholder_ == NULL)\n  551      return;\n  ...\n  558   * Get a copy of the internal thresholded image from Tesseract.\n  559   */\n  560: Pix* TessBaseAPI::GetThresholdedImage() {\n  561    if (tesseract_ == NULL)\n  562      return NULL;\n  ...\n  571   * Can be called before or after Recognize.\n  572   */\n  573: Boxa* TessBaseAPI::GetRegions(Pixa** pixa) {\n  574    return GetComponentImages(RIL_BLOCK, false, pixa, NULL);\n  575  }\n  ...\n  583   * also returned as an array of one element per line. delete [] after use.\n  584   */\n  585: Boxa* TessBaseAPI::GetTextlines(const bool raw_image, const int raw_padding,\n  586                                  Pixa** pixa, int** blockids, int** paraids) {\n  587    return GetComponentImages(RIL_TEXTLINE, true, raw_image, raw_padding,\n  ...\n  597   * array of one element per line. delete [] after use.\n  598   */\n  599: Boxa* TessBaseAPI::GetStrips(Pixa** pixa, int** blockids) {\n  600    return GetComponentImages(RIL_TEXTLINE, false, pixa, blockids);\n  601  }\n  ...\n  606   * Can be called before or after Recognize.\n  607   */\n  608: Boxa* TessBaseAPI::GetWords(Pixa** pixa) {\n  609    return GetComponentImages(RIL_WORD, true, pixa, NULL);\n  610  }\n  ...\n  616   * Can be called before or after Recognize.\n  617   */\n  618: Boxa* TessBaseAPI::GetConnectedComponents(Pixa** pixa) {\n  619    return GetComponentImages(RIL_SYMBOL, true, pixa, NULL);\n  620  }\n  ...\n  628   * If text_only is true, then only text components are returned.\n  629   */\n  630: Boxa* TessBaseAPI::GetComponentImages(PageIteratorLevel level,\n  631                                        bool text_only, bool raw_image,\n  632                                        const int raw_padding,\n  ...\n  709  }\n  710  \n  711: int TessBaseAPI::GetThresholdedImageScaleFactor() const {\n  712    if (thresholder_ == NULL) {\n  713      return 0;\n  ...\n  717  \n  718  /** Dump the internal binary image to a PGM file. */\n  719: void TessBaseAPI::DumpPGM(const char* filename) {\n  720    if (tesseract_ == NULL)\n  721      return;\n  ...\n  786   * Returns NULL on error or an empty page.\n  787   * The returned iterator must be deleted after use.\n  788:  * WARNING! This class points to data held within the TessBaseAPI class, and\n  789:  * therefore can only be used while the TessBaseAPI class still exists and\n  790   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  791   * DetectOS, or anything else that changes the internal PAGE_RES.\n  792   */\n  793: PageIterator* TessBaseAPI::AnalyseLayout() {\n  794    if (FindLines() == 0) {\n  795      if (block_list_->empty())\n  ...\n  809   * internal structures.\n  810   */\n  811: int TessBaseAPI::Recognize(ETEXT_DESC* monitor) {\n  812    if (tesseract_ == NULL)\n  813      return -1;\n  ...\n  878  \n  879  /** Tests the chopper by exhaustively running chop_one_blob. */\n  880: int TessBaseAPI::RecognizeForChopTest(ETEXT_DESC* monitor) {\n  881    if (tesseract_ == NULL)\n  882      return -1;\n  ...\n  924   * for interactively debugging a bad page.\n  925   */\n  926: bool TessBaseAPI::ProcessPages(const char* filename,\n  927                                 const char* retry_config, int timeout_millisec,\n  928                                 STRING* text_out) {\n  ...\n  948  }\n  949  \n  950: void TessBaseAPI::SetInputImage(Pix *pix) {\n  951    if (input_image_)\n  952      pixDestroy(&input_image_);\n  ...\n  954  }\n  955  \n  956: Pix* TessBaseAPI::GetInputImage() {\n  957    return input_image_;\n  958  }\n  959  \n  960: const char * TessBaseAPI::GetInputName() {\n  961    if (input_file_)\n  962      return input_file_->c_str();\n  ...\n  964  }\n  965  \n  966: const char *  TessBaseAPI::GetDatapath() {\n  967    return tesseract_->datadir.c_str();\n  968  }\n  969  \n  970: int TessBaseAPI::GetSourceYResolution() {\n  971    return thresholder_->GetSourceYResolution();\n  972  }\n  973  \n  974: bool TessBaseAPI::ProcessPages(const char* filename,\n  975                                 const char* retry_config, int timeout_millisec,\n  976                                 TessResultRenderer* renderer) {\n  ...\n 1091   * The text is returned in text_out. Returns false on error.\n 1092   */\n 1093: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1094                                const char* retry_config, int timeout_millisec,\n 1095                                STRING* text_out) {\n ....\n 1127   * The text is returned in renderer. Returns false on error.\n 1128   */\n 1129: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1130                                const char* retry_config, int timeout_millisec,\n 1131                                TessResultRenderer* renderer) {\n ....\n 1190   * Recognize. The returned iterator must be deleted after use.\n 1191   */\n 1192: LTRResultIterator* TessBaseAPI::GetLTRIterator() {\n 1193    if (tesseract_ == NULL || page_res_ == NULL)\n 1194      return NULL;\n ....\n 1202   * Get a reading-order iterator to the results of LayoutAnalysis and/or\n 1203   * Recognize. The returned iterator must be deleted after use.\n 1204:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1205:  * therefore can only be used while the TessBaseAPI class still exists and\n 1206   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1207   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1208   */\n 1209: ResultIterator* TessBaseAPI::GetIterator() {\n 1210    if (tesseract_ == NULL || page_res_ == NULL)\n 1211      return NULL;\n ....\n 1219   * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n 1220   * The returned iterator must be deleted after use.\n 1221:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1222:  * therefore can only be used while the TessBaseAPI class still exists and\n 1223   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1224   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1225   */\n 1226: MutableIterator* TessBaseAPI::GetMutableIterator() {\n 1227    if (tesseract_ == NULL || page_res_ == NULL)\n 1228      return NULL;\n ....\n 1234  \n 1235  /** Make a text string from the internal data structures. */\n 1236: char* TessBaseAPI::GetUTF8Text() {\n 1237    if (tesseract_ == NULL ||\n 1238        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1335   * STL removed from original patch submission and refactored by rays.\n 1336   */\n 1337: char* TessBaseAPI::GetHOCRText(int page_number) {\n 1338    if (tesseract_ == NULL ||\n 1339        (page_res_ == NULL && Recognize(NULL) < 0))\n ....\n 1515   * page_number is a 0-base page index that will appear in the box file.\n 1516   */\n 1517: char* TessBaseAPI::GetBoxText(int page_number) {\n 1518    if (tesseract_ == NULL ||\n 1519        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1570   * and must be freed with the delete [] operator.\n 1571   */\n 1572: char* TessBaseAPI::GetUNLVText() {\n 1573    if (tesseract_ == NULL ||\n 1574        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1672  \n 1673  /** Returns the average word confidence for Tesseract page result. */\n 1674: int TessBaseAPI::MeanTextConf() {\n 1675    int* conf = AllWordConfidences();\n 1676    if (!conf) return 0;\n ....\n 1684  \n 1685  /** Returns an array of all word confidences, terminated by -1. */\n 1686: int* TessBaseAPI::AllWordConfidences() {\n 1687    if (tesseract_ == NULL ||\n 1688        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1718   * Returns false if adaption was not possible for some reason.\n 1719   */\n 1720: bool TessBaseAPI::AdaptToWordStr(PageSegMode mode, const char* wordstr) {\n 1721    int debug = 0;\n 1722    GetIntVariable(\"applybox_debug\", &debug);\n ....\n 1782   * any Recognize or Get* operation.\n 1783   */\n 1784: void TessBaseAPI::Clear() {\n 1785    if (thresholder_ != NULL)\n 1786      thresholder_->Clear();\n ....\n 1790  /**\n 1791   * Close down tesseract and free up all memory. End() is equivalent to\n 1792:  * destructing and reconstructing your TessBaseAPI.\n 1793   * Once End() has been used, none of the other API functions may be used\n 1794   * other than Init and anything declared above it in the class definition.\n 1795   */\n 1796: void TessBaseAPI::End() {\n 1797    if (thresholder_ != NULL) {\n 1798      delete thresholder_;\n ....\n 1847  // There are a variety of expensive-to-load constant data structures (mostly\n 1848  // language dictionaries) that are cached globally -- surviving the Init()\n 1849: // and End() of individual TessBaseAPI's.  This function allows the clearing\n 1850  // of these caches.\n 1851: void TessBaseAPI::ClearPersistentCache() {\n 1852    Dict::GlobalDawgCache()->DeleteUnusedDawgs();\n 1853  }\n ....\n 1857   * returns 0 if the word is invalid, non-zero if valid\n 1858   */\n 1859: int TessBaseAPI::IsValidWord(const char *word) {\n 1860    return tesseract_->getDict().valid_word(word);\n 1861  }\n ....\n 1864  // TODO(rays) Obsolete this function and replace with a more aptly named\n 1865  // function that returns image coordinates rather than tesseract coordinates.\n 1866: bool TessBaseAPI::GetTextDirection(int* out_offset, float* out_slope) {\n 1867    PageIterator* it = AnalyseLayout();\n 1868    if (it == NULL) {\n ....\n 1897  \n 1898  /** Sets Dict::letter_is_okay_ function to point to the given function. */\n 1899: void TessBaseAPI::SetDictFunc(DictFunc f) {\n 1900    if (tesseract_ != NULL) {\n 1901      tesseract_->getDict().letter_is_okay_ = f;\n ....\n 1907   * function.\n 1908   */\n 1909: void TessBaseAPI::SetProbabilityInContextFunc(ProbabilityInContextFunc f) {\n 1910    if (tesseract_ != NULL) {\n 1911      tesseract_->getDict().probability_in_context_ = f;\n ....\n 1919  \n 1920  /** Sets Wordrec::fill_lattice_ function to point to the given function. */\n 1921: void TessBaseAPI::SetFillLatticeFunc(FillLatticeFunc f) {\n 1922    if (tesseract_ != NULL) tesseract_->fill_lattice_ = f;\n 1923  }\n 1924  \n 1925  /** Common code for setting the image. */\n 1926: bool TessBaseAPI::InternalSetImage() {\n 1927    if (tesseract_ == NULL) {\n 1928      tprintf(\"Please call Init before attempting to send an image.\");\n ....\n 1941   * The usual argument to Threshold is Tesseract::mutable_pix_binary().\n 1942   */\n 1943: void TessBaseAPI::Threshold(Pix** pix) {\n 1944    ASSERT_HOST(pix != NULL);\n 1945    if (*pix != NULL)\n ....\n 1979  \n 1980  /** Find lines from the image making the BLOCK_LIST. */\n 1981: int TessBaseAPI::FindLines() {\n 1982    if (thresholder_ == NULL || thresholder_->IsEmpty()) {\n 1983      tprintf(\"Please call SetImage before attempting recognition.\");\n ....\n 2042  \n 2043  /** Delete the pageres and clear the block list ready for a new page. */\n 2044: void TessBaseAPI::ClearResults() {\n 2045    if (tesseract_ != NULL) {\n 2046      tesseract_->Clear();\n ....\n 2070   * Also return the number of recognized blobs in blob_count.\n 2071   */\n 2072: int TessBaseAPI::TextLength(int* blob_count) {\n 2073    if (tesseract_ == NULL || page_res_ == NULL)\n 2074      return 0;\n ....\n 2100   * Returns true if the image was processed successfully.\n 2101   */\n 2102: bool TessBaseAPI::DetectOS(OSResults* osr) {\n 2103    if (tesseract_ == NULL)\n 2104      return false;\n ....\n 2111  }\n 2112  \n 2113: void TessBaseAPI::set_min_orientation_margin(double margin) {\n 2114    tesseract_->min_orientation_margin.set_value(margin);\n 2115  }\n ....\n 2129   * consistent with GetTextLines().\n 2130   */\n 2131: void TessBaseAPI::GetBlockTextOrientations(int** block_orientation,\n 2132                                             bool** vertical_writing) {\n 2133    delete[] *block_orientation;\n ....\n 2177  \n 2178  /** Find lines from the image making the BLOCK_LIST. */\n 2179: BLOCK_LIST* TessBaseAPI::FindLinesCreateBlockList() {\n 2180    FindLines();\n 2181    BLOCK_LIST* result = block_list_;\n ....\n 2189   * and let go of including the other headers.\n 2190   */\n 2191: void TessBaseAPI::DeleteBlockList(BLOCK_LIST *block_list) {\n 2192    delete block_list;\n 2193  }\n 2194  \n 2195  \n 2196: ROW *TessBaseAPI::MakeTessOCRRow(float baseline,\n 2197                                   float xheight,\n 2198                                   float descender,\n ....\n 2211  \n 2212  /** Creates a TBLOB* from the whole pix. */\n 2213: TBLOB *TessBaseAPI::MakeTBLOB(Pix *pix) {\n 2214    int width = pixGetWidth(pix);\n 2215    int height = pixGetHeight(pix);\n ....\n 2241   * normalization-antidote is returned.\n 2242   */\n 2243: void TessBaseAPI::NormalizeTBLOB(TBLOB *tblob, ROW *row, bool numeric_mode) {\n 2244    TBOX box = tblob->bounding_box();\n 2245    float x_center = (box.left() + box.right()) / 2.0f;\n ....\n 2257                             float descender, float ascender,\n 2258                             bool numeric_mode, Pix* pix) {\n 2259:   TBLOB *tblob = TessBaseAPI::MakeTBLOB(pix);\n 2260  \n 2261    // Normalize TBLOB\n 2262    ROW *row =\n 2263:       TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n 2264:   TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode);\n 2265    delete row;\n 2266    return tblob;\n ....\n 2272   * of a single character.\n 2273   */\n 2274: void TessBaseAPI::AdaptToCharacter(const char *unichar_repr,\n 2275                                     int length,\n 2276                                     float baseline,\n ....\n 2306  \n 2307  \n 2308: PAGE_RES* TessBaseAPI::RecognitionPass1(BLOCK_LIST* block_list) {\n 2309    PAGE_RES *page_res = new PAGE_RES(block_list,\n 2310                                      &(tesseract_->prev_word_best_choice_));\n ....\n 2313  }\n 2314  \n 2315: PAGE_RES* TessBaseAPI::RecognitionPass2(BLOCK_LIST* block_list,\n 2316                                          PAGE_RES* pass1_result) {\n 2317    if (!pass1_result)\n ....\n 2322  }\n 2323  \n 2324: void TessBaseAPI::DetectParagraphs(bool after_text_recognition) {\n 2325    int debug_level = 0;\n 2326    GetIntVariable(\"paragraph_debug_level\", &debug_level);\n ....\n 2408   * and the bounding boxes of the characters.\n 2409   */\n 2410: int TessBaseAPI::TesseractExtractResult(char** text,\n 2411                                          int** lengths,\n 2412                                          float** costs,\n ....\n 2460  // corresponding to each feature in int_features.\n 2461  // TODO(rays) Fix the caller to out outline_counts instead.\n 2462: void TessBaseAPI::GetFeaturesForBlob(TBLOB* blob,\n 2463                                       INT_FEATURE_STRUCT* int_features,\n 2464                                       int* num_features,\n ....\n 2488  // This method returns the row to which a box of specified dimensions would\n 2489  // belong. If no good match is found, it returns NULL.\n 2490: ROW* TessBaseAPI::FindRowForBox(BLOCK_LIST* blocks,\n 2491                                  int left, int top, int right, int bottom) {\n 2492    TBOX box(left, bottom, right, top);\n ....\n 2513  \n 2514  /** Method to run adaptive classifier on a blob. */\n 2515: void TessBaseAPI::RunAdaptiveClassifier(TBLOB* blob,\n 2516                                          int num_max_matches,\n 2517                                          int* unichar_ids,\n ....\n 2536  \n 2537  /** This method returns the string form of the specified unichar. */\n 2538: const char* TessBaseAPI::GetUnichar(int unichar_id) {\n 2539    return tesseract_->unicharset.id_to_unichar(unichar_id);\n 2540  }\n 2541  \n 2542  /** Return the pointer to the i-th dawg loaded into tesseract_ object. */\n 2543: const Dawg *TessBaseAPI::GetDawg(int i) const {\n 2544    if (tesseract_ == NULL || i >= NumDawgs()) return NULL;\n 2545    return tesseract_->getDict().GetDawg(i);\n ....\n 2547  \n 2548  /** Return the number of dawgs loaded into tesseract_ object. */\n 2549: int TessBaseAPI::NumDawgs() const {\n 2550    return tesseract_ == NULL ? 0 : tesseract_->getDict().NumDawgs();\n 2551  }\n 2552  \n 2553  /** Return a pointer to underlying CubeRecoContext object if present. */\n 2554: CubeRecoContext *TessBaseAPI::GetCubeRecoContext() const {\n 2555    return (tesseract_ == NULL) ? NULL : tesseract_->GetCubeRecoContext();\n 2556  }\n 2557  \n 2558: TessResultRenderer* TessBaseAPI::NewRenderer() {\n 2559    if (tesseract_->tessedit_create_boxfile\n 2560        || tesseract_->tessedit_make_boxes_from_boxes) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.h:\n   98   * include any other Tesseract headers.\n   99   */\n  100: class TESS_API TessBaseAPI {\n  101   public:\n  102:   TessBaseAPI();\n  103:   virtual ~TessBaseAPI();\n  104  \n  105    /**\n  ...\n  187     * Instances are now mostly thread-safe and totally independent,\n  188     * but some global parameters remain. Basically it is safe to use multiple\n  189:    * TessBaseAPIs in different threads in parallel, UNLESS:\n  190     * you use SetVariable on some of the Params in classify and textord.\n  191     * If you do, then the effect will be to change it for all your instances.\n  ...\n  482     * Returns NULL on error.\n  483     * The returned iterator must be deleted after use.\n  484:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  485:    * therefore can only be used while the TessBaseAPI class still exists and\n  486     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  487     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  551     * Get a reading-order iterator to the results of LayoutAnalysis and/or\n  552     * Recognize. The returned iterator must be deleted after use.\n  553:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  554:    * therefore can only be used while the TessBaseAPI class still exists and\n  555     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  556     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  561     * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n  562     * The returned iterator must be deleted after use.\n  563:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  564:    * therefore can only be used while the TessBaseAPI class still exists and\n  565     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  566     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  627    /**\n  628     * Close down tesseract and free up all memory. End() is equivalent to\n  629:    * destructing and reconstructing your TessBaseAPI.\n  630     * Once End() has been used, none of the other API functions may be used\n  631     * other than Init and anything declared above it in the class definition.\n  ...\n  637     * There are a variety of expensive-to-load constant data structures (mostly\n  638     * language dictionaries) that are cached globally -- surviving the Init()\n  639:    * and End() of individual TessBaseAPI's.  This function allows the clearing\n  640     * of these caches.\n  641     **/\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n    8  TESS_API const char* TESS_CALL TessVersion()\n    9  {\n   10:     return TessBaseAPI::Version();\n   11  }\n   12  \n   ..\n   30  TESS_API void TESS_CALL TessDeleteBlockList(BLOCK_LIST* block_list)\n   31  {\n   32:     TessBaseAPI::DeleteBlockList(block_list);\n   33  }\n   34  \n   ..\n   78  }\n   79  \n   80: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api)\n   81  {\n   82      return renderer->AddImage(api);\n   83  }\n   84  \n   85: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api)\n   86  {\n   87      return renderer->AddError(api);\n   ..\n  123  }\n  124  \n  125: TESS_API TessBaseAPI* TESS_CALL TessBaseAPICreate()\n  126  {\n  127:     return new TessBaseAPI;\n  128  }\n  129  \n  130: TESS_API void TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle)\n  131  {\n  132      delete handle;\n  133  }\n  134  \n  135: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device)\n  136  {\n  137      return handle->getOpenCLDevice(device);\n  138  }\n  139  \n  140: TESS_API void TESS_CALL TessBaseAPISetInputName(TessBaseAPI* handle, const char* name)\n  141  {\n  142      handle->SetInputName(name);\n  143  }\n  144  \n  145: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle)\n  146  {\n  147      return handle->GetInputName();\n  148  }\n  149  \n  150: TESS_API void TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, Pix* pix)\n  151  {\n  152      handle->SetInputImage(pix);\n  153  }\n  154  \n  155: TESS_API Pix* TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle)\n  156  {\n  157      return handle->GetInputImage();\n  158  }\n  159  \n  160: TESS_API int TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle)\n  161  {\n  162      return handle->GetSourceYResolution();\n  163  }\n  164  \n  165: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle)\n  166  {\n  167      return handle->GetDatapath();\n  168  }\n  169  \n  170: TESS_API void TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name)\n  171  {\n  172      handle->SetOutputName(name);\n  173  }\n  174  \n  175: TESS_API BOOL TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value)\n  176  {\n  177      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  178  }\n  179  \n  180: TESS_API BOOL TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value)\n  181  {\n  182      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  183  }\n  184  \n  185: TESS_API BOOL TESS_CALL TessBaseAPIGetIntVariable(const TessBaseAPI* handle, const char* name, int* value)\n  186  {\n  187      return handle->GetIntVariable(name, value) ? TRUE : FALSE;\n  188  }\n  189  \n  190: TESS_API BOOL TESS_CALL TessBaseAPIGetBoolVariable(const TessBaseAPI* handle, const char* name, BOOL* value)\n  191  {\n  192      bool boolValue;\n  ...\n  202  }\n  203  \n  204: TESS_API BOOL TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value)\n  205  {\n  206      return handle->GetDoubleVariable(name, value) ? TRUE : FALSE;\n  207  }\n  208  \n  209: TESS_API const char* TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name)\n  210  {\n  211      return handle->GetStringVariable(name);\n  212  }\n  213  \n  214: TESS_API void TESS_CALL TessBaseAPIPrintVariables(const TessBaseAPI* handle, FILE* fp)\n  215  {\n  216      handle->PrintVariables(fp);\n  217  }\n  218  \n  219: TESS_API BOOL TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename)\n  220  {\n  221      FILE* fp = fopen(filename, \"w\");\n  ...\n  229  }\n  230  \n  231: TESS_API BOOL TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val)\n  232  {\n  233      return handle->GetVariableAsString(name, val) ? TRUE : FALSE;\n  234  }\n  235  \n  236: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language,\n  237      TessOcrEngineMode mode, char** configs, int configs_size,\n  238      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  252  \n  253  \n  254: TESS_API int TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  255                                          char** configs, int configs_size)\n  256  {\n  ...\n  258  }\n  259  \n  260: TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262      return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265: TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267      return handle->Init(datapath, language);\n  268  }\n  269  \n  270: TESS_API const char* TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle)\n  271  {\n  272      return handle->GetInitLanguagesAsString();\n  273  }\n  274  \n  275: TESS_API char** TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle)\n  276  {\n  277      GenericVector<STRING> languages;\n  ...\n  284  }\n  285  \n  286: TESS_API char** TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle)\n  287  {\n  288      GenericVector<STRING> languages;\n  ...\n  295  }\n  296  \n  297: TESS_API int TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language)\n  298  {\n  299      return handle->InitLangMod(datapath, language);\n  300  }\n  301  \n  302: TESS_API void TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle)\n  303  {\n  304      handle->InitForAnalysePage();\n  305  }\n  306  \n  307: TESS_API void TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename)\n  308  {\n  309      handle->ReadConfigFile(filename);\n  310  }\n  311  \n  312: TESS_API void TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename)\n  313  {\n  314      handle->ReadDebugConfigFile(filename);\n  315  }\n  316  \n  317: TESS_API void TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode)\n  318  {\n  319      handle->SetPageSegMode(mode);\n  320  }\n  321  \n  322: TESS_API TessPageSegMode TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle)\n  323  {\n  324      return handle->GetPageSegMode();\n  325  }\n  326  \n  327: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  328                                                 int bytes_per_pixel, int bytes_per_line,\n  329                                                 int left, int top, int width, int height)\n  ...\n  332  }\n  333  \n  334: TESS_API void TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle)\n  335  {\n  336      handle->ClearAdaptiveClassifier();\n  337  }\n  338  \n  339: TESS_API void TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  340                                                    int bytes_per_pixel, int bytes_per_line)\n  341  {\n  ...\n  343  }\n  344  \n  345: TESS_API void TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix)\n  346  {\n  347      return handle->SetImage(pix);\n  348  }\n  349  \n  350: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi)\n  351  {\n  352      handle->SetSourceResolution(ppi);\n  353  }\n  354  \n  355: TESS_API void TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height)\n  356  {\n  357      handle->SetRectangle(left, top, width, height);\n  358  }\n  359  \n  360: TESS_API void TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder)\n  361  {\n  362      handle->SetThresholder(thresholder);\n  363  }\n  364  \n  365: TESS_API struct Pix* TESS_CALL TessBaseAPIGetThresholdedImage(TessBaseAPI* handle)\n  366  {\n  367      return handle->GetThresholdedImage();\n  368  }\n  369  \n  370: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetRegions(TessBaseAPI* handle, struct Pixa** pixa)\n  371  {\n  372      return handle->GetRegions(pixa);\n  373  }\n  374  \n  375: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  376  {\n  377      return handle->GetTextlines(pixa, blockids);\n  378  }\n  379  \n  380: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines1(TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  381                                                                    struct Pixa** pixa, int** blockids, int** paraids)\n  382  {\n  ...\n  384  }\n  385  \n  386: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetStrips(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  387  {\n  388      return handle->GetStrips(pixa, blockids);\n  389  }\n  390  \n  391: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetWords(TessBaseAPI* handle, struct Pixa** pixa)\n  392  {\n  393      return handle->GetWords(pixa);\n  394  }\n  395  \n  396: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc)\n  397  {\n  398      return handle->GetConnectedComponents(cc);\n  399  }\n  400  \n  401: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetComponentImages(TessBaseAPI* handle, TessPageIteratorLevel level, BOOL text_only, struct Pixa** pixa, int** blockids)\n  402  {\n  403      return handle->GetComponentImages(level, text_only != FALSE, pixa, blockids);\n  ...\n  405  \n  406  TESS_API struct Boxa*\n  407:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  408                                                             const BOOL raw_image, const int raw_padding,\n  409                                                             struct Pixa** pixa, int** blockids, int** paraids)\n  ...\n  412  }\n  413  \n  414: TESS_API int TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle)\n  415  {\n  416      return handle->GetThresholdedImageScaleFactor();\n  417  }\n  418  \n  419: TESS_API void TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename)\n  420  {\n  421      handle->DumpPGM(filename);\n  422  }\n  423  \n  424: TESS_API TessPageIterator* TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle)\n  425  {\n  426      return handle->AnalyseLayout();\n  427  }\n  428  \n  429: TESS_API int TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  430  {\n  431      return handle->Recognize(monitor);\n  432  }\n  433  \n  434: TESS_API int TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  435  {\n  436      return handle->RecognizeForChopTest(monitor);\n  437  }\n  438  \n  439: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  440                                                   int timeout_millisec)\n  441  {\n  ...\n  447  }\n  448  \n  449: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  450                                                   int timeout_millisec, TessResultRenderer* renderer)\n  451  {\n  ...\n  456  }\n  457  \n  458: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  459                                                  const char* retry_config, int timeout_millisec)\n  460  {\n  ...\n  466  }\n  467  \n  468: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  469                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer)\n  470  {\n  ...\n  475  }\n  476  \n  477: TESS_API TessResultIterator* TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle)\n  478  {\n  479      return handle->GetIterator();\n  480  }\n  481  \n  482: TESS_API TessMutableIterator* TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle)\n  483  {\n  484      return handle->GetMutableIterator();\n  485  }\n  486  \n  487: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle)\n  488  {\n  489      return handle->GetUTF8Text();\n  490  }\n  491  \n  492: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number)\n  493  {\n  494      return handle->GetHOCRText(page_number);\n  495  }\n  496  \n  497: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number)\n  498  {\n  499      return handle->GetBoxText(page_number);\n  500  }\n  501  \n  502: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle)\n  503  {\n  504      return handle->GetUNLVText();\n  505  }\n  506  \n  507: TESS_API int TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle)\n  508  {\n  509      return handle->MeanTextConf();\n  510  }\n  511  \n  512: TESS_API int* TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle)\n  513  {\n  514      return handle->AllWordConfidences();\n  515  }\n  516  \n  517: TESS_API BOOL TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr)\n  518  {\n  519      return handle->AdaptToWordStr(mode, wordstr) ? TRUE : FALSE;\n  520  }\n  521  \n  522: TESS_API void TESS_CALL TessBaseAPIClear(TessBaseAPI* handle)\n  523  {\n  524      handle->Clear();\n  525  }\n  526  \n  527: TESS_API void TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle)\n  528  {\n  529      handle->End();\n  530  }\n  531  \n  532: TESS_API int TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word)\n  533  {\n  534      return handle->IsValidWord(word);\n  535  }\n  536  \n  537: TESS_API BOOL TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope)\n  538  {\n  539      return handle->GetTextDirection(out_offset, out_slope) ? TRUE : FALSE;\n  540  }\n  541  \n  542: TESS_API void TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f)\n  543  {\n  544      handle->SetDictFunc(f);\n  545  }\n  546  \n  547: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle)\n  548  {\n  549      handle->ClearPersistentCache();\n  550  }\n  551  \n  552: TESS_API void TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f)\n  553  {\n  554      handle->SetProbabilityInContextFunc(f);\n  555  }\n  556  \n  557: TESS_API BOOL TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results)\n  558  {\n  559      return handle->DetectOS(results) ? TRUE : FALSE;\n  560  }\n  561  \n  562: TESS_API void TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  563                                                              int* num_features, int* FeatureOutlineIndex)\n  564  {\n  ...\n  568  TESS_API ROW* TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom)\n  569  {\n  570:     return TessBaseAPI::FindRowForBox(blocks, left, top, right, bottom);\n  571  }\n  572  \n  573: TESS_API void TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  574                                                                 int* unichar_ids, float* ratings, int* num_matches_returned)\n  575  {\n  ...\n  577  }\n  578  \n  579: TESS_API const char* TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id)\n  580  {\n  581      return handle->GetUnichar(unichar_id);\n  582  }\n  583  \n  584: TESS_API const TessDawg* TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i)\n  585  {\n  586      return handle->GetDawg(i);\n  587  }\n  588  \n  589: TESS_API int TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle)\n  590  {\n  591      return handle->NumDawgs();\n  ...\n  594  TESS_API ROW* TESS_CALL TessMakeTessOCRRow(float baseline, float xheight, float descender, float ascender)\n  595  {\n  596:     return TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n  597  }\n  598  \n  599  TESS_API TBLOB* TESS_CALL TessMakeTBLOB(struct Pix* pix)\n  600  {\n  601:     return TessBaseAPI::MakeTBLOB(pix);\n  602  }\n  603  \n  604  TESS_API void TESS_CALL TessNormalizeTBLOB(TBLOB* tblob, ROW* row, BOOL numeric_mode)\n  605  {\n  606:     TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode != FALSE);\n  607  }\n  608  \n  609: TESS_API TessOcrEngineMode TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle)\n  610  {\n  611      return handle->oem();\n  612  }\n  613  \n  614: TESS_API void TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb)\n  615  {\n  616      handle->InitTruthCallback(cb);\n  617  }\n  618  \n  619: TESS_API TessCubeRecoContext* TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle)\n  620  {\n  621      return handle->GetCubeRecoContext();\n  622  }\n  623  \n  624: TESS_API void TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin)\n  625  {\n  626      handle->set_min_orientation_margin(margin);\n  627  }\n  628  \n  629: TESS_API void TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing)\n  630  {\n  631      handle->GetBlockTextOrientations(block_orientation, vertical_writing);\n  632  }\n  633  \n  634: TESS_API BLOCK_LIST* TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle)\n  635  {\n  636      return handle->FindLinesCreateBlockList();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.h:\n   37  typedef tesseract::TessUnlvRenderer TessUnlvRenderer;\n   38  typedef tesseract::TessBoxTextRenderer TessBoxTextRenderer;\n   39: typedef tesseract::TessBaseAPI TessBaseAPI;\n   40  typedef tesseract::PageIterator TessPageIterator;\n   41  typedef tesseract::ResultIterator TessResultIterator;\n   ..\n   63  typedef struct TessUnlvRenderer TessUnlvRenderer;\n   64  typedef struct TessBoxTextRenderer TessBoxTextRenderer;\n   65: typedef struct TessBaseAPI TessBaseAPI;\n   66  typedef struct TessPageIterator TessPageIterator;\n   67  typedef struct TessResultIterator TessResultIterator;\n   ..\n  108                TESS_CALL TessResultRendererNext(TessResultRenderer* renderer);\n  109  TESS_API BOOL TESS_CALL TessResultRendererBeginDocument(TessResultRenderer* renderer, const char* title);\n  110: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api);\n  111: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api);\n  112  TESS_API BOOL TESS_CALL TessResultRendererEndDocument(TessResultRenderer* renderer);\n  113  TESS_API BOOL TESS_CALL TessResultRendererGetOutput(TessResultRenderer* renderer, const char** data, int* data_len);\n  ...\n  120  /* Base API */\n  121  \n  122: TESS_API TessBaseAPI*\n  123:                TESS_CALL TessBaseAPICreate();\n  124: TESS_API void  TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle);\n  125  \n  126: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device);\n  127  \n  128: TESS_API void  TESS_CALL TessBaseAPISetInputName( TessBaseAPI* handle, const char* name);\n  129: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle);\n  130  \n  131: TESS_API void  TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, struct Pix* pix);\n  132: TESS_API struct Pix*  TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle);\n  133  \n  134: TESS_API int   TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle);\n  135: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle);\n  136  \n  137: TESS_API void  TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name);\n  138  \n  139: TESS_API BOOL  TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value);\n  140: TESS_API BOOL  TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value);\n  141  \n  142: TESS_API BOOL  TESS_CALL TessBaseAPIGetIntVariable(   const TessBaseAPI* handle, const char* name, int* value);\n  143: TESS_API BOOL  TESS_CALL TessBaseAPIGetBoolVariable(  const TessBaseAPI* handle, const char* name, BOOL* value);\n  144: TESS_API BOOL  TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value);\n  145  TESS_API const char*\n  146:                TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name);\n  147  \n  148: TESS_API void  TESS_CALL TessBaseAPIPrintVariables(      const TessBaseAPI* handle, FILE* fp);\n  149: TESS_API BOOL  TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename);\n  150  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  151: TESS_API BOOL  TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val);\n  152  #endif\n  153  \n  154  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  155: TESS_API int   TESS_CALL TessBaseAPIInit(TessBaseAPI* handle, const char* datapath, const char* language,\n  156                                           TessOcrEngineMode mode, char** configs, int configs_size,\n  157                                           const STRING* vars_vec, size_t vars_vec_size,\n  158                                           const STRING* vars_values, size_t vars_values_size, BOOL set_only_init_params);\n  159  #endif\n  160: TESS_API int   TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  161                                            char** configs, int configs_size);\n  162: TESS_API int   TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem);\n  163: TESS_API int   TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language);\n  164  \n  165: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode mode, \n  166      char** configs, int configs_size,\n  167      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  169  \n  170  TESS_API const char*\n  171:                TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle);\n  172  TESS_API char**\n  173:                TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle);\n  174  TESS_API char**\n  175:                TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle);\n  176  \n  177: TESS_API int   TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language);\n  178: TESS_API void  TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle);\n  179  \n  180: TESS_API void  TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename);\n  181: TESS_API void  TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename);\n  182  \n  183: TESS_API void  TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode);\n  184  TESS_API TessPageSegMode\n  185:                TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle);\n  186  \n  187: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  188                                           int bytes_per_pixel, int bytes_per_line,\n  189                                           int left, int top, int width, int height);\n  190  \n  191: TESS_API void  TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle);\n  192  \n  193: TESS_API void  TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  194                                               int bytes_per_pixel, int bytes_per_line);\n  195: TESS_API void  TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix);\n  196  \n  197: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi);\n  198  \n  199: TESS_API void  TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height);\n  200  \n  201  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  202: TESS_API void  TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder);\n  203  #endif\n  204  \n  205  TESS_API struct Pix*\n  206:                TESS_CALL TessBaseAPIGetThresholdedImage(   TessBaseAPI* handle);\n  207  TESS_API struct Boxa*\n  208:                TESS_CALL TessBaseAPIGetRegions(            TessBaseAPI* handle, struct Pixa** pixa);\n  209  TESS_API struct Boxa*\n  210:                TESS_CALL TessBaseAPIGetTextlines(          TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  211  TESS_API struct Boxa*\n  212:                TESS_CALL TessBaseAPIGetTextlines1(         TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  213                                                                                  struct Pixa** pixa, int** blockids, int** paraids);\n  214  TESS_API struct Boxa*\n  215:                TESS_CALL TessBaseAPIGetStrips(             TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  216  TESS_API struct Boxa*\n  217:                TESS_CALL TessBaseAPIGetWords(              TessBaseAPI* handle, struct Pixa** pixa);\n  218  TESS_API struct Boxa*\n  219:                TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc);\n  220  TESS_API struct Boxa*\n  221:                TESS_CALL TessBaseAPIGetComponentImages(    TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  222                                                             struct Pixa** pixa, int** blockids);\n  223  TESS_API struct Boxa*\n  224:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  225                                                             const BOOL raw_image, const int raw_padding,\n  226                                                             struct Pixa** pixa, int** blockids, int** paraids);\n  227  \n  228: TESS_API int   TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle);\n  229  \n  230: TESS_API void  TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename);\n  231  \n  232  TESS_API TessPageIterator*\n  233:                TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle);\n  234  \n  235: TESS_API int   TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  236: TESS_API int   TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  237: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  238                                                   int timeout_millisec);\n  239: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle,  const char* filename, const char* retry_config,\n  240                                                   int timeout_millisec, TessResultRenderer* renderer);\n  241: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  242                                                  const char* retry_config, int timeout_millisec);\n  243: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  244                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer);\n  245  \n  246  TESS_API TessResultIterator*\n  247:                TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle);\n  248  TESS_API TessMutableIterator*\n  249:                TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle);\n  250  \n  251: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle);\n  252: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number);\n  253: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number);\n  254: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle);\n  255: TESS_API int   TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle);\n  256: TESS_API int*  TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle);\n  257: TESS_API BOOL  TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr);\n  258  \n  259: TESS_API void  TESS_CALL TessBaseAPIClear(TessBaseAPI* handle);\n  260: TESS_API void  TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle);\n  261  \n  262: TESS_API int   TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word);\n  263: TESS_API BOOL  TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope);\n  264  \n  265  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  266: TESS_API void  TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f);\n  267: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle);\n  268: TESS_API void  TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f);\n  269  \n  270: TESS_API void  TESS_CALL TessBaseAPISetFillLatticeFunc(TessBaseAPI* handle, TessFillLatticeFunc f);\n  271: TESS_API BOOL  TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results);\n  272  \n  273: TESS_API void  TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  274                                                         int* num_features, int* FeatureOutlineIndex);\n  275  \n  276  TESS_API ROW*  TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom);\n  277: TESS_API void  TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  278                                                            int* unichar_ids, float* ratings, int* num_matches_returned);\n  279  #endif\n  280  \n  281  TESS_API const char*\n  282:                TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id);\n  283  \n  284  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  285  TESS_API const TessDawg*\n  286:                TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i);\n  287: TESS_API int   TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle);\n  288  #endif\n  289  \n  ...\n  295  \n  296  TESS_API TessOcrEngineMode\n  297:                TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle);\n  298: TESS_API void  TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb);\n  299  \n  300  TESS_API TessCubeRecoContext*\n  301:                TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle);\n  302  #endif\n  303  \n  304: TESS_API void  TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin);\n  305  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  306: TESS_API void  TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing);\n  307  \n  308  TESS_API BLOCK_LIST*\n  309:                TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle);\n  310  #endif\n  311  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\pdfrenderer.cpp:\n   65  }\n   66  \n   67: char* TessPDFRenderer::GetPDFTextObjects(TessBaseAPI* api,\n   68                                           double width, double height,\n   69                                           int page_number) {\n   ..\n  595  \n  596  \n  597: bool TessPDFRenderer::AddImageHandler(TessBaseAPI* api) {\n  598    char buf[kBasicBufSize];\n  599    Pix *pix = api->GetInputImage();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.cpp:\n   60  }\n   61  \n   62: bool TessResultRenderer::AddImage(TessBaseAPI* api) {\n   63    ++imagenum_;\n   64    bool ok = AddImageHandler(api);\n   ..\n   69  }\n   70  \n   71: bool TessResultRenderer::AddError(TessBaseAPI* api) {\n   72    ++imagenum_;\n   73    bool ok = AddErrorHandler(api);\n   ..\n  128  }\n  129  \n  130: bool TessResultRenderer::AddErrorHandler(TessBaseAPI* api) {\n  131    return true;\n  132  }\n  ...\n  144  }\n  145  \n  146: bool TessTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  147    char* utf8 = api->GetUTF8Text();\n  148    if (utf8 == NULL) {\n  ...\n  189  }\n  190  \n  191: bool TessHOcrRenderer::AddImageHandler(TessBaseAPI* api) {\n  192    char* hocr = api->GetHOCRText(imagenum());\n  193    if (hocr == NULL) return false;\n  ...\n  206  }\n  207  \n  208: bool TessUnlvRenderer::AddImageHandler(TessBaseAPI* api) {\n  209    char* unlv = api->GetUNLVText();\n  210    if (unlv == NULL) return false;\n  ...\n  223  }\n  224  \n  225: bool TessBoxTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  226    char* text = api->GetBoxText(imagenum());\n  227    if (text == NULL) return false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.h:\n    1  ///////////////////////////////////////////////////////////////////////\n    2  // File:        renderer.h\n    3: // Description: Rendering interface to inject into TessBaseAPI\n    4  //\n    5  // (C) Copyright 2011, Google Inc.\n    .\n   28  namespace tesseract {\n   29  \n   30: class TessBaseAPI;\n   31  \n   32  /**\n   ..\n   38   * For simplicity implementing this with tesesract version 3.01,\n   39   * the renderer contains document state that is cleared from document\n   40:  * to document just as the TessBaseAPI is. This way the base API can just\n   41   * delegate its rendering functionality to injected renderers, and the\n   42   * renderers can manage the associated state needed for the specific formats\n   ..\n   66       *\n   67       * Note that this API is a bit weird but is designed to fit into the\n   68:      * current TessBaseAPI implementation where the api has lots of state\n   69       * information that we might want to add in.\n   70       */\n   71:     bool AddImage(TessBaseAPI* api);\n   72  \n   73      /**\n   74       * Called to inform the renderer when tesseract failed on an image.\n   75       */\n   76:     bool AddError(TessBaseAPI* api);\n   77  \n   78      /**\n   ..\n  116  \n  117      // This must be overriden to render the OCR'd results\n  118:     virtual bool AddImageHandler(TessBaseAPI* api) = 0;\n  119  \n  120      // The default handler ignores the error and just returns true\n  121:     virtual bool AddErrorHandler(TessBaseAPI* api);\n  122  \n  123      // Hook for specialized handling in EndDocument()\n  ...\n  165  \n  166   protected:\n  167:   virtual bool AddImageHandler(TessBaseAPI* api);\n  168  };\n  169  \n  ...\n  177  protected:\n  178    virtual bool BeginDocumentHandler();\n  179:   virtual bool AddImageHandler(TessBaseAPI* api);\n  180    virtual bool EndDocumentHandler();\n  181  };\n  ...\n  190  protected:\n  191    virtual bool BeginDocumentHandler();\n  192:   virtual bool AddImageHandler(TessBaseAPI* api);\n  193    virtual bool EndDocumentHandler();\n  194  \n  ...\n  208    void AppendPDFObject(const char *data);\n  209    // Create the /Contents object for an entire page.\n  210:   static char* GetPDFTextObjects(TessBaseAPI* api,\n  211                                   double width, double height,\n  212                                   int page_number);\n  ...\n  228  \n  229   protected:\n  230:   virtual bool AddImageHandler(TessBaseAPI* api);\n  231  };\n  232  \n  ...\n  239  \n  240   protected:\n  241:   virtual bool AddImageHandler(TessBaseAPI* api);\n  242  };\n  243  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\tesseractmain.cpp:\n   48      char *versionStrP;\n   49  \n   50:     fprintf(stderr, \"tesseract %s\\n\", tesseract::TessBaseAPI::Version());\n   51  \n   52      versionStrP = getLeptonicaVersion();\n   ..\n  162    if (output != NULL && strcmp(output, \"-\") && strcmp(output, \"stdout\")) {\n  163      tprintf(\"Tesseract Open Source OCR Engine v%s with Leptonica\\n\",\n  164:            tesseract::TessBaseAPI::Version());\n  165    }\n  166    PERF_COUNT_START(\"Tesseract:main\")\n  167:   tesseract::TessBaseAPI api;\n  168  \n  169    api.SetOutputName(output);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.cpp:\n  152  // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  153  // the iterator itself, ie rendered invalid by various members of\n  154: // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  155  // Pointsize is returned in printers points (1/72 inch.)\n  156  const char* LTRResultIterator::WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.h:\n   36  // of the page hierarchy, without including any tesseract headers or having\n   37  // to handle any tesseract structures.\n   38: // WARNING! This class points to data held within the TessBaseAPI class, and\n   39: // therefore can only be used while the TessBaseAPI class still exists and\n   40  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   41  // DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   52    // original image (in top-left-origin coordinates) and therefore the top-left\n   53    // needs to be added to any output boxes in order to specify coordinates\n   54:   // in the original image. See TessBaseAPI::SetRectangle.\n   55    // The scale and scaled_yres are in case the Thresholder scaled the image\n   56    // rectangle prior to thresholding. Any coordinates in tesseract's image\n   ..\n  100    // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  101    // the iterator itself, ie rendered invalid by various members of\n  102:   // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  103    // Pointsize is returned in printers points (1/72 inch.)\n  104    const char* WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\mutableiterator.h:\n   33  // of the page hierarchy, without including any tesseract headers or having\n   34  // to handle any tesseract structures.\n   35: // WARNING! This class points to data held within the TessBaseAPI class, and\n   36: // therefore can only be used while the TessBaseAPI class still exists and\n   37  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   38  // DetectOS, or anything else that changes the internal PAGE_RES.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\pageiterator.h:\n   41   * levels of the page hierarchy, without including any tesseract headers or\n   42   * having to handle any tesseract structures.\n   43:  * WARNING! This class points to data held within the TessBaseAPI class, and\n   44:  * therefore can only be used while the TessBaseAPI class still exists and\n   45   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   46   * DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   58     * original image (in top-left-origin coordinates) and therefore the top-left\n   59     * needs to be added to any output boxes in order to specify coordinates\n   60:    * in the original image. See TessBaseAPI::SetRectangle.\n   61     * The scale and scaled_yres are in case the Thresholder scaled the image\n   62     * rectangle prior to thresholding. Any coordinates in tesseract's image\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\tesseractclass.h:\n   78  // Other important classes:\n   79  //\n   80: //  TessBaseAPI (api/baseapi.h)\n   81  //                                 Members include: BLOCK_LIST*, PAGE_RES*,\n   82  //                                 Tesseract*, ImageThresholder*\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ChangeLog:\n   56    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   57    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   58:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   59    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   60    * Auto orientation and script detection added to page layout analysis.\n   ..\n   77  2010-09-21 - V3.00\n   78    * Preparations for thread safety:\n   79:      * Changed TessBaseAPI methods to be non-static\n   80       * Created a class hierarchy for the directories to hold instance data,\n   81         and began moving code into the classes.\n   ..\n  160            Improved Init/End to make them safe.\n  161            Reduced memory use of dictionaries.\n  162:           Added some new APIs to TessBaseAPI.\n  163  April 21 2008 - V2.02 (again)\n  164            Fixed namespace collisions with jpeg library (INT32).\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\contrib\\tesseract-c_api-demo.py:\n   63  	exit(2)\n   64  \n   65: api = tesseract.TessBaseAPICreate()\n   66: rc = tesseract.TessBaseAPIInit3(api, TESSDATA_PREFIX, lang);\n   67  if (rc):\n   68: 	tesseract.TessBaseAPIDelete(api)\n   69  	print(\"Could not initialize tesseract.\\n\")\n   70  	exit(3)\n   71  \n   72: text_out = tesseract.TessBaseAPIProcessPages(api, filename, None , 0);\n   73  result_text = ctypes.string_at(text_out)\n   74  print result_text\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ReleaseNotes:\n   18    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   19    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   20:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   21    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   22    * Auto orientation and script detection added to page layout analysis.\n   ..\n   39  Tesseract release notes Sep 30 2010 - V3.00\n   40    * Preparations for thread safety:\n   41:      * Changed TessBaseAPI methods to be non-static\n   42       * Created a class hierarchy for the directories to hold instance data,\n   43         and began moving code into the classes.\n   ..\n   84  Improved Init/End to make them safe.\n   85  Reduced memory use of dictionaries.\n   86: Added some new APIs to TessBaseAPI.\n   87  Fixed namespace collisions with jpeg library (INT32).\n   88  Portability fixes for Windows for new code.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ambiguous_words.cpp:\n   51  \n   52    // Initialize Tesseract.\n   53:   tesseract::TessBaseAPI api;\n   54    GenericVector<STRING> vars_vec;\n   55    GenericVector<STRING> vars_values;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\classifier_tester.cpp:\n   48      const char* classifer_name, const UNICHARSET& unicharset,\n   49      int argc, char **argv,\n   50:     tesseract::TessBaseAPI** api) {\n   51    // Decode the classifier string.\n   52    ClassifierName classifier = CN_COUNT;\n   ..\n   63  \n   64    // We need to initialize tesseract to test.\n   65:   *api = new tesseract::TessBaseAPI;\n   66    tesseract::OcrEngineMode engine_mode = tesseract::OEM_TESSERACT_ONLY;\n   67    if (classifier == CN_CUBE || classifier == CN_CUBETESS)\n   ..\n  135    tesseract::MasterTrainer* trainer = tesseract::LoadTrainingData(\n  136        argc, argv, false, NULL, &file_prefix);\n  137:   tesseract::TessBaseAPI* api;\n  138    // Decode the classifier string.\n  139    tesseract::ShapeClassifier* shape_classifier = InitializeClassifier(\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\tessbaseapi.cpp:\n   26  \n   27  struct native_data_t {\n   28:   tesseract::TessBaseAPI api;\n   29    PIX *pix;\n   30    void *data;\n   ..\n   57  }\n   58  \n   59: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClassInit(JNIEnv* env, \n   60                                                                         jclass clazz) {\n   61  \n   ..\n   63  }\n   64  \n   65: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeConstruct(JNIEnv* env,\n   66                                                                         jobject object) {\n   67  \n   ..\n   76  }\n   77  \n   78: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeFinalize(JNIEnv* env,\n   79                                                                        jobject object) {\n   80  \n   ..\n   95  }\n   96  \n   97: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInit(JNIEnv *env,\n   98                                                                        jobject thiz,\n   99                                                                        jstring dir,\n  ...\n  120  }\n  121  \n  122: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInitOem(JNIEnv *env, \n  123                                                                           jobject thiz,\n  124                                                                           jstring dir, \n  ...\n  146  }\n  147  \n  148: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetInitLanguagesAsString(JNIEnv *env,\n  149                                                                                           jobject thiz) {\n  150  \n  ...\n  159  \n  160  \n  161: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImageBytes(JNIEnv *env,\n  162                                                                             jobject thiz,\n  163                                                                             jbyteArray data,\n  ...\n  193  }\n  194  \n  195: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImagePix(JNIEnv *env,\n  196                                                                           jobject thiz,\n  197                                                                           jint nativePix) {\n  ...\n  214  }\n  215  \n  216: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetRectangle(JNIEnv *env,\n  217                                                                            jobject thiz,\n  218                                                                            jint left,\n  ...\n  226  }\n  227  \n  228: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetUTF8Text(JNIEnv *env,\n  229                                                                              jobject thiz) {\n  230  \n  ...\n  240  }\n  241  \n  242: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeStop(JNIEnv *env, \n  243                                                                    jobject thiz) {\n  244  \n  ...\n  248  }\n  249  \n  250: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeMeanConfidence(JNIEnv *env,\n  251                                                                              jobject thiz) {\n  252  \n  ...\n  256  }\n  257  \n  258: jintArray Java_com_googlecode_tesseract_android_TessBaseAPI_nativeWordConfidences(JNIEnv *env,\n  259                                                                                    jobject thiz) {\n  260  \n  ...\n  285  }\n  286  \n  287: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetVariable(JNIEnv *env,\n  288                                                                               jobject thiz,\n  289                                                                               jstring var,\n  ...\n  303  }\n  304  \n  305: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClear(JNIEnv *env,\n  306                                                                     jobject thiz) {\n  307  \n  ...\n  324  }\n  325  \n  326: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeEnd(JNIEnv *env,\n  327                                                                   jobject thiz) {\n  328  \n  ...\n  342  }\n  343  \n  344: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetDebug(JNIEnv *env,\n  345                                                                        jobject thiz,\n  346                                                                        jboolean debug) {\n  ...\n  351  }\n  352  \n  353: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetPageSegMode(JNIEnv *env,\n  354                                                                              jobject thiz,\n  355                                                                              jint mode) {\n  ...\n  360  }\n  361  \n  362: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetRegions(JNIEnv *env,\n  363                                                                          jobject thiz) {\n  364  \n  ...\n  374  }\n  375  \n  376: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetTextlines(JNIEnv *env,\n  377                                                                            jobject thiz) {\n  378  \n  ...\n  388  }\n  389  \n  390: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetStrips(JNIEnv *env,\n  391                                                                         jobject thiz) {\n  392  \n  ...\n  402  }\n  403  \n  404: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetWords(JNIEnv *env,\n  405                                                                        jobject thiz) {\n  406  \n  ...\n  416  }\n  417  \n  418: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetResultIterator(JNIEnv *env,\n  419      jobject thiz) {\n  420    native_data_t *nat = get_native_data(env, thiz);\n  ...\n  423  }\n  424  \n  425: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetHOCRText(JNIEnv *env,\n  426                                                                              jobject thiz, jint page) {\n  427  \n  ...\n  437  }\n  438  \n  439: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetBoxText(JNIEnv *env,\n  440                                                                             jobject thiz, jint page) {\n  441  \n  ...\n  451  }\n  452  \n  453: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetInputName(JNIEnv *env,\n  454                                                                            jobject thiz,\n  455                                                                            jstring name) {\n  ...\n  460  }\n  461  \n  462: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetOutputName(JNIEnv *env,\n  463                                                                             jobject thiz,\n  464                                                                             jstring name) {\n  ...\n  469  }\n  470  \n  471: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeReadConfigFile(JNIEnv *env,\n  472                                                                              jobject thiz,\n  473                                                                              jstring fileName) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\PageIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  public class PageIterator {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\ResultIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  /**\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\TessBaseAPI.java:\n   35   * @author alanv@google.com (Alan Viverette)\n   36   */\n   37: public class TessBaseAPI {\n   38      /**\n   39       * Used by the native implementation of the class.\n   ..\n  137      \n  138      /**\n  139:      * Constructs an instance of TessBaseAPI.\n  140       */\n  141:     public TessBaseAPI() {\n  142          nativeConstruct();\n  143      }\n  ...\n  156  \n  157        try {\n  158:         Log.d(\"TessBaseAPI.java\", \"finalize(): NOT calling nativeFinalize() due to premature garbage collection\");\n  159          //nativeFinalize();\n  160        } finally {\n  161:         Log.d(\"TessBaseAPI.java\", \"finalize(): calling super.finalize()\");\n  162          super.finalize();\n  163        }\n  ...\n  170       * Instances are now mostly thread-safe and totally independent, but some\n  171       * global parameters remain. Basically it is safe to use multiple\n  172:      * TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable\n  173       * on some of the Params in classify and textord. If you do, then the effect\n  174       * will be to change it for all your instances.\n  ...\n  266      /**\n  267       * Closes down tesseract and free up all memory. End() is equivalent to\n  268:      * destructing and reconstructing your TessBaseAPI.\n  269       * <p>\n  270       * Once End() has been used, none of the other API functions may be used\n\n601 matches across 26 files\n\n\nSearching 1857 files for \"Init\" (case sensitive, whole word)\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\affine.c:\n  344          return (PIX *)ERROR_PTR(\"depth not 1, 2, 4, 8 or 16\", procName, NULL);\n  345  \n  346:         /* Init all dest pixels to color to be brought in from outside */\n  347      pixd = pixCreateTemplate(pixs);\n  348      if ((cmap = pixGetColormap(pixs)) != NULL) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\bilinear.c:\n  206          return (PIX *)ERROR_PTR(\"depth not 1, 2, 4, 8 or 16\", procName, NULL);\n  207  \n  208:         /* Init all dest pixels to color to be brought in from outside */\n  209      pixd = pixCreateTemplate(pixs);\n  210      if ((cmap = pixGetColormap(pixs)) != NULL) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\colorquant1.c:\n 3566          return (PIX *)ERROR_PTR(\"tables not all defined\", procName, NULL);\n 3567  \n 3568:         /* Init dest pix (with minimum bpp depending on cmap) */\n 3569      pixcmapGetMinDepth(cmap, &depth);\n 3570      depth = L_MAX(depth, mindepth);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\conncomp.c:\n  613          return NULL;\n  614  \n  615:         /* Init stack to seed:\n  616           * Must first init b.b. values to prevent valgrind from complaining;\n  617           * then init b.b. boundaries correctly to seed.  */\n  ...\n  727          return NULL;\n  728  \n  729:         /* Init stack to seed:\n  730           * Must first init b.b. values to prevent valgrind from complaining;\n  731           * then init b.b. boundaries correctly to seed.  */\n  ...\n  872          return 0;\n  873  \n  874:         /* Init stack to seed */\n  875      pushFillseg(stack, x, x, y, 1, ymax);\n  876      pushFillseg(stack, x, x, y + 1, -1, ymax);\n  ...\n  965          return 0;\n  966  \n  967:         /* Init stack to seed */\n  968      pushFillseg(stack, x, x, y, 1, ymax);\n  969      pushFillseg(stack, x, x, y + 1, -1, ymax);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\parseprotos.c:\n  237          return ERROR_INT(\"&pnext not defined\", procName, 1);\n  238  \n  239:         /* Init for situation where this line and all following are comments */\n  240      *pnext = -1;\n  241  \n  ...\n  283          return ERROR_INT(\"&pnext not defined\", procName, 1);\n  284  \n  285:         /* Init for situation where this line and all following are blank */\n  286      *pnext = -1;\n  287  \n  ...\n  332          return ERROR_INT(\"&pnext not defined\", procName, 1);\n  333  \n  334:         /* Init for situation where this line and all following\n  335           * start with '//' */\n  336      *pnext = -1;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_leptonica_android\\src\\src\\projective.c:\n  204          return (PIX *)ERROR_PTR(\"depth not 1, 2, 4, 8 or 16\", procName, NULL);\n  205  \n  206:         /* Init all dest pixels to color to be brought in from outside */\n  207      pixd = pixCreateTemplate(pixs);\n  208      if ((cmap = pixGetColormap(pixs)) != NULL) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.cpp:\n  263   * @return: 0 on success and -1 on initialization failure.\n  264   */\n  265: int TessBaseAPI::Init(const char* datapath, const char* language,\n  266                        OcrEngineMode oem, char **configs, int configs_size,\n  267                        const GenericVector<STRING> *vars_vec,\n  268                        const GenericVector<STRING> *vars_values,\n  269                        bool set_only_non_debug_params) {\n  270:   PERF_COUNT_START(\"TessBaseAPI::Init\")\n  271    // Default language is \"eng\".\n  272    if (language == NULL) language = \"eng\";\n  ...\n  340  /**\n  341   * Returns the loaded languages in the vector of STRINGs.\n  342:  * Includes all languages loaded by the last Init, including those loaded\n  343   * as dependencies of other loaded languages.\n  344   */\n  ...\n  404  \n  405  /**\n  406:  * Init only the lang model component of Tesseract. The only functions\n  407   * that work after this init are SetVariable and IsValidWord.\n  408   * WARNING: temporary! This function will be removed from here and placed\n  ...\n  418  \n  419  /**\n  420:  * Init only for page layout analysis. Use only for calls to SetImage and\n  421   * AnalysePage. Calls that attempt recognition will generate an error.\n  422   */\n  ...\n  463  /**\n  464   * Recognize a rectangle from an image and return the result as a string.\n  465:  * May be called many times for a single Init.\n  466   * Currently has no error checking.\n  467   * Greyscale of 8 and color of 24 or 32 bits per pixel may be given.\n  ...\n  788   * WARNING! This class points to data held within the TessBaseAPI class, and\n  789   * therefore can only be used while the TessBaseAPI class still exists and\n  790:  * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  791   * DetectOS, or anything else that changes the internal PAGE_RES.\n  792   */\n  ...\n 1204   * WARNING! This class points to data held within the TessBaseAPI class, and\n 1205   * therefore can only be used while the TessBaseAPI class still exists and\n 1206:  * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1207   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1208   */\n ....\n 1221   * WARNING! This class points to data held within the TessBaseAPI class, and\n 1222   * therefore can only be used while the TessBaseAPI class still exists and\n 1223:  * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1224   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1225   */\n ....\n 1792   * destructing and reconstructing your TessBaseAPI.\n 1793   * Once End() has been used, none of the other API functions may be used\n 1794:  * other than Init and anything declared above it in the class definition.\n 1795   */\n 1796  void TessBaseAPI::End() {\n ....\n 1846  // Clear any library-level memory caches.\n 1847  // There are a variety of expensive-to-load constant data structures (mostly\n 1848: // language dictionaries) that are cached globally -- surviving the Init()\n 1849  // and End() of individual TessBaseAPI's.  This function allows the clearing\n 1850  // of these caches.\n ....\n 1926  bool TessBaseAPI::InternalSetImage() {\n 1927    if (tesseract_ == NULL) {\n 1928:     tprintf(\"Please call Init before attempting to send an image.\");\n 1929      return false;\n 1930    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.h:\n  151     * Eg SetVariable(\"tessedit_char_blacklist\", \"xyz\"); to ignore x, y and z.\n  152     * Or SetVariable(\"classify_bln_numeric_mode\", \"1\"); to set numeric-only mode.\n  153:    * SetVariable may be used before Init, but settings will revert to\n  154     * defaults on End().\n  155     *\n  156:    * Note: Must be called after Init(). Only works for non-init variables\n  157:    * (init variables should be passed to Init()).\n  158     */\n  159    bool SetVariable(const char* name, const char* value);\n  ...\n  192     *\n  193     * Start tesseract. Returns zero on success and -1 on failure.\n  194:    * NOTE that the only members that may be called before Init are those\n  195     * listed above here in the class definition.\n  196     *\n  ...\n  199     * The language is (usually) an ISO 639-3 string or NULL will default to eng.\n  200     * It is entirely safe (and eventually will be efficient too) to call\n  201:    * Init multiple times on the same instance to change language, or just\n  202     * to reset the classifier.\n  203     * The language may be a string of the form [~]<lang>[+[~]<lang>]* indicating\n  ...\n  214     * back to their default values. (Which may vary between languages.)\n  215     * If you have a rare need to set a Variable that controls\n  216:    * initialization for a second call to Init you should explicitly\n  217:    * call End() and then use SetVariable before Init. This is only a very\n  218     * rare use case, since there are very few uses that require any parameters\n  219:    * to be set before Init.\n  220     *\n  221     * If set_only_non_debug_params is true, only params that do not contain\n  222     * \"debug\" in the name will be set.\n  223     */\n  224:   int Init(const char* datapath, const char* language, OcrEngineMode mode,\n  225             char **configs, int configs_size,\n  226             const GenericVector<STRING> *vars_vec,\n  227             const GenericVector<STRING> *vars_values,\n  228             bool set_only_non_debug_params);\n  229:   int Init(const char* datapath, const char* language, OcrEngineMode oem) {\n  230:     return Init(datapath, language, oem, NULL, 0, NULL, NULL, false);\n  231    }\n  232:   int Init(const char* datapath, const char* language) {\n  233:     return Init(datapath, language, OEM_DEFAULT, NULL, 0, NULL, NULL, false);\n  234    }\n  235  \n  ...\n  246    /**\n  247     * Returns the loaded languages in the vector of STRINGs.\n  248:    * Includes all languages loaded by the last Init, including those loaded\n  249     * as dependencies of other loaded languages.\n  250     */\n  ...\n  257  \n  258    /**\n  259:    * Init only the lang model component of Tesseract. The only functions\n  260     * that work after this init are SetVariable and IsValidWord.\n  261     * WARNING: temporary! This function will be removed from here and placed\n  ...\n  265  \n  266    /**\n  267:    * Init only for page layout analysis. Use only for calls to SetImage and\n  268     * AnalysePage. Calls that attempt recognition will generate an error.\n  269     */\n  ...\n  274     * Searches the standard places: tessdata/configs, tessdata/tessconfigs\n  275     * and also accepts a relative or absolute path name.\n  276:    * Note: only non-init params will be set (init params are set by Init()).\n  277     */\n  278    void ReadConfigFile(const char* filename);\n  ...\n  292    /**\n  293     * Recognize a rectangle from an image and return the result as a string.\n  294:    * May be called many times for a single Init.\n  295     * Currently has no error checking.\n  296     * Greyscale of 8 and color of 24 or 32 bits per pixel may be given.\n  ...\n  484     * WARNING! This class points to data held within the TessBaseAPI class, and\n  485     * therefore can only be used while the TessBaseAPI class still exists and\n  486:    * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  487     * DetectOS, or anything else that changes the internal PAGE_RES.\n  488     */\n  ...\n  553     * WARNING! This class points to data held within the TessBaseAPI class, and\n  554     * therefore can only be used while the TessBaseAPI class still exists and\n  555:    * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  556     * DetectOS, or anything else that changes the internal PAGE_RES.\n  557     */\n  ...\n  563     * WARNING! This class points to data held within the TessBaseAPI class, and\n  564     * therefore can only be used while the TessBaseAPI class still exists and\n  565:    * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  566     * DetectOS, or anything else that changes the internal PAGE_RES.\n  567     */\n  ...\n  629     * destructing and reconstructing your TessBaseAPI.\n  630     * Once End() has been used, none of the other API functions may be used\n  631:    * other than Init and anything declared above it in the class definition.\n  632     */\n  633    void End();\n  ...\n  636     * Clear any library-level memory caches.\n  637     * There are a variety of expensive-to-load constant data structures (mostly\n  638:    * language dictionaries) that are cached globally -- surviving the Init()\n  639     * and End() of individual TessBaseAPI's.  This function allows the clearing\n  640     * of these caches.\n  ...\n  748   protected:\n  749  \n  750:   /** Common code for setting the image. Returns true if Init has been called. */\n  751    TESS_LOCAL bool InternalSetImage();\n  752  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n  248      }\n  249  \n  250:     return handle->Init(datapath, language, mode, configs, configs_size, &varNames, &varValues, set_only_non_debug_params);\n  251  }\n  252  \n  ...\n  255                                          char** configs, int configs_size)\n  256  {\n  257:     return handle->Init(datapath, language, oem, configs, configs_size, NULL, NULL, false);\n  258  }\n  259  \n  260  TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262:     return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265  TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267:     return handle->Init(datapath, language);\n  268  }\n  269  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\tesseractmain.cpp:\n  168  \n  169    api.SetOutputName(output);\n  170:   int rc = api.Init(datapath, lang, tesseract::OEM_DEFAULT,\n  171                  &(argv[arg]), argc - arg, NULL, NULL, false);\n  172  \n  ...\n  222    // in any config file. Therefore the only way to force\n  223    // tesseract::PSM_SINGLE_BLOCK is from the command line.\n  224:   // It would be simpler if we could set the value before Init,\n  225    // but that doesn't work.\n  226    if (api.GetPageSegMode() == tesseract::PSM_SINGLE_BLOCK)\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.cpp:\n  152  // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  153  // the iterator itself, ie rendered invalid by various members of\n  154: // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  155  // Pointsize is returned in printers points (1/72 inch.)\n  156  const char* LTRResultIterator::WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.h:\n   38  // WARNING! This class points to data held within the TessBaseAPI class, and\n   39  // therefore can only be used while the TessBaseAPI class still exists and\n   40: // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   41  // DetectOS, or anything else that changes the internal PAGE_RES.\n   42  // See apitypes.h for the definition of PageIteratorLevel.\n   ..\n  100    // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  101    // the iterator itself, ie rendered invalid by various members of\n  102:   // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  103    // Pointsize is returned in printers points (1/72 inch.)\n  104    const char* WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\mutableiterator.h:\n   35  // WARNING! This class points to data held within the TessBaseAPI class, and\n   36  // therefore can only be used while the TessBaseAPI class still exists and\n   37: // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   38  // DetectOS, or anything else that changes the internal PAGE_RES.\n   39  // See apitypes.h for the definition of PageIteratorLevel.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\pageiterator.h:\n   43   * WARNING! This class points to data held within the TessBaseAPI class, and\n   44   * therefore can only be used while the TessBaseAPI class still exists and\n   45:  * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   46   * DetectOS, or anything else that changes the internal PAGE_RES.\n   47   * See apitypes.h for the definition of PageIteratorLevel.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\paragraphs.cpp:\n  510  }\n  511  \n  512: void RowScratchRegisters::Init(const RowInfo &row) {\n  513    ri_ = &row;\n  514    lmargin_ = 0;\n  ...\n 2276    rows.init_to_size(row_infos->size(), RowScratchRegisters());\n 2277    for (int i = 0; i < row_infos->size(); i++) {\n 2278:     rows[i].Init((*row_infos)[i]);\n 2279    }\n 2280  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\paragraphs_internal.h:\n  101   public:\n  102    // We presume row will outlive us.\n  103:   void Init(const RowInfo &row);\n  104  \n  105    LineType GetLineType() const;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\tessedit.cpp:\n   96    // Initialize TessdataManager.\n   97    STRING tessdata_path = language_data_path_prefix + kTrainedDataSuffix;\n   98:   if (!tessdata_manager.Init(tessdata_path.string(),\n   99                               tessdata_manager_debug_level)) {\n  100      return false;\n  ...\n  206    }\n  207  \n  208:   // Init ParamsModel.\n  209    // Load pass1 and pass2 weights (for now these two sets are the same, but in\n  210    // the future separate sets of weights can be generated).\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\thresholder.cpp:\n  166    scale_ = 1;\n  167    estimated_res_ = yres_ = pixGetYRes(src);\n  168:   Init();\n  169  }\n  170  \n  ...\n  206  \n  207  // Common initialization shared between SetImage methods.\n  208: void ImageThresholder::Init() {\n  209    SetRectangle(0, 0, image_width_, image_height_);\n  210  }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\thresholder.h:\n  146  \n  147    /// Common initialization shared between SetImage methods.\n  148:   virtual void Init();\n  149  \n  150    /// Return true if we are processing the full image.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccstruct\\blobbox.cpp:\n  970  // go in the noise list. Dash (-) candidates go in the small list, and\n  971  // medium and large are by height.\n  972: // SIDE-EFFECT: reset all blobs to initial state by calling Init().\n  973  static void SizeFilterBlobs(int min_height, int max_height,\n  974                              BLOBNBOX_LIST* src_list,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccstruct\\normalis.cpp:\n   36  \n   37  DENORM::DENORM() {\n   38:   Init();\n   39  }\n   40  \n   ..\n  557  \n  558  // Setup default values.\n  559: void DENORM::Init() {\n  560    inverse_ = false;\n  561    pix_ = NULL;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccstruct\\normalis.h:\n  284    void Clear();\n  285    // Setup default values.\n  286:   void Init();\n  287  \n  288    // Best available image.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccstruct\\pageres.cpp:\n   52      BLOCK_LIST *the_block_list,\n   53      WERD_CHOICE **prev_word_best_choice_ptr) {\n   54:   Init();\n   55    BLOCK_IT block_it(the_block_list);\n   56    BLOCK_RES_IT block_res_it(&block_res_list);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccstruct\\pageres.h:\n   73    GenericVector<STRING> misadaption_log;\n   74  \n   75:   inline void Init() {\n   76      char_count = 0;\n   77      rej_count = 0;\n   ..\n   81    }\n   82  \n   83:   PAGE_RES() { Init(); }  // empty constructor\n   84  \n   85    PAGE_RES(BLOCK_LIST *block_list,   // real blocks\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\bitvector.cpp:\n  130  \n  131  // Initializes the array to length * false.\n  132: void BitVector::Init(int length) {\n  133    Alloc(length);\n  134    SetAllFalse();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\bitvector.h:\n   52  \n   53    // Initializes the array to length * false.\n   54:   void Init(int length);\n   55  \n   56    // Returns the number of bits that are accessible in the vector.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\genericvector.h:\n  302    int choose_nth_item(int target_index, int start, int end, unsigned int* seed);\n  303  \n  304:   // Init the object, allocating size memory.\n  305    void init(int size);\n  306  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\indexmapbidi.cpp:\n   67  // No need to call Setup after this.\n   68  void IndexMapBiDi::InitAndSetupRange(int sparse_size, int start, int end) {\n   69:   Init(sparse_size, false);\n   70    for (int i = start; i < end; ++i)\n   71      SetMap(i, true);\n   ..\n   77  // Call Setup immediately after, or make calls to SetMap first to adjust the\n   78  // mapping and then call Setup before using the map.\n   79: void IndexMapBiDi::Init(int size, bool all_mapped) {\n   80    sparse_map_.init_to_size(size, -1);\n   81    if (all_mapped) {\n   ..\n   90  }\n   91  \n   92: // Sets up the sparse_map_ and compact_map_ properly after Init and\n   93  // some calls to SetMap. Assumes an ordered 1-1 map from set indices\n   94  // in the forward map to the compact space.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\indexmapbidi.h:\n   89  // space.\n   90  // IndexMapBiDi may be initialized in one of 3 ways:\n   91: // 1. Init(size, true);\n   92  //    Setup();\n   93  //    Sets a complete 1:1 mapping with no unmapped elements.\n   94: // 2. Init(size, false);\n   95  //    for ... SetMap(index, true);\n   96  //    Setup();\n   ..\n  115    // Call Setup immediately after, or make calls to SetMap first to adjust the\n  116    // mapping and then call Setup before using the map.\n  117:   void Init(int size, bool all_mapped);\n  118    // Sets a given index in the sparse_map_ to be mapped or not.\n  119    void SetMap(int sparse_index, bool mapped);\n  120:   // Sets up the sparse_map_ and compact_map_ properly after Init and\n  121    // some calls to SetMap. Assumes an ordered 1-1 map from set indices\n  122    // in the sparse space to the compact space.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\tessdatamanager.cpp:\n   34  namespace tesseract {\n   35  \n   36: bool TessdataManager::Init(const char *data_file_name, int debug_level) {\n   37    int i;\n   38    debug_level_ = debug_level;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\tessdatamanager.h:\n  147     * Returns true on success.\n  148     */\n  149:   bool Init(const char *data_file_name, int debug_level);\n  150  \n  151    // Return the name of the underlying data file.\n  ...\n  189      return (index == actual_tessdata_num_entries_) ? -1 : offset_table_[index] - 1;\n  190    }\n  191:   /** Closes data_file_ (if it was opened by Init()). */\n  192    inline void End() {\n  193      if (data_file_ != NULL) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\unicharset.cpp:\n   70  \n   71  UNICHARSET::UNICHAR_PROPERTIES::UNICHAR_PROPERTIES() {\n   72:   Init();\n   73  }\n   74  \n   75  // Initialize all properties to sensible default values.\n   76: void UNICHARSET::UNICHAR_PROPERTIES::Init() {\n   77    isalpha = false;\n   78    islower = false;\n   ..\n  553  bool UNICHARSET::GetStrProperties(const char* utf8_str,\n  554                                    UNICHAR_PROPERTIES* props) const {\n  555:   props->Init();\n  556    props->SetRangesEmpty();\n  557    props->min_advance = 0;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\unicharset.h:\n  843      UNICHAR_PROPERTIES();\n  844      // Initializes all properties to sensible default values.\n  845:     void Init();\n  846      // Sets all ranges wide open. Initialization default in case there are\n  847      // no useful values available.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ChangeLog:\n   54    * Thread-safety! Moved all critical globals and statics to members of the appropriate class. Tesseract is now thread-safe (multiple instances can be used in parallel in multiple threads.) with the minor exception that some control parameters are still global and affect all threads.\n   55    * Added Cube, a new recognizer for Arabic. Cube can also be used in combination with normal Tesseract for other languages with an improvement in accuracy at the cost of (much) lower speed. *There is no training module for Cube yet.*\n   56:   * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   57    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   58    * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   ..\n  158            Added ability to save n-best lists.\n  159            Added leptonica support for more file types.\n  160:           Improved Init/End to make them safe.\n  161            Reduced memory use of dictionaries.\n  162            Added some new APIs to TessBaseAPI.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\adaptmatch.cpp:\n  541    }\n  542  \n  543:   im_.Init(&classify_debug_level);\n  544    InitIntegerFX();\n  545  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturedist.cpp:\n   34  \n   35  // Initialize the table to the given size of feature space.\n   36: void IntFeatureDist::Init(const IntFeatureMap* feature_map) {\n   37    size_ = feature_map->sparse_size();\n   38    Clear();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturedist.h:\n   33  // true, and companion arrays that allow fast feature set distance\n   34  // calculations with allowance of offsets in position.\n   35: // Init is expensive, so for greatest efficiency, to re-initialize for a new\n   36  // feature set, use Set(..., false) on the SAME feature set as was used to\n   37  // setup with Set(..., true), to return to its initialized state before\n   ..\n   45    // The feature_map is just borrowed, and must exist for the entire\n   46    // lifetime of the IntFeatureDist.\n   47:   void Init(const IntFeatureMap* feature_map);\n   48  \n   49    // Setup the map for the given indexed_features that have been indexed by\n   50    // feature_map. After use, use Set(..., false) to reset to the initial state\n   51:   // as this is faster than calling Init for sparse spaces.\n   52    void Set(const GenericVector<int>& indexed_features,\n   53             int canonical_count, bool value);\n   ..\n   66    // Total weight of features currently stored in the maps.\n   67    double total_feature_weight_;\n   68:   // Pointer to IntFeatureMap given at Init to find offset features.\n   69    const IntFeatureMap* feature_map_;\n   70    // Array of bools indicating presence of a feature.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturemap.cpp:\n   72  // Copies the given feature_space and uses it as the index feature map\n   73  // from INT_FEATURE_STRUCT.\n   74: void IntFeatureMap::Init(const IntFeatureSpace& feature_space) {\n   75    feature_space_ = feature_space;\n   76    mapping_changed_ = false;\n   77    int sparse_size = feature_space_.Size();\n   78:   feature_map_.Init(sparse_size, true);\n   79    feature_map_.Setup();\n   80    compact_size_ = feature_map_.CompactSize();\n   ..\n  133  // Returns the size of the compacted feature space.\n  134  int IntFeatureMap::FindNZFeatureMapping(SampleIterator* it) {\n  135:   feature_map_.Init(feature_space_.Size(), false);\n  136    int total_samples = 0;\n  137    for (it->Begin(); !it->AtEnd(); it->Next()) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturemap.h:\n   76    // Copies the given feature_space and uses it as the index feature map\n   77    // from INT_FEATURE_STRUCT.\n   78:   void Init(const IntFeatureSpace& feature_space);\n   79  \n   80    // Helper to return an offset index feature. In this context an offset\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturespace.cpp:\n   27  }\n   28  \n   29: void IntFeatureSpace::Init(uinT8 xbuckets, uinT8 ybuckets, uinT8 thetabuckets) {\n   30    x_buckets_ = xbuckets;\n   31    y_buckets_ = ybuckets;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturespace.h:\n   42  \n   43    // Setup the feature space with the given dimensions.\n   44:   void Init(uinT8 xbuckets, uinT8 ybuckets, uinT8 thetabuckets);\n   45  \n   46    // Serializes the feature space definition to the given file.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intmatcher.cpp:\n   42  // Parameters of the sigmoid used to convert similarity to evidence in the\n   43  // similarity_evidence_table_ that is used to convert distance metric to an\n   44: // 8 bit evidence value in the secondary matcher. (See IntMatcher::Init).\n   45  const float IntegerMatcher::kSEExponentialMultiplier = 0.0;\n   46  const float IntegerMatcher::kSimilarityCenter = 0.0075;\n   ..\n  696  \n  697  /*---------------------------------------------------------------------------*/\n  698: void IntegerMatcher::Init(tesseract::IntParam *classify_debug_level) {\n  699    classify_debug_level_ = classify_debug_level;\n  700  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intmatcher.h:\n  107    IntegerMatcher() : classify_debug_level_(0) {}\n  108  \n  109:   void Init(tesseract::IntParam *classify_debug_level);\n  110  \n  111    void Match(INT_CLASS ClassTemplate,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\mastertrainer.cpp:\n   95    charsetsize_ = unicharset_.size();\n   96    if (!feature_space_.DeSerialize(swap, fp)) return false;\n   97:   feature_map_.Init(feature_space_);\n   98    if (!samples_.DeSerialize(swap, fp)) return false;\n   99    if (!junk_samples_.DeSerialize(swap, fp)) return false;\n  ...\n  232      ReplaceFragmentedSamples();\n  233    SampleIterator sample_it;\n  234:   sample_it.Init(NULL, NULL, true, &verify_samples_);\n  235    sample_it.NormalizeSamples();\n  236    verify_samples_.OrganizeByFontAndClass();\n  ...\n  552    // We want to iterate over the samples of just the one shape.\n  553    IndexMapBiDi shape_map;\n  554:   shape_map.Init(shape_table.NumShapes(), false);\n  555    shape_map.SetMap(shape_id, true);\n  556    shape_map.Setup();\n  ...\n  558    GenericVector<const TrainingSample*> sample_ptrs;\n  559    SampleIterator it;\n  560:   it.Init(&shape_map, &shape_table, false, &samples_);\n  561    for (it.Begin(); !it.AtEnd(); it.Next()) {\n  562      sample_ptrs.push_back(&it.GetSample());\n  ...\n  755                                         ShapeClassifier* old_classifier) {\n  756    SampleIterator sample_it;\n  757:   sample_it.Init(NULL, NULL, replicate_samples, &samples_);\n  758    ErrorCounter::DebugNewErrors(test_classifier, old_classifier,\n  759                                 CT_UNICHAR_TOPN_ERR, fontinfo_table_,\n  ...\n  792                                       STRING* report_string) {\n  793    SampleIterator sample_it;\n  794:   sample_it.Init(NULL, NULL, replicate_samples, samples);\n  795    if (report_level > 0) {\n  796      int num_samples = 0;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\mastertrainer.h:\n   85    void SetFeatureSpace(const IntFeatureSpace& fs) {\n   86      feature_space_ = fs;\n   87:     feature_map_.Init(fs);\n   88    }\n   89  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\sampleiterator.cpp:\n   45  \n   46  // See class comment for arguments.\n   47: void SampleIterator::Init(const IndexMapBiDi* charset_map,\n   48                            const ShapeTable* shape_table,\n   49                            bool randomize,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\sampleiterator.h:\n   30  // all samples of all shapes needed for a classification problem.\n   31  //\n   32: // =====INPUTS TO Init FUNCTION=====\n   33  // The charset_map defines a subset of the sample_set classes (with a NULL\n   34  // shape_table, or the shape_table classes if not NULL.)\n   ..\n   98  \n   99    // See class comment for arguments.\n  100:   void Init(const IndexMapBiDi* charset_map,\n  101              const ShapeTable* shape_table,\n  102              bool randomize,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\trainingsampleset.cpp:\n  649      ++font_counts[font_id];\n  650    }\n  651:   font_id_map_.Init(font_counts.size(), false);\n  652    for (int f = 0; f < font_counts.size(); ++f) {\n  653      font_id_map_.SetMap(f, font_counts[f] > 0);\n  ...\n  665    IntFeatureDist f_table;\n  666    if (debug) tprintf(\"feature table size %d\\n\", map.sparse_size());\n  667:   f_table.Init(&map);\n  668    int worst_s1 = 0;\n  669    int worst_s2 = 0;\n  ...\n  819          continue;\n  820        FontClassInfo& fcinfo = (*font_class_array_)(font_index, c);\n  821:       fcinfo.cloud_features.Init(feature_space_size);\n  822        for (int s = 0; s < num_samples; ++s) {\n  823          const TrainingSample* sample = GetSample(font_id, c, s);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\classifier_base.h:\n   72    virtual bool Train(CharSamp *char_samp, int ClassID) = 0;\n   73    virtual bool SetLearnParam(char *var_name, float val) = 0;\n   74:   virtual bool Init(const string &data_file_path, const string &lang,\n   75                      LangModel *lang_mod) = 0;\n   76  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\classifier_factory.cpp:\n   86    }\n   87  \n   88:   // Init the classifier\n   89:   if (!classifier_obj->Init(data_file_path, lang, lang_mod)) {\n   90      delete classifier_obj;\n   91      fprintf(stderr, \"Cube ERROR (CharClassifierFactory::Create): unable \"\n   92:             \"to Init() character classifier object.\\n\");\n   93      return NULL;\n   94    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\conv_net_classifier.cpp:\n  285  }\n  286  \n  287: // Init the classifier provided a data-path and a language string\n  288: bool ConvNetCharClassifier::Init(const string &data_file_path,\n  289                                   const string &lang,\n  290                                   LangModel *lang_mod) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\conv_net_classifier.h:\n   77    float *net_output_;\n   78  \n   79:   // Init the classifier provided a data-path and a language string\n   80:   virtual bool Init(const string &data_file_path, const string &lang,\n   81                      LangModel *lang_mod);\n   82    // Loads the NeuralNets needed for the classifier\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_line_segmenter.cpp:\n  852  }\n  853  \n  854: // Init the page segmenter\n  855: bool CubeLineSegmenter::Init() {\n  856    if (init_ == true) {\n  857      return true;\n  ...\n  868  // return the pix mask and box of a specific line\n  869  Pix *CubeLineSegmenter::Line(int line, Box **line_box) {\n  870:   if (init_ == false && Init() == false) {\n  871      return NULL;\n  872    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_line_segmenter.h:\n   39    // Accessor functions\n   40    Pix *PostProcessedImage() {\n   41:     if (init_ == false && Init() == false) {\n   42        return NULL;\n   43      }\n   ..\n   45    }\n   46    int ColumnCnt() {\n   47:     if (init_ == false && Init() == false) {\n   48        return 0;\n   49      }\n   ..\n   51    }\n   52    Box *Column(int col) {\n   53:     if (init_ == false && Init() == false) {\n   54        return NULL;\n   55      }\n   ..\n   58    }\n   59    int LineCnt() {\n   60:     if (init_ == false && Init() == false) {\n   61        return 0;\n   62      }\n   ..\n   65    }\n   66    Pixa *ConComps() {\n   67:     if (init_ == false && Init() == false) {\n   68        return NULL;\n   69      }\n   ..\n   72    }\n   73    Pixaa *Columns() {\n   74:     if (init_ == false && Init() == false) {\n   75        return NULL;\n   76      }\n   ..\n  100    // Post processed image\n  101    Pix *img_;\n  102:   // Init flag\n  103    bool init_;\n  104    // Output Line and column info\n  ...\n  111    double est_dot_hgt_;\n  112  \n  113:   // Init the page analysis\n  114:   bool Init();\n  115    // Performs line segmentation\n  116    bool LineSegment();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_object.cpp:\n   25  namespace tesseract {\n   26  CubeObject::CubeObject(CubeRecoContext *cntxt, CharSamp *char_samp) {\n   27:   Init();\n   28    char_samp_ = char_samp;\n   29    cntxt_ = cntxt;\n   ..\n   32  CubeObject::CubeObject(CubeRecoContext *cntxt, Pix *pix,\n   33                         int left, int top, int wid, int hgt) {\n   34:   Init();\n   35    char_samp_ = CubeUtils::CharSampleFromPix(pix, left, top, wid, hgt);\n   36    own_char_samp_ = true;\n   ..\n   39  \n   40  // Data member initialization function\n   41: void CubeObject::Init() {\n   42    char_samp_ = NULL;\n   43    own_char_samp_ = false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_object.h:\n  146  \n  147    // Data member initialization function\n  148:   void Init();\n  149    // Free alternate lists.\n  150    void Cleanup();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_search_object.cpp:\n  113  // # of segmentation points. One less than the count of segments\n  114  int CubeSearchObject::SegPtCnt() {\n  115:   if (!init_ && !Init())\n  116      return -1;\n  117    return segment_cnt_ - 1;\n  ...\n  119  \n  120  // init and allocate variables, perform segmentation\n  121: bool CubeSearchObject::Init() {\n  122    if (init_)\n  123      return true;\n  ...\n  129    reco_cache_ = new CharAltList **[segment_cnt_];\n  130    if (reco_cache_ == NULL) {\n  131:     fprintf(stderr, \"Cube ERROR (CubeSearchObject::Init): could not \"\n  132              \"allocate CharAltList array\\n\");\n  133      return false;\n  ...\n  136    samp_cache_ = new CharSamp **[segment_cnt_];\n  137    if (samp_cache_ == NULL) {\n  138:     fprintf(stderr, \"Cube ERROR (CubeSearchObject::Init): could not \"\n  139              \"allocate CharSamp array\\n\");\n  140      return false;\n  ...\n  144      reco_cache_[seg] = new CharAltList *[segment_cnt_];\n  145      if (reco_cache_[seg] == NULL) {\n  146:       fprintf(stderr, \"Cube ERROR (CubeSearchObject::Init): could not \"\n  147                \"allocate a single segment's CharAltList array\\n\");\n  148        return false;\n  ...\n  153      samp_cache_[seg] = new CharSamp *[segment_cnt_];\n  154      if (samp_cache_[seg] == NULL) {\n  155:       fprintf(stderr, \"Cube ERROR (CubeSearchObject::Init): could not \"\n  156                \"allocate a single segment's CharSamp array\\n\");\n  157        return false;\n  ...\n  168  CharSamp *CubeSearchObject::CharSample(int start_pt, int end_pt) {\n  169    // init if necessary\n  170:   if (!init_ && !Init())\n  171      return NULL;\n  172    // validate segment range\n  ...\n  227  \n  228  Box *CubeSearchObject::CharBox(int start_pt, int end_pt) {\n  229:   if (!init_ && !Init())\n  230      return NULL;\n  231    if (!IsValidSegmentRange(start_pt, end_pt)) {\n  ...\n  262  CharAltList * CubeSearchObject::RecognizeSegment(int start_pt, int end_pt) {\n  263    // init if necessary\n  264:   if (!init_ && !Init()) {\n  265      fprintf(stderr, \"Cube ERROR (CubeSearchObject::RecognizeSegment): could \"\n  266              \"not initialize CubeSearchObject\\n\");\n  ...\n  339  bool CubeSearchObject::ComputeSpaceCosts() {\n  340    // init if necessary\n  341:   if (!init_ && !Init())\n  342      return false;\n  343  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\cube_search_object.h:\n  100  \n  101    // init and allocate variables, perform segmentation\n  102:   bool Init();\n  103    // Cleanup\n  104    void Cleanup();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\hybrid_neural_net_classifier.cpp:\n  280  }\n  281  \n  282: // Init the classifier provided a data-path and a language string\n  283: bool HybridNeuralNetCharClassifier::Init(const string &data_file_path,\n  284                                           const string &lang,\n  285                                           LangModel *lang_mod) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\hybrid_neural_net_classifier.h:\n   71    float *net_output_;\n   72  \n   73:   // Init the classifier provided a data-path and a language string\n   74:   virtual bool Init(const string &data_file_path, const string &lang,\n   75                      LangModel *lang_mod);\n   76    // Loads the NeuralNets needed for the classifier\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\search_column.cpp:\n   55  \n   56  // Initializations\n   57: bool SearchColumn::Init() {\n   58    if (init_ == true) {\n   59      return true;\n   ..\n  135                                    CubeRecoContext *cntxt) {\n  136    // init if necessary\n  137:   if (init_ == false && Init() == false) {\n  138      return NULL;\n  139    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\search_column.h:\n   78    void Cleanup();\n   79    // Create hash table\n   80:   bool Init();\n   81  };\n   82  }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\word_list_lang_model.cpp:\n   47  \n   48  // Initialize the language model\n   49: bool WordListLangModel::Init() {\n   50    if (init_ == true) {\n   51      return true;\n   ..\n   73    // initialize if necessary\n   74    if (init_ == false) {\n   75:     if (Init() == false) {\n   76        return NULL;\n   77      }\n   ..\n  165  // add a new UTF-8 string to the lang model\n  166  bool WordListLangModel::AddString(const char *char_ptr) {\n  167:   if (!init_ && !Init()) {  // initialize if necessary\n  168      return false;\n  169    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\word_list_lang_model.h:\n   75    bool init_;\n   76    // Initialize the language model\n   77:   bool Init();\n   78    // Cleanup\n   79    void Cleanup();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\word_size_model.cpp:\n   50    }\n   51  \n   52:   if (!obj->Init(data_file_path, lang)) {\n   53      delete obj;\n   54      return NULL;\n   ..\n   57  }\n   58  \n   59: bool WordSizeModel::Init(const string &data_file_path, const string &lang) {\n   60    string stats_file_name;\n   61    stats_file_name = data_file_path + lang;\n   ..\n   73    CubeUtils::SplitStringUsing(str_data, \"\\t\\r\\n\", &tokens);\n   74    if (tokens.size() < 1) {\n   75:     fprintf(stderr, \"Cube ERROR (WordSizeModel::Init): invalid \"\n   76              \"file contents: %s\\n\", stats_file_name.c_str());\n   77      return false;\n   ..\n   98        fnt_info.pair_size_info = new PairSizeInfo *[size_class_cnt];\n   99        if (!fnt_info.pair_size_info) {\n  100:         fprintf(stderr, \"Cube ERROR (WordSizeModel::Init): error allcoating \"\n  101                  \"memory for font pair size info\\n\");\n  102          return false;\n  ...\n  106            new PairSizeInfo[size_class_cnt * size_class_cnt];\n  107        if (!fnt_info.pair_size_info[0]) {\n  108:         fprintf(stderr, \"Cube ERROR (WordSizeModel::Init): error allocating \"\n  109                  \"memory for font pair size info\\n\");\n  110          return false;\n  ...\n  167            (start_0 != 0 && start_0 != 1) || (end_0 != 0 && end_0 != 1) ||\n  168            (start_1 != 0 && start_1 != 1) || (end_1 != 0 && end_1 != 1)) {\n  169:         fprintf(stderr, \"Cube ERROR (WordSizeModel::Init): bad format at \"\n  170                  \"line %d\\n\", 1 + (tok / token_cnt));\n  171          return false;\n  ...\n  181            sscanf(tokens[tok + 8].c_str(), \"%lf\", &wid_1) != 1 ||\n  182            sscanf(tokens[tok + 9].c_str(), \"%lf\", &hgt_1) != 1) {\n  183:         fprintf(stderr, \"Cube ERROR (WordSizeModel::Init): bad format at \"\n  184                  \"line %d\\n\", 1 + (tok / token_cnt));\n  185          return false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\word_size_model.h:\n   95  \n   96    // Initialize the word size model object\n   97:   bool Init(const string &data_file_path, const string &lang);\n   98  };\n   99  }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\dict\\dawg_cache.cpp:\n   58  Dawg *DawgLoader::Load() {\n   59    TessdataManager data_loader;\n   60:   if (!data_loader.Init(data_file_name_, dawg_debug_level_)) {\n   61      return NULL;\n   62    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\neural_networks\\runtime\\neural_net.cpp:\n   14  \n   15  NeuralNet::NeuralNet() {\n   16:   Init();\n   17  }\n   18  \n   ..\n   32  \n   33  // Initiaization function\n   34: void NeuralNet::Init() {\n   35    read_only_ = true;\n   36    auto_encoder_ = false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\neural_networks\\runtime\\neural_net.h:\n   96      vector<Node> fast_nodes_;\n   97      // Network Initialization function\n   98:     void Init();\n   99      // Clears all neurons\n  100      void Clear() {\n  ...\n  105      // Reads the net from an input buffer\n  106      template<class ReadBuffType> bool ReadBinary(ReadBuffType *input_buff) {\n  107:       // Init vars\n  108:       Init();\n  109        // is this an autoencoder\n  110        unsigned int read_val;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\neural_networks\\runtime\\neuron.cpp:\n   16  // default and only constructor\n   17  Neuron::Neuron() {\n   18:   Init();\n   19  }\n   20  \n   ..\n   24  \n   25  // Initializer\n   26: void Neuron::Init() {\n   27    id_ = -1;\n   28    frwd_dirty_ = false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\neural_networks\\runtime\\neuron.h:\n  141      bool frwd_dirty_;\n  142      // Initializer\n  143:     void Init();\n  144  };\n  145  }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ReleaseNotes:\n   16    * Thread-safety! Moved all critical globals and statics to members of the appropriate class. Tesseract is now thread-safe (multiple instances can be used in parallel in multiple threads.) with the minor exception that some control parameters are still global and affect all threads.\n   17    * Added Cube, a new recognizer for Arabic. Cube can also be used in combination with normal Tesseract for other languages with an improvement in accuracy at the cost of (much) lower speed. *There is no training module for Cube yet.*\n   18:   * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   19    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   20    * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   ..\n   82  Added ability to save n-best lists.\n   83  Added leptonica support for more file types.\n   84: Improved Init/End to make them safe.\n   85  Reduced memory use of dictionaries.\n   86  Added some new APIs to TessBaseAPI.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\bbgrid.cpp:\n   32  \n   33  GridBase::GridBase(int gridsize, const ICOORD& bleft, const ICOORD& tright) {\n   34:   Init(gridsize, bleft, tright);\n   35  }\n   36  \n   ..\n   40  // (Re)Initialize the grid. The gridsize is the size in pixels of each cell,\n   41  // and bleft, tright are the bounding box of everything to go in it.\n   42: void GridBase::Init(int gridsize, const ICOORD& bleft, const ICOORD& tright) {\n   43    gridsize_ = gridsize;\n   44    bleft_ = bleft;\n   ..\n   70  IntGrid::IntGrid(int gridsize, const ICOORD& bleft, const ICOORD& tright)\n   71    : grid_(NULL) {\n   72:   Init(gridsize, bleft, tright);\n   73  }\n   74  \n   ..\n   80  // (Re)Initialize the grid. The gridsize is the size in pixels of each cell,\n   81  // and bleft, tright are the bounding box of everything to go in it.\n   82: void IntGrid::Init(int gridsize, const ICOORD& bleft, const ICOORD& tright) {\n   83:   GridBase::Init(gridsize, bleft, tright);\n   84    if (grid_ != NULL)\n   85      delete [] grid_;\n   ..\n  111    int* old_grid = grid_;\n  112    grid_ = NULL;\n  113:   Init(gridsize(), box.botleft(), box.topright());\n  114    // Iterate over the old grid, copying data to the rotated position in the new.\n  115    int oldi = 0;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\bbgrid.h:\n   58    // (Re)Initialize the grid. The gridsize is the size in pixels of each cell,\n   59    // and bleft, tright are the bounding box of everything to go in it.\n   60:   void Init(int gridsize, const ICOORD& bleft, const ICOORD& tright);\n   61  \n   62    // Simple accessors.\n   ..\n  103    // (Re)Initialize the grid. The gridsize is the size in pixels of each cell,\n  104    // and bleft, tright are the bounding box of everything to go in it.\n  105:   void Init(int gridsize, const ICOORD& bleft, const ICOORD& tright);\n  106  \n  107    // Clear all the ints in the grid to zero.\n  ...\n  166    // (Re)Initialize the grid. The gridsize is the size in pixels of each cell,\n  167    // and bleft, tright are the bounding box of everything to go in it.\n  168:   void Init(int gridsize, const ICOORD& bleft, const ICOORD& tright);\n  169  \n  170    // Empty all the lists but leave the grid itself intact.\n  ...\n  433    int gridsize, const ICOORD& bleft, const ICOORD& tright)\n  434      : grid_(NULL) {\n  435:   Init(gridsize, bleft, tright);\n  436  }\n  437  \n  ...\n  445  // and bleft, tright are the bounding box of everything to go in it.\n  446  template<class BBC, class BBC_CLIST, class BBC_C_IT>\n  447: void BBGrid<BBC, BBC_CLIST, BBC_C_IT>::Init(int gridsize,\n  448                                              const ICOORD& bleft,\n  449                                              const ICOORD& tright) {\n  450:   GridBase::Init(gridsize, bleft, tright);\n  451    if (grid_ != NULL)\n  452      delete [] grid_;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\cjkpitch.cpp:\n  184  \n  185    // Initialize from blob.\n  186:   void Init(BLOBNBOX *blob) {\n  187      box_ = blob->bounding_box();\n  188      real_body_ = box_;\n  ...\n  277  \n  278    // Initialize from TD_ROW.\n  279:   void Init(TO_ROW *row);\n  280  \n  281    // Estimate character pitch of this row, based on current alignment\n  ...\n  479  };\n  480  \n  481: void FPRow::Init(TO_ROW *row) {\n  482    ASSERT_HOST(row != NULL);\n  483    ASSERT_HOST(row->xheight > 0);\n  ...\n  491      if (is_interesting_blob(blob_it.data())) {\n  492        FPChar fp_char;\n  493:       fp_char.Init(blob_it.data());\n  494        // Merge unconditionally if two blobs overlap.\n  495        if (!characters_.empty() &&\n  ...\n  916    ~FPAnalyzer() { }\n  917  \n  918:   void Init(ICOORD page_tr, TO_BLOCK_LIST *port_blocks);\n  919  \n  920    void Pass1Analyze() {\n  ...\n  981  };\n  982  \n  983: void FPAnalyzer::Init(ICOORD page_tr, TO_BLOCK_LIST *port_blocks) {\n  984    page_tr_ = page_tr;\n  985  \n  ...\n 1003      for (row_it.mark_cycle_pt(); !row_it.cycled_list(); row_it.forward()) {\n 1004        FPRow row;\n 1005:       row.Init(row_it.data());\n 1006        rows_.push_back(row);\n 1007        int num_chars = rows_.back().num_chars();\n ....\n 1058                               TO_BLOCK_LIST *port_blocks) {\n 1059    FPAnalyzer analyzer;\n 1060:   analyzer.Init(page_tr, port_blocks);\n 1061    if (analyzer.num_rows() == 0) return;\n 1062  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\colfind.cpp:\n  151  void ColumnFinder::SetupAndFilterNoise(Pix* photo_mask_pix,\n  152                                         TO_BLOCK* input_block) {\n  153:   part_grid_.Init(gridsize(), bleft(), tright());\n  154    if (stroke_width_ != NULL)\n  155      delete stroke_width_;\n  ...\n  245      TabFind::ResetForVerticalText(rotation_, rerotate_, &horizontal_lines_,\n  246                                    &min_gutter_width_);\n  247:     part_grid_.Init(gridsize(), bleft(), tright());\n  248      // Reset all blobs to initial state and filter by size.\n  249      // Since they have rotated, the list they belong on could have changed.\n  ...\n  412      if (textord_tabfind_find_tables) {\n  413        TableFinder table_finder;\n  414:       table_finder.Init(gridsize(), bleft(), tright());\n  415        table_finder.set_resolution(resolution_);\n  416        table_finder.set_left_to_right_language(\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\colpartitiongrid.cpp:\n  676    // Reinitializing the grid with reflected coords also clears all the\n  677    // pointers, so parts will now own the ColPartitions. (Briefly).\n  678:   Init(gridsize(), bot_left, top_right);\n  679    for (part_it.move_to_first(); !part_it.empty(); part_it.forward()) {\n  680      part = part_it.extract();\n  ...\n  763    TBOX grid_box(bleft_, tright_);\n  764    grid_box.rotate_large(deskew);\n  765:   Init(gridsize(), grid_box.botleft(), grid_box.topright());\n  766    // Reinitializing the grid with rotated coords also clears all the\n  767    // pointers, so parts will now own the ColPartitions. (Briefly).\n  ...\n  959    }\n  960    // Reinitialize grid to the new size.\n  961:   Init(gridsize, bleft, tright);\n  962    // Recompute the bounds of the parts and put them back in the new grid.\n  963    for (part_it.move_to_first(); !part_it.empty(); part_it.forward()) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\strokewidth.cpp:\n  262  void StrokeWidth::CorrectForRotation(const FCOORD& rotation,\n  263                                       ColPartitionGrid* part_grid) {\n  264:   Init(part_grid->gridsize(), part_grid->bleft(), part_grid->tright());\n  265    grid_box_ = TBOX(bleft(), tright());\n  266    rerotation_.set_x(rotation.x());\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tabfind.cpp:\n 1317    TBOX grid_box(bleft_, tright_);\n 1318    grid_box.rotate_large(*deskew);\n 1319:   Init(gridsize(), grid_box.botleft(), grid_box.topright());\n 1320    InsertBlobsToGrid(false, false, image_blobs, this);\n 1321    InsertBlobsToGrid(true, false, &block->blobs, this);\n ....\n 1366    TBOX grid_box(bleft(), tright());\n 1367    grid_box.rotate_large(rotate);\n 1368:   Init(gridsize(), grid_box.botleft(), grid_box.topright());\n 1369  }\n 1370  \n ....\n 1402    grid_box.set_left(-grid_box.right());\n 1403    grid_box.set_right(-tmp);\n 1404:   Init(gridsize(), grid_box.botleft(), grid_box.topright());\n 1405  }\n 1406  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablefind.cpp:\n  189  }\n  190  \n  191: void TableFinder::Init(int grid_size, const ICOORD& bottom_left,\n  192                         const ICOORD& top_right) {\n  193    // Initialize clean partitions list and grid\n  194:   clean_part_grid_.Init(grid_size, bottom_left, top_right);\n  195:   leader_and_ruling_grid_.Init(grid_size, bottom_left, top_right);\n  196:   fragmented_text_grid_.Init(grid_size, bottom_left, top_right);\n  197:   col_seg_grid_.Init(grid_size, bottom_left, top_right);\n  198:   table_grid_.Init(grid_size, bottom_left, top_right);\n  199  }\n  200  \n  ...\n 1839  \n 1840    TableRecognizer recognizer;\n 1841:   recognizer.Init();\n 1842    recognizer.set_line_grid(&leader_and_ruling_grid_);\n 1843    recognizer.set_text_grid(&fragmented_text_grid_);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablefind.h:\n  143  \n  144    // Initialize\n  145:   void Init(int grid_size, const ICOORD& bottom_left, const ICOORD& top_right);\n  146  \n  147    // Copy cleaned partitions from ColumnFinder's part_grid_ to this\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablerecog.cpp:\n   81  }\n   82  \n   83: void StructuredTable::Init() {\n   84  }\n   85  \n   ..\n  715  }\n  716  \n  717: void TableRecognizer::Init() {\n  718  }\n  719  \n  ...\n  736  StructuredTable* TableRecognizer::RecognizeTable(const TBOX& guess) {\n  737    StructuredTable* table = new StructuredTable();\n  738:   table->Init();\n  739    table->set_text_grid(text_grid_);\n  740    table->set_line_grid(line_grid_);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablerecog.h:\n   55  //\n   56  //    StructuredTable table;\n   57: //    table.Init();  // construction code\n   58  //    table.set_text_grid(/* text */);  // These 2 grids can be the same!\n   59  //    table.set_line_grid(/* lines */);\n   ..\n   76  \n   77    // Initialization code. Must be called after the constructor.\n   78:   void Init();\n   79  \n   80    // Sets the grids used by the table. These can be changed between\n   ..\n  261  \n  262    // Initialization code. Must be called after the constructor.\n  263:   void Init();\n  264  \n  265    ////////\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ambiguous_words.cpp:\n   56    vars_vec.push_back(\"output_ambig_words_file\");\n   57    vars_values.push_back(output_file_str);\n   58:   api.Init(tessdata_dir, lang.string(), tesseract::OEM_TESSERACT_ONLY,\n   59             NULL, 0, &vars_vec, &vars_values, false);\n   60    tesseract::Dict &dict = api.tesseract()->getDict();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\classifier_tester.cpp:\n   72        classifier == CN_PRUNER || classifier == CN_FULL) {\n   73      (*api)->SetVariable(\"cube_debug_level\", \"2\");\n   74:     if ((*api)->Init(FLAGS_tessdata_dir.c_str(), FLAGS_lang.c_str(),\n   75                   engine_mode) < 0) {\n   76        fprintf(stderr, \"Tesseract initialization failed!\\n\");\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\combine_tessdata.cpp:\n   85      // Initialize TessdataManager with the data in the given traineddata file.\n   86      tesseract::TessdataManager tm;\n   87:     tm.Init(argv[2], 0);\n   88      printf(\"Extracting tessdata components from %s\\n\", argv[2]);\n   89      if (strcmp(argv[1], \"-e\") == 0) {\n   ..\n  122      // Initialize TessdataManager with the data in the given traineddata file.\n  123      tesseract::TessdataManager tm;\n  124:     tm.Init(traineddata_filename.string(), 0);\n  125  \n  126      // Write the updated traineddata file.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\commontraining.cpp:\n  200                                               FLAGS_debug_level);\n  201    IntFeatureSpace fs;\n  202:   fs.Init(kBoostXYBuckets, kBoostXYBuckets, kBoostDirBuckets);\n  203    if (FLAGS_T.empty()) {\n  204      trainer->LoadUnicharset(FLAGS_U.c_str());\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ligature_table.cpp:\n   53    if (instance_ == NULL) {\n   54      instance_.reset(new LigatureTable());\n   55:     instance_->Init();\n   56    }\n   57    return instance_.get();\n   ..\n   61                                   min_norm_length_(0), max_norm_length_(0) {}\n   62  \n   63: void LigatureTable::Init() {\n   64    if (norm_to_lig_table_.empty()) {\n   65      for (char32 lig = kMinLigature; lig <= kMaxLigature; ++lig) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ligature_table.h:\n   60    // Initialize the hash tables mapping between ligature strings and the\n   61    // corresponding ligature characters.\n   62:   void Init();\n   63  \n   64    static SmartPtr<LigatureTable> instance_;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\mftraining.cpp:\n  192  static void SetupConfigMap(ShapeTable* shape_table, IndexMapBiDi* config_map) {\n  193    int num_configs = shape_table->NumShapes();\n  194:   config_map->Init(num_configs, true);\n  195    config_map->Setup();\n  196    for (int c1 = 0; c1 < num_configs; ++c1) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\stringrenderer.h:\n  149  \n  150   protected:\n  151:   // Init and free local renderer objects.\n  152    void InitPangoCairo();\n  153    void SetLayoutProperties();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\wordrec\\params_model.cpp:\n  115    char line[kMaxLineSize];\n  116    BitVector present;\n  117:   present.Init(PTRAIN_NUM_FEATURE_TYPES);\n  118    lang_ = lang;\n  119    // Load weights for passes with adaption on.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\tessbaseapi.cpp:\n  107    jboolean res = JNI_TRUE;\n  108  \n  109:   if (nat->api.Init(c_dir, c_lang)) {\n  110      LOGE(\"Could not initialize Tesseract API with language=%s!\", c_lang);\n  111      res = JNI_FALSE;\n  ...\n  133    jboolean res = JNI_TRUE;\n  134  \n  135:   if (nat->api.Init(c_dir, c_lang, (tesseract::OcrEngineMode) mode)) {\n  136      LOGE(\"Could not initialize Tesseract API with language=%s!\", c_lang);\n  137      res = JNI_FALSE;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\TessBaseAPI.java:\n  177       * must end in / . Any name after the last / will be stripped. The language\n  178       * is (usually) an ISO 639-3 string or <code>null</code> will default to eng.\n  179:      * It is entirely safe (and eventually will be efficient too) to call Init\n  180       * multiple times on the same instance to change language, or just to reset\n  181       * the classifier.\n  ...\n  196       * <p>\n  197       * If you have a rare need to set a Variable that controls initialization\n  198:      * for a second call to Init you should explicitly call End() and then use\n  199:      * SetVariable before Init. This is only a very rare use case, since there\n  200:      * are very few uses that require any parameters to be set before Init.\n  201       *\n  202       * @param datapath the parent directory of tessdata ending in a forward\n  ...\n  269       * <p>\n  270       * Once End() has been used, none of the other API functions may be used\n  271:      * other than Init and anything declared above it in the class definition.\n  272       */\n  273      public void end() {\n\n247 matches across 94 files\n\n\nSearching 1857 files for \".Init\" (case sensitive, whole word)\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\tesseractmain.cpp:\n  168  \n  169    api.SetOutputName(output);\n  170:   int rc = api.Init(datapath, lang, tesseract::OEM_DEFAULT,\n  171                  &(argv[arg]), argc - arg, NULL, NULL, false);\n  172  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\tessedit.cpp:\n   96    // Initialize TessdataManager.\n   97    STRING tessdata_path = language_data_path_prefix + kTrainedDataSuffix;\n   98:   if (!tessdata_manager.Init(tessdata_path.string(),\n   99                               tessdata_manager_debug_level)) {\n  100      return false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\adaptmatch.cpp:\n  541    }\n  542  \n  543:   im_.Init(&classify_debug_level);\n  544    InitIntegerFX();\n  545  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\intfeaturemap.cpp:\n   76    mapping_changed_ = false;\n   77    int sparse_size = feature_space_.Size();\n   78:   feature_map_.Init(sparse_size, true);\n   79    feature_map_.Setup();\n   80    compact_size_ = feature_map_.CompactSize();\n   ..\n  133  // Returns the size of the compacted feature space.\n  134  int IntFeatureMap::FindNZFeatureMapping(SampleIterator* it) {\n  135:   feature_map_.Init(feature_space_.Size(), false);\n  136    int total_samples = 0;\n  137    for (it->Begin(); !it->AtEnd(); it->Next()) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\mastertrainer.cpp:\n   95    charsetsize_ = unicharset_.size();\n   96    if (!feature_space_.DeSerialize(swap, fp)) return false;\n   97:   feature_map_.Init(feature_space_);\n   98    if (!samples_.DeSerialize(swap, fp)) return false;\n   99    if (!junk_samples_.DeSerialize(swap, fp)) return false;\n  ...\n  232      ReplaceFragmentedSamples();\n  233    SampleIterator sample_it;\n  234:   sample_it.Init(NULL, NULL, true, &verify_samples_);\n  235    sample_it.NormalizeSamples();\n  236    verify_samples_.OrganizeByFontAndClass();\n  ...\n  552    // We want to iterate over the samples of just the one shape.\n  553    IndexMapBiDi shape_map;\n  554:   shape_map.Init(shape_table.NumShapes(), false);\n  555    shape_map.SetMap(shape_id, true);\n  556    shape_map.Setup();\n  ...\n  558    GenericVector<const TrainingSample*> sample_ptrs;\n  559    SampleIterator it;\n  560:   it.Init(&shape_map, &shape_table, false, &samples_);\n  561    for (it.Begin(); !it.AtEnd(); it.Next()) {\n  562      sample_ptrs.push_back(&it.GetSample());\n  ...\n  755                                         ShapeClassifier* old_classifier) {\n  756    SampleIterator sample_it;\n  757:   sample_it.Init(NULL, NULL, replicate_samples, &samples_);\n  758    ErrorCounter::DebugNewErrors(test_classifier, old_classifier,\n  759                                 CT_UNICHAR_TOPN_ERR, fontinfo_table_,\n  ...\n  792                                       STRING* report_string) {\n  793    SampleIterator sample_it;\n  794:   sample_it.Init(NULL, NULL, replicate_samples, samples);\n  795    if (report_level > 0) {\n  796      int num_samples = 0;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\mastertrainer.h:\n   85    void SetFeatureSpace(const IntFeatureSpace& fs) {\n   86      feature_space_ = fs;\n   87:     feature_map_.Init(fs);\n   88    }\n   89  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\classify\\trainingsampleset.cpp:\n  649      ++font_counts[font_id];\n  650    }\n  651:   font_id_map_.Init(font_counts.size(), false);\n  652    for (int f = 0; f < font_counts.size(); ++f) {\n  653      font_id_map_.SetMap(f, font_counts[f] > 0);\n  ...\n  665    IntFeatureDist f_table;\n  666    if (debug) tprintf(\"feature table size %d\\n\", map.sparse_size());\n  667:   f_table.Init(&map);\n  668    int worst_s1 = 0;\n  669    int worst_s2 = 0;\n  ...\n  819          continue;\n  820        FontClassInfo& fcinfo = (*font_class_array_)(font_index, c);\n  821:       fcinfo.cloud_features.Init(feature_space_size);\n  822        for (int s = 0; s < num_samples; ++s) {\n  823          const TrainingSample* sample = GetSample(font_id, c, s);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\dict\\dawg_cache.cpp:\n   58  Dawg *DawgLoader::Load() {\n   59    TessdataManager data_loader;\n   60:   if (!data_loader.Init(data_file_name_, dawg_debug_level_)) {\n   61      return NULL;\n   62    }\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\cjkpitch.cpp:\n  491      if (is_interesting_blob(blob_it.data())) {\n  492        FPChar fp_char;\n  493:       fp_char.Init(blob_it.data());\n  494        // Merge unconditionally if two blobs overlap.\n  495        if (!characters_.empty() &&\n  ...\n 1003      for (row_it.mark_cycle_pt(); !row_it.cycled_list(); row_it.forward()) {\n 1004        FPRow row;\n 1005:       row.Init(row_it.data());\n 1006        rows_.push_back(row);\n 1007        int num_chars = rows_.back().num_chars();\n ....\n 1058                               TO_BLOCK_LIST *port_blocks) {\n 1059    FPAnalyzer analyzer;\n 1060:   analyzer.Init(page_tr, port_blocks);\n 1061    if (analyzer.num_rows() == 0) return;\n 1062  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\colfind.cpp:\n  151  void ColumnFinder::SetupAndFilterNoise(Pix* photo_mask_pix,\n  152                                         TO_BLOCK* input_block) {\n  153:   part_grid_.Init(gridsize(), bleft(), tright());\n  154    if (stroke_width_ != NULL)\n  155      delete stroke_width_;\n  ...\n  245      TabFind::ResetForVerticalText(rotation_, rerotate_, &horizontal_lines_,\n  246                                    &min_gutter_width_);\n  247:     part_grid_.Init(gridsize(), bleft(), tright());\n  248      // Reset all blobs to initial state and filter by size.\n  249      // Since they have rotated, the list they belong on could have changed.\n  ...\n  412      if (textord_tabfind_find_tables) {\n  413        TableFinder table_finder;\n  414:       table_finder.Init(gridsize(), bleft(), tright());\n  415        table_finder.set_resolution(resolution_);\n  416        table_finder.set_left_to_right_language(\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablefind.cpp:\n  192                         const ICOORD& top_right) {\n  193    // Initialize clean partitions list and grid\n  194:   clean_part_grid_.Init(grid_size, bottom_left, top_right);\n  195:   leader_and_ruling_grid_.Init(grid_size, bottom_left, top_right);\n  196:   fragmented_text_grid_.Init(grid_size, bottom_left, top_right);\n  197:   col_seg_grid_.Init(grid_size, bottom_left, top_right);\n  198:   table_grid_.Init(grid_size, bottom_left, top_right);\n  199  }\n  200  \n  ...\n 1839  \n 1840    TableRecognizer recognizer;\n 1841:   recognizer.Init();\n 1842    recognizer.set_line_grid(&leader_and_ruling_grid_);\n 1843    recognizer.set_text_grid(&fragmented_text_grid_);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablerecog.h:\n   55  //\n   56  //    StructuredTable table;\n   57: //    table.Init();  // construction code\n   58  //    table.set_text_grid(/* text */);  // These 2 grids can be the same!\n   59  //    table.set_line_grid(/* lines */);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ambiguous_words.cpp:\n   56    vars_vec.push_back(\"output_ambig_words_file\");\n   57    vars_values.push_back(output_file_str);\n   58:   api.Init(tessdata_dir, lang.string(), tesseract::OEM_TESSERACT_ONLY,\n   59             NULL, 0, &vars_vec, &vars_values, false);\n   60    tesseract::Dict &dict = api.tesseract()->getDict();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\combine_tessdata.cpp:\n   85      // Initialize TessdataManager with the data in the given traineddata file.\n   86      tesseract::TessdataManager tm;\n   87:     tm.Init(argv[2], 0);\n   88      printf(\"Extracting tessdata components from %s\\n\", argv[2]);\n   89      if (strcmp(argv[1], \"-e\") == 0) {\n   ..\n  122      // Initialize TessdataManager with the data in the given traineddata file.\n  123      tesseract::TessdataManager tm;\n  124:     tm.Init(traineddata_filename.string(), 0);\n  125  \n  126      // Write the updated traineddata file.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\commontraining.cpp:\n  200                                               FLAGS_debug_level);\n  201    IntFeatureSpace fs;\n  202:   fs.Init(kBoostXYBuckets, kBoostXYBuckets, kBoostDirBuckets);\n  203    if (FLAGS_T.empty()) {\n  204      trainer->LoadUnicharset(FLAGS_U.c_str());\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\wordrec\\params_model.cpp:\n  115    char line[kMaxLineSize];\n  116    BitVector present;\n  117:   present.Init(PTRAIN_NUM_FEATURE_TYPES);\n  118    lang_ = lang;\n  119    // Load weights for passes with adaption on.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\tessbaseapi.cpp:\n  107    jboolean res = JNI_TRUE;\n  108  \n  109:   if (nat->api.Init(c_dir, c_lang)) {\n  110      LOGE(\"Could not initialize Tesseract API with language=%s!\", c_lang);\n  111      res = JNI_FALSE;\n  ...\n  133    jboolean res = JNI_TRUE;\n  134  \n  135:   if (nat->api.Init(c_dir, c_lang, (tesseract::OcrEngineMode) mode)) {\n  136      LOGE(\"Could not initialize Tesseract API with language=%s!\", c_lang);\n  137      res = JNI_FALSE;\n\n36 matches across 17 files\n\n\nSearching 1857 files for \"->Init\" (case sensitive, whole word)\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n  248      }\n  249  \n  250:     return handle->Init(datapath, language, mode, configs, configs_size, &varNames, &varValues, set_only_non_debug_params);\n  251  }\n  252  \n  ...\n  255                                          char** configs, int configs_size)\n  256  {\n  257:     return handle->Init(datapath, language, oem, configs, configs_size, NULL, NULL, false);\n  258  }\n  259  \n  260  TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262:     return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265  TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267:     return handle->Init(datapath, language);\n  268  }\n  269  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccutil\\unicharset.cpp:\n  553  bool UNICHARSET::GetStrProperties(const char* utf8_str,\n  554                                    UNICHAR_PROPERTIES* props) const {\n  555:   props->Init();\n  556    props->SetRangesEmpty();\n  557    props->min_advance = 0;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\classifier_factory.cpp:\n   87  \n   88    // Init the classifier\n   89:   if (!classifier_obj->Init(data_file_path, lang, lang_mod)) {\n   90      delete classifier_obj;\n   91      fprintf(stderr, \"Cube ERROR (CharClassifierFactory::Create): unable \"\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\cube\\word_size_model.cpp:\n   50    }\n   51  \n   52:   if (!obj->Init(data_file_path, lang)) {\n   53      delete obj;\n   54      return NULL;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\textord\\tablerecog.cpp:\n  736  StructuredTable* TableRecognizer::RecognizeTable(const TBOX& guess) {\n  737    StructuredTable* table = new StructuredTable();\n  738:   table->Init();\n  739    table->set_text_grid(text_grid_);\n  740    table->set_line_grid(line_grid_);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ligature_table.cpp:\n   53    if (instance_ == NULL) {\n   54      instance_.reset(new LigatureTable());\n   55:     instance_->Init();\n   56    }\n   57    return instance_.get();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\mftraining.cpp:\n  192  static void SetupConfigMap(ShapeTable* shape_table, IndexMapBiDi* config_map) {\n  193    int num_configs = shape_table->NumShapes();\n  194:   config_map->Init(num_configs, true);\n  195    config_map->Setup();\n  196    for (int c1 = 0; c1 < num_configs; ++c1) {\n\n10 matches across 7 files\n\n\nSearching 1857 files for \"TessBaseAPIInit\"\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n  234  }\n  235  \n  236: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language,\n  237      TessOcrEngineMode mode, char** configs, int configs_size,\n  238      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  252  \n  253  \n  254: TESS_API int TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  255                                          char** configs, int configs_size)\n  256  {\n  ...\n  258  }\n  259  \n  260: TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262      return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265: TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267      return handle->Init(datapath, language);\n  ...\n  295  }\n  296  \n  297: TESS_API int TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language)\n  298  {\n  299      return handle->InitLangMod(datapath, language);\n  300  }\n  301  \n  302: TESS_API void TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle)\n  303  {\n  304      handle->InitForAnalysePage();\n  ...\n  612  }\n  613  \n  614: TESS_API void TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb)\n  615  {\n  616      handle->InitTruthCallback(cb);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.h:\n  153  \n  154  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  155: TESS_API int   TESS_CALL TessBaseAPIInit(TessBaseAPI* handle, const char* datapath, const char* language,\n  156                                           TessOcrEngineMode mode, char** configs, int configs_size,\n  157                                           const STRING* vars_vec, size_t vars_vec_size,\n  158                                           const STRING* vars_values, size_t vars_values_size, BOOL set_only_init_params);\n  159  #endif\n  160: TESS_API int   TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  161                                            char** configs, int configs_size);\n  162: TESS_API int   TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem);\n  163: TESS_API int   TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language);\n  164  \n  165: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode mode, \n  166      char** configs, int configs_size,\n  167      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  175                 TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle);\n  176  \n  177: TESS_API int   TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language);\n  178: TESS_API void  TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle);\n  179  \n  180  TESS_API void  TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename);\n  ...\n  296  TESS_API TessOcrEngineMode\n  297                 TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle);\n  298: TESS_API void  TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb);\n  299  \n  300  TESS_API TessCubeRecoContext*\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\contrib\\tesseract-c_api-demo.py:\n   64  \n   65  api = tesseract.TessBaseAPICreate()\n   66: rc = tesseract.TessBaseAPIInit3(api, TESSDATA_PREFIX, lang);\n   67  if (rc):\n   68  	tesseract.TessBaseAPIDelete(api)\n\n16 matches across 3 files\n\n\nSearching 1857 files for \"TessBaseAPI\"\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrTaskProcessor.java:\n   35  import com.googlecode.leptonica.android.Scale;\n   36  import com.googlecode.leptonica.android.WriteFile;\n   37: import com.googlecode.tesseract.android.TessBaseAPI;\n   38  \n   39  import java.io.File;\n   ..\n   50  \n   51      /** The wrapper for the native Tesseract instance. */\n   52:     private final TessBaseAPI mTessBaseAPI;\n   53  \n   54      /** The wrapper for the native Hydrogen instance. */\n   ..\n   78  \n   79          mHandler = new Handler();\n   80:         mTessBaseAPI = new TessBaseAPI();\n   81          mTextDetector = new HydrogenTextDetector();\n   82          mTaskQueue = new LinkedList<OcrTask>();\n   ..\n  166          abort();\n  167  \n  168:         mTessBaseAPI.end();\n  169      }\n  170  \n  ...\n  314                      .getPageSegMode();\n  315  \n  316:             mTessBaseAPI.init(mDatapath.getAbsolutePath() + \"/\", language);\n  317:             mTessBaseAPI.setDebug(debug);\n  318:             mTessBaseAPI.setPageSegMode(pageSegMode);\n  319  \n  320              for (String key : params.getVariableKeys()) {\n  321                  String value = params.getVariable(key);\n  322:                 mTessBaseAPI.setVariable(key, value);\n  323              }\n  324          }\n  ...\n  428              }\n  429  \n  430:             mTessBaseAPI.setImage(pix);\n  431:             String string = mTessBaseAPI.getUTF8Text();\n  432:             int[] confidences = mTessBaseAPI.wordConfidences();\n  433:             mTessBaseAPI.clear();\n  434  \n  435              pix.recycle();\n  ...\n  532  \n  533          private void cleanupOcrLibrary() {\n  534:             mTessBaseAPI.clear();\n  535          }\n  536      }\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\opticflow\\OcrQueue.java:\n   21  \n   22  import com.googlecode.eyesfree.opticflow.TextTrackerProcessor.TrackedRect;\n   23: import com.googlecode.tesseract.android.TessBaseAPI;\n   24  \n   25  import java.util.Collection;\n   ..\n   35      private static final String DEFAULT_WHITELIST = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/:=.@,!-'%()$&?*\";\n   36  \n   37:     private final TessBaseAPI mOcrAPI;\n   38      private final LinkedList<TrackedRect> mRectQueue;\n   39      private final String mTessdata;\n   ..\n   56          mLanguage = language;\n   57          mRectQueue = new LinkedList<TrackedRect>();\n   58:         mOcrAPI = new TessBaseAPI();\n   59      }\n   60  \n   ..\n   75  \n   76          if (success) {\n   77:             mOcrAPI.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n   78:             mOcrAPI.setVariable(TessBaseAPI.VAR_CHAR_WHITELIST, DEFAULT_WHITELIST);\n   79  \n   80              mInitialized = true;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two-test\\src\\com\\googlecode\\tesseract\\android\\test\\TessBaseAPITest.java:\n   19  import com.googlecode.leptonica.android.Pixa;\n   20  import com.googlecode.tesseract.android.ResultIterator;\n   21: import com.googlecode.tesseract.android.TessBaseAPI;\n   22: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   23  \n   24  import android.graphics.Bitmap;\n   ..\n   34  import junit.framework.TestCase;\n   35  \n   36: public class TessBaseAPITest extends TestCase {\n   37      private static final String TESSBASE_PATH = \"/mnt/sdcard/tesseract/\";\n   38      private static final String DEFAULT_LANGUAGE = \"eng\";\n   ..\n   47  \n   48          // Attempt to initialize the API.\n   49:         final TessBaseAPI baseApi = new TessBaseAPI();\n   50          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   51  \n   ..\n   61  \n   62          // Attempt to initialize the API.\n   63:         final TessBaseAPI baseApi = new TessBaseAPI();\n   64          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   65  \n   ..\n   99  \n  100          // Attempt to initialize the API.\n  101:         final TessBaseAPI baseApi = new TessBaseAPI();\n  102          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n  103:         baseApi.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n  104          baseApi.setImage(bmp);\n  105  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\Android.mk:\n   62    pageiterator.cpp \\\n   63    resultiterator.cpp \\\n   64:   tessbaseapi.cpp\n   65  \n   66  LOCAL_C_INCLUDES += \\\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.cpp:\n  103  const int kMaxCredibleResolution = 2400;\n  104  \n  105: TessBaseAPI::TessBaseAPI()\n  106    : tesseract_(NULL),\n  107      osd_tesseract_(NULL),\n  ...\n  126  }\n  127  \n  128: TessBaseAPI::~TessBaseAPI() {\n  129    End();\n  130  }\n  ...\n  133   * Returns the version identifier as a static string. Do not delete.\n  134   */\n  135: const char* TessBaseAPI::Version() {\n  136    return VERSION;\n  137  }\n  ...\n  149  #endif\n  150  #endif\n  151: size_t TessBaseAPI::getOpenCLDevice(void **data) {\n  152  #ifdef USE_OPENCL\n  153  #if USE_DEVICE_SELECTION\n  ...\n  169   * SIGSEGV, SIGFPE, or SIGBUS signal. (Linux/Unix only).\n  170   */\n  171: void TessBaseAPI::CatchSignals() {\n  172  #ifdef __linux__\n  173    struct sigaction action;\n  ...\n  188   * loading a UNLV zone file.\n  189   */\n  190: void TessBaseAPI::SetInputName(const char* name) {\n  191    if (input_file_ == NULL)\n  192      input_file_ = new STRING(name);\n  ...\n  196  \n  197  /** Set the name of the output files. Needed only for debugging. */\n  198: void TessBaseAPI::SetOutputName(const char* name) {\n  199    if (output_file_ == NULL)\n  200      output_file_ = new STRING(name);\n  ...\n  203  }\n  204  \n  205: bool TessBaseAPI::SetVariable(const char* name, const char* value) {\n  206    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  207    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_NON_INIT_ONLY,\n  ...\n  209  }\n  210  \n  211: bool TessBaseAPI::SetDebugVariable(const char* name, const char* value) {\n  212    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  213    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_DEBUG_ONLY,\n  ...\n  215  }\n  216  \n  217: bool TessBaseAPI::GetIntVariable(const char *name, int *value) const {\n  218    IntParam *p = ParamUtils::FindParam<IntParam>(\n  219        name, GlobalParams()->int_params, tesseract_->params()->int_params);\n  ...\n  223  }\n  224  \n  225: bool TessBaseAPI::GetBoolVariable(const char *name, bool *value) const {\n  226    BoolParam *p = ParamUtils::FindParam<BoolParam>(\n  227        name, GlobalParams()->bool_params, tesseract_->params()->bool_params);\n  ...\n  231  }\n  232  \n  233: const char *TessBaseAPI::GetStringVariable(const char *name) const {\n  234    StringParam *p = ParamUtils::FindParam<StringParam>(\n  235        name, GlobalParams()->string_params, tesseract_->params()->string_params);\n  ...\n  237  }\n  238  \n  239: bool TessBaseAPI::GetDoubleVariable(const char *name, double *value) const {\n  240    DoubleParam *p = ParamUtils::FindParam<DoubleParam>(\n  241        name, GlobalParams()->double_params, tesseract_->params()->double_params);\n  ...\n  246  \n  247  /** Get value of named variable as a string, if it exists. */\n  248: bool TessBaseAPI::GetVariableAsString(const char *name, STRING *val) {\n  249    return ParamUtils::GetParamAsString(name, tesseract_->params(), val);\n  250  }\n  251  \n  252  /** Print Tesseract parameters to the given file. */\n  253: void TessBaseAPI::PrintVariables(FILE *fp) const {\n  254    ParamUtils::PrintParams(fp, tesseract_->params());\n  255  }\n  ...\n  263   * @return: 0 on success and -1 on initialization failure.\n  264   */\n  265: int TessBaseAPI::Init(const char* datapath, const char* language,\n  266                        OcrEngineMode oem, char **configs, int configs_size,\n  267                        const GenericVector<STRING> *vars_vec,\n  268                        const GenericVector<STRING> *vars_values,\n  269                        bool set_only_non_debug_params) {\n  270:   PERF_COUNT_START(\"TessBaseAPI::Init\")\n  271    // Default language is \"eng\".\n  272    if (language == NULL) language = \"eng\";\n  ...\n  333   * The returned string should NOT be deleted.\n  334   */\n  335: const char* TessBaseAPI::GetInitLanguagesAsString() const {\n  336    return (language_ == NULL || language_->string() == NULL) ?\n  337        \"\" : language_->string();\n  ...\n  343   * as dependencies of other loaded languages.\n  344   */\n  345: void TessBaseAPI::GetLoadedLanguagesAsVector(\n  346      GenericVector<STRING>* langs) const {\n  347    langs->clear();\n  ...\n  357   * Returns the available languages in the vector of STRINGs.\n  358   */\n  359: void TessBaseAPI::GetAvailableLanguagesAsVector(\n  360      GenericVector<STRING>* langs) const {\n  361    langs->clear();\n  ...\n  409   * in a separate API at some future time.\n  410   */\n  411: int TessBaseAPI::InitLangMod(const char* datapath, const char* language) {\n  412    if (tesseract_ == NULL)\n  413      tesseract_ = new Tesseract;\n  ...\n  421   * AnalysePage. Calls that attempt recognition will generate an error.\n  422   */\n  423: void TessBaseAPI::InitForAnalysePage() {\n  424    if (tesseract_ == NULL) {\n  425      tesseract_ = new Tesseract;\n  ...\n  433   * and also accepts a relative or absolute path name.\n  434   */\n  435: void TessBaseAPI::ReadConfigFile(const char* filename) {\n  436    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_NON_INIT_ONLY);\n  437  }\n  438  \n  439  /** Same as above, but only set debug params from the given config file. */\n  440: void TessBaseAPI::ReadDebugConfigFile(const char* filename) {\n  441    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_DEBUG_ONLY);\n  442  }\n  ...\n  447   * ReadConfigFile or SetVariable(\"tessedit_pageseg_mode\", mode as string).\n  448   */\n  449: void TessBaseAPI::SetPageSegMode(PageSegMode mode) {\n  450    if (tesseract_ == NULL)\n  451      tesseract_ = new Tesseract;\n  ...\n  454  \n  455  /** Return the current page segmentation mode. */\n  456: PageSegMode TessBaseAPI::GetPageSegMode() const {\n  457    if (tesseract_ == NULL)\n  458      return PSM_SINGLE_BLOCK;\n  ...\n  474   * as UTF8 and must be freed with the delete [] operator.\n  475   */\n  476: char* TessBaseAPI::TesseractRect(const unsigned char* imagedata,\n  477                                   int bytes_per_pixel,\n  478                                   int bytes_per_line,\n  ...\n  496   * adaptive data.\n  497   */\n  498: void TessBaseAPI::ClearAdaptiveClassifier() {\n  499    if (tesseract_ == NULL)\n  500      return;\n  ...\n  512   * will automatically perform recognition.\n  513   */\n  514: void TessBaseAPI::SetImage(const unsigned char* imagedata,\n  515                             int width, int height,\n  516                             int bytes_per_pixel, int bytes_per_line) {\n  ...\n  520  }\n  521  \n  522: void TessBaseAPI::SetSourceResolution(int ppi) {\n  523    if (thresholder_)\n  524      thresholder_->SetSourceYResolution(ppi);\n  ...\n  537   * with less copies than an implementation that does not.\n  538   */\n  539: void TessBaseAPI::SetImage(const Pix* pix) {\n  540    if (InternalSetImage())\n  541      thresholder_->SetImage(pix);\n  ...\n  547   * can be recognized with the same image.\n  548   */\n  549: void TessBaseAPI::SetRectangle(int left, int top, int width, int height) {\n  550    if (thresholder_ == NULL)\n  551      return;\n  ...\n  558   * Get a copy of the internal thresholded image from Tesseract.\n  559   */\n  560: Pix* TessBaseAPI::GetThresholdedImage() {\n  561    if (tesseract_ == NULL)\n  562      return NULL;\n  ...\n  571   * Can be called before or after Recognize.\n  572   */\n  573: Boxa* TessBaseAPI::GetRegions(Pixa** pixa) {\n  574    return GetComponentImages(RIL_BLOCK, false, pixa, NULL);\n  575  }\n  ...\n  583   * also returned as an array of one element per line. delete [] after use.\n  584   */\n  585: Boxa* TessBaseAPI::GetTextlines(const bool raw_image, const int raw_padding,\n  586                                  Pixa** pixa, int** blockids, int** paraids) {\n  587    return GetComponentImages(RIL_TEXTLINE, true, raw_image, raw_padding,\n  ...\n  597   * array of one element per line. delete [] after use.\n  598   */\n  599: Boxa* TessBaseAPI::GetStrips(Pixa** pixa, int** blockids) {\n  600    return GetComponentImages(RIL_TEXTLINE, false, pixa, blockids);\n  601  }\n  ...\n  606   * Can be called before or after Recognize.\n  607   */\n  608: Boxa* TessBaseAPI::GetWords(Pixa** pixa) {\n  609    return GetComponentImages(RIL_WORD, true, pixa, NULL);\n  610  }\n  ...\n  616   * Can be called before or after Recognize.\n  617   */\n  618: Boxa* TessBaseAPI::GetConnectedComponents(Pixa** pixa) {\n  619    return GetComponentImages(RIL_SYMBOL, true, pixa, NULL);\n  620  }\n  ...\n  628   * If text_only is true, then only text components are returned.\n  629   */\n  630: Boxa* TessBaseAPI::GetComponentImages(PageIteratorLevel level,\n  631                                        bool text_only, bool raw_image,\n  632                                        const int raw_padding,\n  ...\n  709  }\n  710  \n  711: int TessBaseAPI::GetThresholdedImageScaleFactor() const {\n  712    if (thresholder_ == NULL) {\n  713      return 0;\n  ...\n  717  \n  718  /** Dump the internal binary image to a PGM file. */\n  719: void TessBaseAPI::DumpPGM(const char* filename) {\n  720    if (tesseract_ == NULL)\n  721      return;\n  ...\n  786   * Returns NULL on error or an empty page.\n  787   * The returned iterator must be deleted after use.\n  788:  * WARNING! This class points to data held within the TessBaseAPI class, and\n  789:  * therefore can only be used while the TessBaseAPI class still exists and\n  790   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  791   * DetectOS, or anything else that changes the internal PAGE_RES.\n  792   */\n  793: PageIterator* TessBaseAPI::AnalyseLayout() {\n  794    if (FindLines() == 0) {\n  795      if (block_list_->empty())\n  ...\n  809   * internal structures.\n  810   */\n  811: int TessBaseAPI::Recognize(ETEXT_DESC* monitor) {\n  812    if (tesseract_ == NULL)\n  813      return -1;\n  ...\n  878  \n  879  /** Tests the chopper by exhaustively running chop_one_blob. */\n  880: int TessBaseAPI::RecognizeForChopTest(ETEXT_DESC* monitor) {\n  881    if (tesseract_ == NULL)\n  882      return -1;\n  ...\n  924   * for interactively debugging a bad page.\n  925   */\n  926: bool TessBaseAPI::ProcessPages(const char* filename,\n  927                                 const char* retry_config, int timeout_millisec,\n  928                                 STRING* text_out) {\n  ...\n  948  }\n  949  \n  950: void TessBaseAPI::SetInputImage(Pix *pix) {\n  951    if (input_image_)\n  952      pixDestroy(&input_image_);\n  ...\n  954  }\n  955  \n  956: Pix* TessBaseAPI::GetInputImage() {\n  957    return input_image_;\n  958  }\n  959  \n  960: const char * TessBaseAPI::GetInputName() {\n  961    if (input_file_)\n  962      return input_file_->c_str();\n  ...\n  964  }\n  965  \n  966: const char *  TessBaseAPI::GetDatapath() {\n  967    return tesseract_->datadir.c_str();\n  968  }\n  969  \n  970: int TessBaseAPI::GetSourceYResolution() {\n  971    return thresholder_->GetSourceYResolution();\n  972  }\n  973  \n  974: bool TessBaseAPI::ProcessPages(const char* filename,\n  975                                 const char* retry_config, int timeout_millisec,\n  976                                 TessResultRenderer* renderer) {\n  ...\n 1091   * The text is returned in text_out. Returns false on error.\n 1092   */\n 1093: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1094                                const char* retry_config, int timeout_millisec,\n 1095                                STRING* text_out) {\n ....\n 1127   * The text is returned in renderer. Returns false on error.\n 1128   */\n 1129: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1130                                const char* retry_config, int timeout_millisec,\n 1131                                TessResultRenderer* renderer) {\n ....\n 1190   * Recognize. The returned iterator must be deleted after use.\n 1191   */\n 1192: LTRResultIterator* TessBaseAPI::GetLTRIterator() {\n 1193    if (tesseract_ == NULL || page_res_ == NULL)\n 1194      return NULL;\n ....\n 1202   * Get a reading-order iterator to the results of LayoutAnalysis and/or\n 1203   * Recognize. The returned iterator must be deleted after use.\n 1204:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1205:  * therefore can only be used while the TessBaseAPI class still exists and\n 1206   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1207   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1208   */\n 1209: ResultIterator* TessBaseAPI::GetIterator() {\n 1210    if (tesseract_ == NULL || page_res_ == NULL)\n 1211      return NULL;\n ....\n 1219   * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n 1220   * The returned iterator must be deleted after use.\n 1221:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1222:  * therefore can only be used while the TessBaseAPI class still exists and\n 1223   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1224   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1225   */\n 1226: MutableIterator* TessBaseAPI::GetMutableIterator() {\n 1227    if (tesseract_ == NULL || page_res_ == NULL)\n 1228      return NULL;\n ....\n 1234  \n 1235  /** Make a text string from the internal data structures. */\n 1236: char* TessBaseAPI::GetUTF8Text() {\n 1237    if (tesseract_ == NULL ||\n 1238        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1335   * STL removed from original patch submission and refactored by rays.\n 1336   */\n 1337: char* TessBaseAPI::GetHOCRText(int page_number) {\n 1338    if (tesseract_ == NULL ||\n 1339        (page_res_ == NULL && Recognize(NULL) < 0))\n ....\n 1515   * page_number is a 0-base page index that will appear in the box file.\n 1516   */\n 1517: char* TessBaseAPI::GetBoxText(int page_number) {\n 1518    if (tesseract_ == NULL ||\n 1519        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1570   * and must be freed with the delete [] operator.\n 1571   */\n 1572: char* TessBaseAPI::GetUNLVText() {\n 1573    if (tesseract_ == NULL ||\n 1574        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1672  \n 1673  /** Returns the average word confidence for Tesseract page result. */\n 1674: int TessBaseAPI::MeanTextConf() {\n 1675    int* conf = AllWordConfidences();\n 1676    if (!conf) return 0;\n ....\n 1684  \n 1685  /** Returns an array of all word confidences, terminated by -1. */\n 1686: int* TessBaseAPI::AllWordConfidences() {\n 1687    if (tesseract_ == NULL ||\n 1688        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1718   * Returns false if adaption was not possible for some reason.\n 1719   */\n 1720: bool TessBaseAPI::AdaptToWordStr(PageSegMode mode, const char* wordstr) {\n 1721    int debug = 0;\n 1722    GetIntVariable(\"applybox_debug\", &debug);\n ....\n 1782   * any Recognize or Get* operation.\n 1783   */\n 1784: void TessBaseAPI::Clear() {\n 1785    if (thresholder_ != NULL)\n 1786      thresholder_->Clear();\n ....\n 1790  /**\n 1791   * Close down tesseract and free up all memory. End() is equivalent to\n 1792:  * destructing and reconstructing your TessBaseAPI.\n 1793   * Once End() has been used, none of the other API functions may be used\n 1794   * other than Init and anything declared above it in the class definition.\n 1795   */\n 1796: void TessBaseAPI::End() {\n 1797    if (thresholder_ != NULL) {\n 1798      delete thresholder_;\n ....\n 1847  // There are a variety of expensive-to-load constant data structures (mostly\n 1848  // language dictionaries) that are cached globally -- surviving the Init()\n 1849: // and End() of individual TessBaseAPI's.  This function allows the clearing\n 1850  // of these caches.\n 1851: void TessBaseAPI::ClearPersistentCache() {\n 1852    Dict::GlobalDawgCache()->DeleteUnusedDawgs();\n 1853  }\n ....\n 1857   * returns 0 if the word is invalid, non-zero if valid\n 1858   */\n 1859: int TessBaseAPI::IsValidWord(const char *word) {\n 1860    return tesseract_->getDict().valid_word(word);\n 1861  }\n ....\n 1864  // TODO(rays) Obsolete this function and replace with a more aptly named\n 1865  // function that returns image coordinates rather than tesseract coordinates.\n 1866: bool TessBaseAPI::GetTextDirection(int* out_offset, float* out_slope) {\n 1867    PageIterator* it = AnalyseLayout();\n 1868    if (it == NULL) {\n ....\n 1897  \n 1898  /** Sets Dict::letter_is_okay_ function to point to the given function. */\n 1899: void TessBaseAPI::SetDictFunc(DictFunc f) {\n 1900    if (tesseract_ != NULL) {\n 1901      tesseract_->getDict().letter_is_okay_ = f;\n ....\n 1907   * function.\n 1908   */\n 1909: void TessBaseAPI::SetProbabilityInContextFunc(ProbabilityInContextFunc f) {\n 1910    if (tesseract_ != NULL) {\n 1911      tesseract_->getDict().probability_in_context_ = f;\n ....\n 1919  \n 1920  /** Sets Wordrec::fill_lattice_ function to point to the given function. */\n 1921: void TessBaseAPI::SetFillLatticeFunc(FillLatticeFunc f) {\n 1922    if (tesseract_ != NULL) tesseract_->fill_lattice_ = f;\n 1923  }\n 1924  \n 1925  /** Common code for setting the image. */\n 1926: bool TessBaseAPI::InternalSetImage() {\n 1927    if (tesseract_ == NULL) {\n 1928      tprintf(\"Please call Init before attempting to send an image.\");\n ....\n 1941   * The usual argument to Threshold is Tesseract::mutable_pix_binary().\n 1942   */\n 1943: void TessBaseAPI::Threshold(Pix** pix) {\n 1944    ASSERT_HOST(pix != NULL);\n 1945    if (*pix != NULL)\n ....\n 1979  \n 1980  /** Find lines from the image making the BLOCK_LIST. */\n 1981: int TessBaseAPI::FindLines() {\n 1982    if (thresholder_ == NULL || thresholder_->IsEmpty()) {\n 1983      tprintf(\"Please call SetImage before attempting recognition.\");\n ....\n 2042  \n 2043  /** Delete the pageres and clear the block list ready for a new page. */\n 2044: void TessBaseAPI::ClearResults() {\n 2045    if (tesseract_ != NULL) {\n 2046      tesseract_->Clear();\n ....\n 2070   * Also return the number of recognized blobs in blob_count.\n 2071   */\n 2072: int TessBaseAPI::TextLength(int* blob_count) {\n 2073    if (tesseract_ == NULL || page_res_ == NULL)\n 2074      return 0;\n ....\n 2100   * Returns true if the image was processed successfully.\n 2101   */\n 2102: bool TessBaseAPI::DetectOS(OSResults* osr) {\n 2103    if (tesseract_ == NULL)\n 2104      return false;\n ....\n 2111  }\n 2112  \n 2113: void TessBaseAPI::set_min_orientation_margin(double margin) {\n 2114    tesseract_->min_orientation_margin.set_value(margin);\n 2115  }\n ....\n 2129   * consistent with GetTextLines().\n 2130   */\n 2131: void TessBaseAPI::GetBlockTextOrientations(int** block_orientation,\n 2132                                             bool** vertical_writing) {\n 2133    delete[] *block_orientation;\n ....\n 2177  \n 2178  /** Find lines from the image making the BLOCK_LIST. */\n 2179: BLOCK_LIST* TessBaseAPI::FindLinesCreateBlockList() {\n 2180    FindLines();\n 2181    BLOCK_LIST* result = block_list_;\n ....\n 2189   * and let go of including the other headers.\n 2190   */\n 2191: void TessBaseAPI::DeleteBlockList(BLOCK_LIST *block_list) {\n 2192    delete block_list;\n 2193  }\n 2194  \n 2195  \n 2196: ROW *TessBaseAPI::MakeTessOCRRow(float baseline,\n 2197                                   float xheight,\n 2198                                   float descender,\n ....\n 2211  \n 2212  /** Creates a TBLOB* from the whole pix. */\n 2213: TBLOB *TessBaseAPI::MakeTBLOB(Pix *pix) {\n 2214    int width = pixGetWidth(pix);\n 2215    int height = pixGetHeight(pix);\n ....\n 2241   * normalization-antidote is returned.\n 2242   */\n 2243: void TessBaseAPI::NormalizeTBLOB(TBLOB *tblob, ROW *row, bool numeric_mode) {\n 2244    TBOX box = tblob->bounding_box();\n 2245    float x_center = (box.left() + box.right()) / 2.0f;\n ....\n 2257                             float descender, float ascender,\n 2258                             bool numeric_mode, Pix* pix) {\n 2259:   TBLOB *tblob = TessBaseAPI::MakeTBLOB(pix);\n 2260  \n 2261    // Normalize TBLOB\n 2262    ROW *row =\n 2263:       TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n 2264:   TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode);\n 2265    delete row;\n 2266    return tblob;\n ....\n 2272   * of a single character.\n 2273   */\n 2274: void TessBaseAPI::AdaptToCharacter(const char *unichar_repr,\n 2275                                     int length,\n 2276                                     float baseline,\n ....\n 2306  \n 2307  \n 2308: PAGE_RES* TessBaseAPI::RecognitionPass1(BLOCK_LIST* block_list) {\n 2309    PAGE_RES *page_res = new PAGE_RES(block_list,\n 2310                                      &(tesseract_->prev_word_best_choice_));\n ....\n 2313  }\n 2314  \n 2315: PAGE_RES* TessBaseAPI::RecognitionPass2(BLOCK_LIST* block_list,\n 2316                                          PAGE_RES* pass1_result) {\n 2317    if (!pass1_result)\n ....\n 2322  }\n 2323  \n 2324: void TessBaseAPI::DetectParagraphs(bool after_text_recognition) {\n 2325    int debug_level = 0;\n 2326    GetIntVariable(\"paragraph_debug_level\", &debug_level);\n ....\n 2408   * and the bounding boxes of the characters.\n 2409   */\n 2410: int TessBaseAPI::TesseractExtractResult(char** text,\n 2411                                          int** lengths,\n 2412                                          float** costs,\n ....\n 2460  // corresponding to each feature in int_features.\n 2461  // TODO(rays) Fix the caller to out outline_counts instead.\n 2462: void TessBaseAPI::GetFeaturesForBlob(TBLOB* blob,\n 2463                                       INT_FEATURE_STRUCT* int_features,\n 2464                                       int* num_features,\n ....\n 2488  // This method returns the row to which a box of specified dimensions would\n 2489  // belong. If no good match is found, it returns NULL.\n 2490: ROW* TessBaseAPI::FindRowForBox(BLOCK_LIST* blocks,\n 2491                                  int left, int top, int right, int bottom) {\n 2492    TBOX box(left, bottom, right, top);\n ....\n 2513  \n 2514  /** Method to run adaptive classifier on a blob. */\n 2515: void TessBaseAPI::RunAdaptiveClassifier(TBLOB* blob,\n 2516                                          int num_max_matches,\n 2517                                          int* unichar_ids,\n ....\n 2536  \n 2537  /** This method returns the string form of the specified unichar. */\n 2538: const char* TessBaseAPI::GetUnichar(int unichar_id) {\n 2539    return tesseract_->unicharset.id_to_unichar(unichar_id);\n 2540  }\n 2541  \n 2542  /** Return the pointer to the i-th dawg loaded into tesseract_ object. */\n 2543: const Dawg *TessBaseAPI::GetDawg(int i) const {\n 2544    if (tesseract_ == NULL || i >= NumDawgs()) return NULL;\n 2545    return tesseract_->getDict().GetDawg(i);\n ....\n 2547  \n 2548  /** Return the number of dawgs loaded into tesseract_ object. */\n 2549: int TessBaseAPI::NumDawgs() const {\n 2550    return tesseract_ == NULL ? 0 : tesseract_->getDict().NumDawgs();\n 2551  }\n 2552  \n 2553  /** Return a pointer to underlying CubeRecoContext object if present. */\n 2554: CubeRecoContext *TessBaseAPI::GetCubeRecoContext() const {\n 2555    return (tesseract_ == NULL) ? NULL : tesseract_->GetCubeRecoContext();\n 2556  }\n 2557  \n 2558: TessResultRenderer* TessBaseAPI::NewRenderer() {\n 2559    if (tesseract_->tessedit_create_boxfile\n 2560        || tesseract_->tessedit_make_boxes_from_boxes) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.h:\n   98   * include any other Tesseract headers.\n   99   */\n  100: class TESS_API TessBaseAPI {\n  101   public:\n  102:   TessBaseAPI();\n  103:   virtual ~TessBaseAPI();\n  104  \n  105    /**\n  ...\n  187     * Instances are now mostly thread-safe and totally independent,\n  188     * but some global parameters remain. Basically it is safe to use multiple\n  189:    * TessBaseAPIs in different threads in parallel, UNLESS:\n  190     * you use SetVariable on some of the Params in classify and textord.\n  191     * If you do, then the effect will be to change it for all your instances.\n  ...\n  482     * Returns NULL on error.\n  483     * The returned iterator must be deleted after use.\n  484:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  485:    * therefore can only be used while the TessBaseAPI class still exists and\n  486     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  487     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  551     * Get a reading-order iterator to the results of LayoutAnalysis and/or\n  552     * Recognize. The returned iterator must be deleted after use.\n  553:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  554:    * therefore can only be used while the TessBaseAPI class still exists and\n  555     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  556     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  561     * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n  562     * The returned iterator must be deleted after use.\n  563:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  564:    * therefore can only be used while the TessBaseAPI class still exists and\n  565     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  566     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  627    /**\n  628     * Close down tesseract and free up all memory. End() is equivalent to\n  629:    * destructing and reconstructing your TessBaseAPI.\n  630     * Once End() has been used, none of the other API functions may be used\n  631     * other than Init and anything declared above it in the class definition.\n  ...\n  637     * There are a variety of expensive-to-load constant data structures (mostly\n  638     * language dictionaries) that are cached globally -- surviving the Init()\n  639:    * and End() of individual TessBaseAPI's.  This function allows the clearing\n  640     * of these caches.\n  641     **/\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n    8  TESS_API const char* TESS_CALL TessVersion()\n    9  {\n   10:     return TessBaseAPI::Version();\n   11  }\n   12  \n   ..\n   30  TESS_API void TESS_CALL TessDeleteBlockList(BLOCK_LIST* block_list)\n   31  {\n   32:     TessBaseAPI::DeleteBlockList(block_list);\n   33  }\n   34  \n   ..\n   78  }\n   79  \n   80: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api)\n   81  {\n   82      return renderer->AddImage(api);\n   83  }\n   84  \n   85: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api)\n   86  {\n   87      return renderer->AddError(api);\n   ..\n  123  }\n  124  \n  125: TESS_API TessBaseAPI* TESS_CALL TessBaseAPICreate()\n  126  {\n  127:     return new TessBaseAPI;\n  128  }\n  129  \n  130: TESS_API void TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle)\n  131  {\n  132      delete handle;\n  133  }\n  134  \n  135: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device)\n  136  {\n  137      return handle->getOpenCLDevice(device);\n  138  }\n  139  \n  140: TESS_API void TESS_CALL TessBaseAPISetInputName(TessBaseAPI* handle, const char* name)\n  141  {\n  142      handle->SetInputName(name);\n  143  }\n  144  \n  145: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle)\n  146  {\n  147      return handle->GetInputName();\n  148  }\n  149  \n  150: TESS_API void TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, Pix* pix)\n  151  {\n  152      handle->SetInputImage(pix);\n  153  }\n  154  \n  155: TESS_API Pix* TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle)\n  156  {\n  157      return handle->GetInputImage();\n  158  }\n  159  \n  160: TESS_API int TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle)\n  161  {\n  162      return handle->GetSourceYResolution();\n  163  }\n  164  \n  165: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle)\n  166  {\n  167      return handle->GetDatapath();\n  168  }\n  169  \n  170: TESS_API void TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name)\n  171  {\n  172      handle->SetOutputName(name);\n  173  }\n  174  \n  175: TESS_API BOOL TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value)\n  176  {\n  177      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  178  }\n  179  \n  180: TESS_API BOOL TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value)\n  181  {\n  182      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  183  }\n  184  \n  185: TESS_API BOOL TESS_CALL TessBaseAPIGetIntVariable(const TessBaseAPI* handle, const char* name, int* value)\n  186  {\n  187      return handle->GetIntVariable(name, value) ? TRUE : FALSE;\n  188  }\n  189  \n  190: TESS_API BOOL TESS_CALL TessBaseAPIGetBoolVariable(const TessBaseAPI* handle, const char* name, BOOL* value)\n  191  {\n  192      bool boolValue;\n  ...\n  202  }\n  203  \n  204: TESS_API BOOL TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value)\n  205  {\n  206      return handle->GetDoubleVariable(name, value) ? TRUE : FALSE;\n  207  }\n  208  \n  209: TESS_API const char* TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name)\n  210  {\n  211      return handle->GetStringVariable(name);\n  212  }\n  213  \n  214: TESS_API void TESS_CALL TessBaseAPIPrintVariables(const TessBaseAPI* handle, FILE* fp)\n  215  {\n  216      handle->PrintVariables(fp);\n  217  }\n  218  \n  219: TESS_API BOOL TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename)\n  220  {\n  221      FILE* fp = fopen(filename, \"w\");\n  ...\n  229  }\n  230  \n  231: TESS_API BOOL TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val)\n  232  {\n  233      return handle->GetVariableAsString(name, val) ? TRUE : FALSE;\n  234  }\n  235  \n  236: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language,\n  237      TessOcrEngineMode mode, char** configs, int configs_size,\n  238      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  252  \n  253  \n  254: TESS_API int TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  255                                          char** configs, int configs_size)\n  256  {\n  ...\n  258  }\n  259  \n  260: TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262      return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265: TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267      return handle->Init(datapath, language);\n  268  }\n  269  \n  270: TESS_API const char* TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle)\n  271  {\n  272      return handle->GetInitLanguagesAsString();\n  273  }\n  274  \n  275: TESS_API char** TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle)\n  276  {\n  277      GenericVector<STRING> languages;\n  ...\n  284  }\n  285  \n  286: TESS_API char** TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle)\n  287  {\n  288      GenericVector<STRING> languages;\n  ...\n  295  }\n  296  \n  297: TESS_API int TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language)\n  298  {\n  299      return handle->InitLangMod(datapath, language);\n  300  }\n  301  \n  302: TESS_API void TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle)\n  303  {\n  304      handle->InitForAnalysePage();\n  305  }\n  306  \n  307: TESS_API void TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename)\n  308  {\n  309      handle->ReadConfigFile(filename);\n  310  }\n  311  \n  312: TESS_API void TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename)\n  313  {\n  314      handle->ReadDebugConfigFile(filename);\n  315  }\n  316  \n  317: TESS_API void TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode)\n  318  {\n  319      handle->SetPageSegMode(mode);\n  320  }\n  321  \n  322: TESS_API TessPageSegMode TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle)\n  323  {\n  324      return handle->GetPageSegMode();\n  325  }\n  326  \n  327: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  328                                                 int bytes_per_pixel, int bytes_per_line,\n  329                                                 int left, int top, int width, int height)\n  ...\n  332  }\n  333  \n  334: TESS_API void TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle)\n  335  {\n  336      handle->ClearAdaptiveClassifier();\n  337  }\n  338  \n  339: TESS_API void TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  340                                                    int bytes_per_pixel, int bytes_per_line)\n  341  {\n  ...\n  343  }\n  344  \n  345: TESS_API void TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix)\n  346  {\n  347      return handle->SetImage(pix);\n  348  }\n  349  \n  350: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi)\n  351  {\n  352      handle->SetSourceResolution(ppi);\n  353  }\n  354  \n  355: TESS_API void TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height)\n  356  {\n  357      handle->SetRectangle(left, top, width, height);\n  358  }\n  359  \n  360: TESS_API void TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder)\n  361  {\n  362      handle->SetThresholder(thresholder);\n  363  }\n  364  \n  365: TESS_API struct Pix* TESS_CALL TessBaseAPIGetThresholdedImage(TessBaseAPI* handle)\n  366  {\n  367      return handle->GetThresholdedImage();\n  368  }\n  369  \n  370: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetRegions(TessBaseAPI* handle, struct Pixa** pixa)\n  371  {\n  372      return handle->GetRegions(pixa);\n  373  }\n  374  \n  375: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  376  {\n  377      return handle->GetTextlines(pixa, blockids);\n  378  }\n  379  \n  380: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines1(TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  381                                                                    struct Pixa** pixa, int** blockids, int** paraids)\n  382  {\n  ...\n  384  }\n  385  \n  386: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetStrips(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  387  {\n  388      return handle->GetStrips(pixa, blockids);\n  389  }\n  390  \n  391: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetWords(TessBaseAPI* handle, struct Pixa** pixa)\n  392  {\n  393      return handle->GetWords(pixa);\n  394  }\n  395  \n  396: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc)\n  397  {\n  398      return handle->GetConnectedComponents(cc);\n  399  }\n  400  \n  401: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetComponentImages(TessBaseAPI* handle, TessPageIteratorLevel level, BOOL text_only, struct Pixa** pixa, int** blockids)\n  402  {\n  403      return handle->GetComponentImages(level, text_only != FALSE, pixa, blockids);\n  ...\n  405  \n  406  TESS_API struct Boxa*\n  407:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  408                                                             const BOOL raw_image, const int raw_padding,\n  409                                                             struct Pixa** pixa, int** blockids, int** paraids)\n  ...\n  412  }\n  413  \n  414: TESS_API int TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle)\n  415  {\n  416      return handle->GetThresholdedImageScaleFactor();\n  417  }\n  418  \n  419: TESS_API void TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename)\n  420  {\n  421      handle->DumpPGM(filename);\n  422  }\n  423  \n  424: TESS_API TessPageIterator* TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle)\n  425  {\n  426      return handle->AnalyseLayout();\n  427  }\n  428  \n  429: TESS_API int TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  430  {\n  431      return handle->Recognize(monitor);\n  432  }\n  433  \n  434: TESS_API int TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  435  {\n  436      return handle->RecognizeForChopTest(monitor);\n  437  }\n  438  \n  439: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  440                                                   int timeout_millisec)\n  441  {\n  ...\n  447  }\n  448  \n  449: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  450                                                   int timeout_millisec, TessResultRenderer* renderer)\n  451  {\n  ...\n  456  }\n  457  \n  458: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  459                                                  const char* retry_config, int timeout_millisec)\n  460  {\n  ...\n  466  }\n  467  \n  468: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  469                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer)\n  470  {\n  ...\n  475  }\n  476  \n  477: TESS_API TessResultIterator* TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle)\n  478  {\n  479      return handle->GetIterator();\n  480  }\n  481  \n  482: TESS_API TessMutableIterator* TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle)\n  483  {\n  484      return handle->GetMutableIterator();\n  485  }\n  486  \n  487: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle)\n  488  {\n  489      return handle->GetUTF8Text();\n  490  }\n  491  \n  492: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number)\n  493  {\n  494      return handle->GetHOCRText(page_number);\n  495  }\n  496  \n  497: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number)\n  498  {\n  499      return handle->GetBoxText(page_number);\n  500  }\n  501  \n  502: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle)\n  503  {\n  504      return handle->GetUNLVText();\n  505  }\n  506  \n  507: TESS_API int TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle)\n  508  {\n  509      return handle->MeanTextConf();\n  510  }\n  511  \n  512: TESS_API int* TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle)\n  513  {\n  514      return handle->AllWordConfidences();\n  515  }\n  516  \n  517: TESS_API BOOL TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr)\n  518  {\n  519      return handle->AdaptToWordStr(mode, wordstr) ? TRUE : FALSE;\n  520  }\n  521  \n  522: TESS_API void TESS_CALL TessBaseAPIClear(TessBaseAPI* handle)\n  523  {\n  524      handle->Clear();\n  525  }\n  526  \n  527: TESS_API void TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle)\n  528  {\n  529      handle->End();\n  530  }\n  531  \n  532: TESS_API int TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word)\n  533  {\n  534      return handle->IsValidWord(word);\n  535  }\n  536  \n  537: TESS_API BOOL TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope)\n  538  {\n  539      return handle->GetTextDirection(out_offset, out_slope) ? TRUE : FALSE;\n  540  }\n  541  \n  542: TESS_API void TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f)\n  543  {\n  544      handle->SetDictFunc(f);\n  545  }\n  546  \n  547: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle)\n  548  {\n  549      handle->ClearPersistentCache();\n  550  }\n  551  \n  552: TESS_API void TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f)\n  553  {\n  554      handle->SetProbabilityInContextFunc(f);\n  555  }\n  556  \n  557: TESS_API BOOL TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results)\n  558  {\n  559      return handle->DetectOS(results) ? TRUE : FALSE;\n  560  }\n  561  \n  562: TESS_API void TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  563                                                              int* num_features, int* FeatureOutlineIndex)\n  564  {\n  ...\n  568  TESS_API ROW* TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom)\n  569  {\n  570:     return TessBaseAPI::FindRowForBox(blocks, left, top, right, bottom);\n  571  }\n  572  \n  573: TESS_API void TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  574                                                                 int* unichar_ids, float* ratings, int* num_matches_returned)\n  575  {\n  ...\n  577  }\n  578  \n  579: TESS_API const char* TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id)\n  580  {\n  581      return handle->GetUnichar(unichar_id);\n  582  }\n  583  \n  584: TESS_API const TessDawg* TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i)\n  585  {\n  586      return handle->GetDawg(i);\n  587  }\n  588  \n  589: TESS_API int TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle)\n  590  {\n  591      return handle->NumDawgs();\n  ...\n  594  TESS_API ROW* TESS_CALL TessMakeTessOCRRow(float baseline, float xheight, float descender, float ascender)\n  595  {\n  596:     return TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n  597  }\n  598  \n  599  TESS_API TBLOB* TESS_CALL TessMakeTBLOB(struct Pix* pix)\n  600  {\n  601:     return TessBaseAPI::MakeTBLOB(pix);\n  602  }\n  603  \n  604  TESS_API void TESS_CALL TessNormalizeTBLOB(TBLOB* tblob, ROW* row, BOOL numeric_mode)\n  605  {\n  606:     TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode != FALSE);\n  607  }\n  608  \n  609: TESS_API TessOcrEngineMode TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle)\n  610  {\n  611      return handle->oem();\n  612  }\n  613  \n  614: TESS_API void TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb)\n  615  {\n  616      handle->InitTruthCallback(cb);\n  617  }\n  618  \n  619: TESS_API TessCubeRecoContext* TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle)\n  620  {\n  621      return handle->GetCubeRecoContext();\n  622  }\n  623  \n  624: TESS_API void TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin)\n  625  {\n  626      handle->set_min_orientation_margin(margin);\n  627  }\n  628  \n  629: TESS_API void TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing)\n  630  {\n  631      handle->GetBlockTextOrientations(block_orientation, vertical_writing);\n  632  }\n  633  \n  634: TESS_API BLOCK_LIST* TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle)\n  635  {\n  636      return handle->FindLinesCreateBlockList();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.h:\n   37  typedef tesseract::TessUnlvRenderer TessUnlvRenderer;\n   38  typedef tesseract::TessBoxTextRenderer TessBoxTextRenderer;\n   39: typedef tesseract::TessBaseAPI TessBaseAPI;\n   40  typedef tesseract::PageIterator TessPageIterator;\n   41  typedef tesseract::ResultIterator TessResultIterator;\n   ..\n   63  typedef struct TessUnlvRenderer TessUnlvRenderer;\n   64  typedef struct TessBoxTextRenderer TessBoxTextRenderer;\n   65: typedef struct TessBaseAPI TessBaseAPI;\n   66  typedef struct TessPageIterator TessPageIterator;\n   67  typedef struct TessResultIterator TessResultIterator;\n   ..\n  108                TESS_CALL TessResultRendererNext(TessResultRenderer* renderer);\n  109  TESS_API BOOL TESS_CALL TessResultRendererBeginDocument(TessResultRenderer* renderer, const char* title);\n  110: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api);\n  111: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api);\n  112  TESS_API BOOL TESS_CALL TessResultRendererEndDocument(TessResultRenderer* renderer);\n  113  TESS_API BOOL TESS_CALL TessResultRendererGetOutput(TessResultRenderer* renderer, const char** data, int* data_len);\n  ...\n  120  /* Base API */\n  121  \n  122: TESS_API TessBaseAPI*\n  123:                TESS_CALL TessBaseAPICreate();\n  124: TESS_API void  TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle);\n  125  \n  126: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device);\n  127  \n  128: TESS_API void  TESS_CALL TessBaseAPISetInputName( TessBaseAPI* handle, const char* name);\n  129: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle);\n  130  \n  131: TESS_API void  TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, struct Pix* pix);\n  132: TESS_API struct Pix*  TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle);\n  133  \n  134: TESS_API int   TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle);\n  135: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle);\n  136  \n  137: TESS_API void  TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name);\n  138  \n  139: TESS_API BOOL  TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value);\n  140: TESS_API BOOL  TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value);\n  141  \n  142: TESS_API BOOL  TESS_CALL TessBaseAPIGetIntVariable(   const TessBaseAPI* handle, const char* name, int* value);\n  143: TESS_API BOOL  TESS_CALL TessBaseAPIGetBoolVariable(  const TessBaseAPI* handle, const char* name, BOOL* value);\n  144: TESS_API BOOL  TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value);\n  145  TESS_API const char*\n  146:                TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name);\n  147  \n  148: TESS_API void  TESS_CALL TessBaseAPIPrintVariables(      const TessBaseAPI* handle, FILE* fp);\n  149: TESS_API BOOL  TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename);\n  150  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  151: TESS_API BOOL  TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val);\n  152  #endif\n  153  \n  154  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  155: TESS_API int   TESS_CALL TessBaseAPIInit(TessBaseAPI* handle, const char* datapath, const char* language,\n  156                                           TessOcrEngineMode mode, char** configs, int configs_size,\n  157                                           const STRING* vars_vec, size_t vars_vec_size,\n  158                                           const STRING* vars_values, size_t vars_values_size, BOOL set_only_init_params);\n  159  #endif\n  160: TESS_API int   TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  161                                            char** configs, int configs_size);\n  162: TESS_API int   TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem);\n  163: TESS_API int   TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language);\n  164  \n  165: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode mode, \n  166      char** configs, int configs_size,\n  167      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  169  \n  170  TESS_API const char*\n  171:                TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle);\n  172  TESS_API char**\n  173:                TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle);\n  174  TESS_API char**\n  175:                TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle);\n  176  \n  177: TESS_API int   TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language);\n  178: TESS_API void  TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle);\n  179  \n  180: TESS_API void  TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename);\n  181: TESS_API void  TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename);\n  182  \n  183: TESS_API void  TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode);\n  184  TESS_API TessPageSegMode\n  185:                TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle);\n  186  \n  187: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  188                                           int bytes_per_pixel, int bytes_per_line,\n  189                                           int left, int top, int width, int height);\n  190  \n  191: TESS_API void  TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle);\n  192  \n  193: TESS_API void  TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  194                                               int bytes_per_pixel, int bytes_per_line);\n  195: TESS_API void  TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix);\n  196  \n  197: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi);\n  198  \n  199: TESS_API void  TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height);\n  200  \n  201  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  202: TESS_API void  TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder);\n  203  #endif\n  204  \n  205  TESS_API struct Pix*\n  206:                TESS_CALL TessBaseAPIGetThresholdedImage(   TessBaseAPI* handle);\n  207  TESS_API struct Boxa*\n  208:                TESS_CALL TessBaseAPIGetRegions(            TessBaseAPI* handle, struct Pixa** pixa);\n  209  TESS_API struct Boxa*\n  210:                TESS_CALL TessBaseAPIGetTextlines(          TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  211  TESS_API struct Boxa*\n  212:                TESS_CALL TessBaseAPIGetTextlines1(         TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  213                                                                                  struct Pixa** pixa, int** blockids, int** paraids);\n  214  TESS_API struct Boxa*\n  215:                TESS_CALL TessBaseAPIGetStrips(             TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  216  TESS_API struct Boxa*\n  217:                TESS_CALL TessBaseAPIGetWords(              TessBaseAPI* handle, struct Pixa** pixa);\n  218  TESS_API struct Boxa*\n  219:                TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc);\n  220  TESS_API struct Boxa*\n  221:                TESS_CALL TessBaseAPIGetComponentImages(    TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  222                                                             struct Pixa** pixa, int** blockids);\n  223  TESS_API struct Boxa*\n  224:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  225                                                             const BOOL raw_image, const int raw_padding,\n  226                                                             struct Pixa** pixa, int** blockids, int** paraids);\n  227  \n  228: TESS_API int   TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle);\n  229  \n  230: TESS_API void  TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename);\n  231  \n  232  TESS_API TessPageIterator*\n  233:                TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle);\n  234  \n  235: TESS_API int   TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  236: TESS_API int   TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  237: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  238                                                   int timeout_millisec);\n  239: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle,  const char* filename, const char* retry_config,\n  240                                                   int timeout_millisec, TessResultRenderer* renderer);\n  241: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  242                                                  const char* retry_config, int timeout_millisec);\n  243: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  244                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer);\n  245  \n  246  TESS_API TessResultIterator*\n  247:                TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle);\n  248  TESS_API TessMutableIterator*\n  249:                TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle);\n  250  \n  251: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle);\n  252: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number);\n  253: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number);\n  254: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle);\n  255: TESS_API int   TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle);\n  256: TESS_API int*  TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle);\n  257: TESS_API BOOL  TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr);\n  258  \n  259: TESS_API void  TESS_CALL TessBaseAPIClear(TessBaseAPI* handle);\n  260: TESS_API void  TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle);\n  261  \n  262: TESS_API int   TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word);\n  263: TESS_API BOOL  TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope);\n  264  \n  265  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  266: TESS_API void  TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f);\n  267: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle);\n  268: TESS_API void  TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f);\n  269  \n  270: TESS_API void  TESS_CALL TessBaseAPISetFillLatticeFunc(TessBaseAPI* handle, TessFillLatticeFunc f);\n  271: TESS_API BOOL  TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results);\n  272  \n  273: TESS_API void  TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  274                                                         int* num_features, int* FeatureOutlineIndex);\n  275  \n  276  TESS_API ROW*  TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom);\n  277: TESS_API void  TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  278                                                            int* unichar_ids, float* ratings, int* num_matches_returned);\n  279  #endif\n  280  \n  281  TESS_API const char*\n  282:                TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id);\n  283  \n  284  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  285  TESS_API const TessDawg*\n  286:                TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i);\n  287: TESS_API int   TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle);\n  288  #endif\n  289  \n  ...\n  295  \n  296  TESS_API TessOcrEngineMode\n  297:                TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle);\n  298: TESS_API void  TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb);\n  299  \n  300  TESS_API TessCubeRecoContext*\n  301:                TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle);\n  302  #endif\n  303  \n  304: TESS_API void  TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin);\n  305  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  306: TESS_API void  TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing);\n  307  \n  308  TESS_API BLOCK_LIST*\n  309:                TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle);\n  310  #endif\n  311  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\pdfrenderer.cpp:\n   65  }\n   66  \n   67: char* TessPDFRenderer::GetPDFTextObjects(TessBaseAPI* api,\n   68                                           double width, double height,\n   69                                           int page_number) {\n   ..\n  595  \n  596  \n  597: bool TessPDFRenderer::AddImageHandler(TessBaseAPI* api) {\n  598    char buf[kBasicBufSize];\n  599    Pix *pix = api->GetInputImage();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.cpp:\n   60  }\n   61  \n   62: bool TessResultRenderer::AddImage(TessBaseAPI* api) {\n   63    ++imagenum_;\n   64    bool ok = AddImageHandler(api);\n   ..\n   69  }\n   70  \n   71: bool TessResultRenderer::AddError(TessBaseAPI* api) {\n   72    ++imagenum_;\n   73    bool ok = AddErrorHandler(api);\n   ..\n  128  }\n  129  \n  130: bool TessResultRenderer::AddErrorHandler(TessBaseAPI* api) {\n  131    return true;\n  132  }\n  ...\n  144  }\n  145  \n  146: bool TessTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  147    char* utf8 = api->GetUTF8Text();\n  148    if (utf8 == NULL) {\n  ...\n  189  }\n  190  \n  191: bool TessHOcrRenderer::AddImageHandler(TessBaseAPI* api) {\n  192    char* hocr = api->GetHOCRText(imagenum());\n  193    if (hocr == NULL) return false;\n  ...\n  206  }\n  207  \n  208: bool TessUnlvRenderer::AddImageHandler(TessBaseAPI* api) {\n  209    char* unlv = api->GetUNLVText();\n  210    if (unlv == NULL) return false;\n  ...\n  223  }\n  224  \n  225: bool TessBoxTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  226    char* text = api->GetBoxText(imagenum());\n  227    if (text == NULL) return false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.h:\n    1  ///////////////////////////////////////////////////////////////////////\n    2  // File:        renderer.h\n    3: // Description: Rendering interface to inject into TessBaseAPI\n    4  //\n    5  // (C) Copyright 2011, Google Inc.\n    .\n   28  namespace tesseract {\n   29  \n   30: class TessBaseAPI;\n   31  \n   32  /**\n   ..\n   38   * For simplicity implementing this with tesesract version 3.01,\n   39   * the renderer contains document state that is cleared from document\n   40:  * to document just as the TessBaseAPI is. This way the base API can just\n   41   * delegate its rendering functionality to injected renderers, and the\n   42   * renderers can manage the associated state needed for the specific formats\n   ..\n   66       *\n   67       * Note that this API is a bit weird but is designed to fit into the\n   68:      * current TessBaseAPI implementation where the api has lots of state\n   69       * information that we might want to add in.\n   70       */\n   71:     bool AddImage(TessBaseAPI* api);\n   72  \n   73      /**\n   74       * Called to inform the renderer when tesseract failed on an image.\n   75       */\n   76:     bool AddError(TessBaseAPI* api);\n   77  \n   78      /**\n   ..\n  116  \n  117      // This must be overriden to render the OCR'd results\n  118:     virtual bool AddImageHandler(TessBaseAPI* api) = 0;\n  119  \n  120      // The default handler ignores the error and just returns true\n  121:     virtual bool AddErrorHandler(TessBaseAPI* api);\n  122  \n  123      // Hook for specialized handling in EndDocument()\n  ...\n  165  \n  166   protected:\n  167:   virtual bool AddImageHandler(TessBaseAPI* api);\n  168  };\n  169  \n  ...\n  177  protected:\n  178    virtual bool BeginDocumentHandler();\n  179:   virtual bool AddImageHandler(TessBaseAPI* api);\n  180    virtual bool EndDocumentHandler();\n  181  };\n  ...\n  190  protected:\n  191    virtual bool BeginDocumentHandler();\n  192:   virtual bool AddImageHandler(TessBaseAPI* api);\n  193    virtual bool EndDocumentHandler();\n  194  \n  ...\n  208    void AppendPDFObject(const char *data);\n  209    // Create the /Contents object for an entire page.\n  210:   static char* GetPDFTextObjects(TessBaseAPI* api,\n  211                                   double width, double height,\n  212                                   int page_number);\n  ...\n  228  \n  229   protected:\n  230:   virtual bool AddImageHandler(TessBaseAPI* api);\n  231  };\n  232  \n  ...\n  239  \n  240   protected:\n  241:   virtual bool AddImageHandler(TessBaseAPI* api);\n  242  };\n  243  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\tesseractmain.cpp:\n   48      char *versionStrP;\n   49  \n   50:     fprintf(stderr, \"tesseract %s\\n\", tesseract::TessBaseAPI::Version());\n   51  \n   52      versionStrP = getLeptonicaVersion();\n   ..\n  162    if (output != NULL && strcmp(output, \"-\") && strcmp(output, \"stdout\")) {\n  163      tprintf(\"Tesseract Open Source OCR Engine v%s with Leptonica\\n\",\n  164:            tesseract::TessBaseAPI::Version());\n  165    }\n  166    PERF_COUNT_START(\"Tesseract:main\")\n  167:   tesseract::TessBaseAPI api;\n  168  \n  169    api.SetOutputName(output);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.cpp:\n  152  // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  153  // the iterator itself, ie rendered invalid by various members of\n  154: // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  155  // Pointsize is returned in printers points (1/72 inch.)\n  156  const char* LTRResultIterator::WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.h:\n   36  // of the page hierarchy, without including any tesseract headers or having\n   37  // to handle any tesseract structures.\n   38: // WARNING! This class points to data held within the TessBaseAPI class, and\n   39: // therefore can only be used while the TessBaseAPI class still exists and\n   40  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   41  // DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   52    // original image (in top-left-origin coordinates) and therefore the top-left\n   53    // needs to be added to any output boxes in order to specify coordinates\n   54:   // in the original image. See TessBaseAPI::SetRectangle.\n   55    // The scale and scaled_yres are in case the Thresholder scaled the image\n   56    // rectangle prior to thresholding. Any coordinates in tesseract's image\n   ..\n  100    // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  101    // the iterator itself, ie rendered invalid by various members of\n  102:   // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  103    // Pointsize is returned in printers points (1/72 inch.)\n  104    const char* WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\mutableiterator.h:\n   33  // of the page hierarchy, without including any tesseract headers or having\n   34  // to handle any tesseract structures.\n   35: // WARNING! This class points to data held within the TessBaseAPI class, and\n   36: // therefore can only be used while the TessBaseAPI class still exists and\n   37  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   38  // DetectOS, or anything else that changes the internal PAGE_RES.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\pageiterator.h:\n   41   * levels of the page hierarchy, without including any tesseract headers or\n   42   * having to handle any tesseract structures.\n   43:  * WARNING! This class points to data held within the TessBaseAPI class, and\n   44:  * therefore can only be used while the TessBaseAPI class still exists and\n   45   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   46   * DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   58     * original image (in top-left-origin coordinates) and therefore the top-left\n   59     * needs to be added to any output boxes in order to specify coordinates\n   60:    * in the original image. See TessBaseAPI::SetRectangle.\n   61     * The scale and scaled_yres are in case the Thresholder scaled the image\n   62     * rectangle prior to thresholding. Any coordinates in tesseract's image\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\tesseractclass.h:\n   78  // Other important classes:\n   79  //\n   80: //  TessBaseAPI (api/baseapi.h)\n   81  //                                 Members include: BLOCK_LIST*, PAGE_RES*,\n   82  //                                 Tesseract*, ImageThresholder*\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ChangeLog:\n   56    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   57    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   58:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   59    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   60    * Auto orientation and script detection added to page layout analysis.\n   ..\n   77  2010-09-21 - V3.00\n   78    * Preparations for thread safety:\n   79:      * Changed TessBaseAPI methods to be non-static\n   80       * Created a class hierarchy for the directories to hold instance data,\n   81         and began moving code into the classes.\n   ..\n  160            Improved Init/End to make them safe.\n  161            Reduced memory use of dictionaries.\n  162:           Added some new APIs to TessBaseAPI.\n  163  April 21 2008 - V2.02 (again)\n  164            Fixed namespace collisions with jpeg library (INT32).\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\contrib\\tesseract-c_api-demo.py:\n   63  	exit(2)\n   64  \n   65: api = tesseract.TessBaseAPICreate()\n   66: rc = tesseract.TessBaseAPIInit3(api, TESSDATA_PREFIX, lang);\n   67  if (rc):\n   68: 	tesseract.TessBaseAPIDelete(api)\n   69  	print(\"Could not initialize tesseract.\\n\")\n   70  	exit(3)\n   71  \n   72: text_out = tesseract.TessBaseAPIProcessPages(api, filename, None , 0);\n   73  result_text = ctypes.string_at(text_out)\n   74  print result_text\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ReleaseNotes:\n   18    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   19    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   20:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   21    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   22    * Auto orientation and script detection added to page layout analysis.\n   ..\n   39  Tesseract release notes Sep 30 2010 - V3.00\n   40    * Preparations for thread safety:\n   41:      * Changed TessBaseAPI methods to be non-static\n   42       * Created a class hierarchy for the directories to hold instance data,\n   43         and began moving code into the classes.\n   ..\n   84  Improved Init/End to make them safe.\n   85  Reduced memory use of dictionaries.\n   86: Added some new APIs to TessBaseAPI.\n   87  Fixed namespace collisions with jpeg library (INT32).\n   88  Portability fixes for Windows for new code.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ambiguous_words.cpp:\n   51  \n   52    // Initialize Tesseract.\n   53:   tesseract::TessBaseAPI api;\n   54    GenericVector<STRING> vars_vec;\n   55    GenericVector<STRING> vars_values;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\classifier_tester.cpp:\n   48      const char* classifer_name, const UNICHARSET& unicharset,\n   49      int argc, char **argv,\n   50:     tesseract::TessBaseAPI** api) {\n   51    // Decode the classifier string.\n   52    ClassifierName classifier = CN_COUNT;\n   ..\n   63  \n   64    // We need to initialize tesseract to test.\n   65:   *api = new tesseract::TessBaseAPI;\n   66    tesseract::OcrEngineMode engine_mode = tesseract::OEM_TESSERACT_ONLY;\n   67    if (classifier == CN_CUBE || classifier == CN_CUBETESS)\n   ..\n  135    tesseract::MasterTrainer* trainer = tesseract::LoadTrainingData(\n  136        argc, argv, false, NULL, &file_prefix);\n  137:   tesseract::TessBaseAPI* api;\n  138    // Decode the classifier string.\n  139    tesseract::ShapeClassifier* shape_classifier = InitializeClassifier(\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\tessbaseapi.cpp:\n   26  \n   27  struct native_data_t {\n   28:   tesseract::TessBaseAPI api;\n   29    PIX *pix;\n   30    void *data;\n   ..\n   57  }\n   58  \n   59: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClassInit(JNIEnv* env, \n   60                                                                         jclass clazz) {\n   61  \n   ..\n   63  }\n   64  \n   65: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeConstruct(JNIEnv* env,\n   66                                                                         jobject object) {\n   67  \n   ..\n   76  }\n   77  \n   78: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeFinalize(JNIEnv* env,\n   79                                                                        jobject object) {\n   80  \n   ..\n   95  }\n   96  \n   97: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInit(JNIEnv *env,\n   98                                                                        jobject thiz,\n   99                                                                        jstring dir,\n  ...\n  120  }\n  121  \n  122: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInitOem(JNIEnv *env, \n  123                                                                           jobject thiz,\n  124                                                                           jstring dir, \n  ...\n  146  }\n  147  \n  148: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetInitLanguagesAsString(JNIEnv *env,\n  149                                                                                           jobject thiz) {\n  150  \n  ...\n  159  \n  160  \n  161: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImageBytes(JNIEnv *env,\n  162                                                                             jobject thiz,\n  163                                                                             jbyteArray data,\n  ...\n  193  }\n  194  \n  195: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImagePix(JNIEnv *env,\n  196                                                                           jobject thiz,\n  197                                                                           jint nativePix) {\n  ...\n  214  }\n  215  \n  216: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetRectangle(JNIEnv *env,\n  217                                                                            jobject thiz,\n  218                                                                            jint left,\n  ...\n  226  }\n  227  \n  228: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetUTF8Text(JNIEnv *env,\n  229                                                                              jobject thiz) {\n  230  \n  ...\n  240  }\n  241  \n  242: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeStop(JNIEnv *env, \n  243                                                                    jobject thiz) {\n  244  \n  ...\n  248  }\n  249  \n  250: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeMeanConfidence(JNIEnv *env,\n  251                                                                              jobject thiz) {\n  252  \n  ...\n  256  }\n  257  \n  258: jintArray Java_com_googlecode_tesseract_android_TessBaseAPI_nativeWordConfidences(JNIEnv *env,\n  259                                                                                    jobject thiz) {\n  260  \n  ...\n  285  }\n  286  \n  287: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetVariable(JNIEnv *env,\n  288                                                                               jobject thiz,\n  289                                                                               jstring var,\n  ...\n  303  }\n  304  \n  305: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClear(JNIEnv *env,\n  306                                                                     jobject thiz) {\n  307  \n  ...\n  324  }\n  325  \n  326: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeEnd(JNIEnv *env,\n  327                                                                   jobject thiz) {\n  328  \n  ...\n  342  }\n  343  \n  344: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetDebug(JNIEnv *env,\n  345                                                                        jobject thiz,\n  346                                                                        jboolean debug) {\n  ...\n  351  }\n  352  \n  353: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetPageSegMode(JNIEnv *env,\n  354                                                                              jobject thiz,\n  355                                                                              jint mode) {\n  ...\n  360  }\n  361  \n  362: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetRegions(JNIEnv *env,\n  363                                                                          jobject thiz) {\n  364  \n  ...\n  374  }\n  375  \n  376: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetTextlines(JNIEnv *env,\n  377                                                                            jobject thiz) {\n  378  \n  ...\n  388  }\n  389  \n  390: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetStrips(JNIEnv *env,\n  391                                                                         jobject thiz) {\n  392  \n  ...\n  402  }\n  403  \n  404: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetWords(JNIEnv *env,\n  405                                                                        jobject thiz) {\n  406  \n  ...\n  416  }\n  417  \n  418: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetResultIterator(JNIEnv *env,\n  419      jobject thiz) {\n  420    native_data_t *nat = get_native_data(env, thiz);\n  ...\n  423  }\n  424  \n  425: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetHOCRText(JNIEnv *env,\n  426                                                                              jobject thiz, jint page) {\n  427  \n  ...\n  437  }\n  438  \n  439: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetBoxText(JNIEnv *env,\n  440                                                                             jobject thiz, jint page) {\n  441  \n  ...\n  451  }\n  452  \n  453: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetInputName(JNIEnv *env,\n  454                                                                            jobject thiz,\n  455                                                                            jstring name) {\n  ...\n  460  }\n  461  \n  462: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetOutputName(JNIEnv *env,\n  463                                                                             jobject thiz,\n  464                                                                             jstring name) {\n  ...\n  469  }\n  470  \n  471: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeReadConfigFile(JNIEnv *env,\n  472                                                                              jobject thiz,\n  473                                                                              jstring fileName) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\PageIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  public class PageIterator {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\ResultIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  /**\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\TessBaseAPI.java:\n   35   * @author alanv@google.com (Alan Viverette)\n   36   */\n   37: public class TessBaseAPI {\n   38      /**\n   39       * Used by the native implementation of the class.\n   ..\n  137      \n  138      /**\n  139:      * Constructs an instance of TessBaseAPI.\n  140       */\n  141:     public TessBaseAPI() {\n  142          nativeConstruct();\n  143      }\n  ...\n  156  \n  157        try {\n  158:         Log.d(\"TessBaseAPI.java\", \"finalize(): NOT calling nativeFinalize() due to premature garbage collection\");\n  159          //nativeFinalize();\n  160        } finally {\n  161:         Log.d(\"TessBaseAPI.java\", \"finalize(): calling super.finalize()\");\n  162          super.finalize();\n  163        }\n  ...\n  170       * Instances are now mostly thread-safe and totally independent, but some\n  171       * global parameters remain. Basically it is safe to use multiple\n  172:      * TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable\n  173       * on some of the Params in classify and textord. If you do, then the effect\n  174       * will be to change it for all your instances.\n  ...\n  266      /**\n  267       * Closes down tesseract and free up all memory. End() is equivalent to\n  268:      * destructing and reconstructing your TessBaseAPI.\n  269       * <p>\n  270       * Once End() has been used, none of the other API functions may be used\n\n601 matches across 26 files\n\n\nSearching 1857 files for \"TessBaseAPI\"\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrTaskProcessor.java:\n   35  import com.googlecode.leptonica.android.Scale;\n   36  import com.googlecode.leptonica.android.WriteFile;\n   37: import com.googlecode.tesseract.android.TessBaseAPI;\n   38  \n   39  import java.io.File;\n   ..\n   50  \n   51      /** The wrapper for the native Tesseract instance. */\n   52:     private final TessBaseAPI mTessBaseAPI;\n   53  \n   54      /** The wrapper for the native Hydrogen instance. */\n   ..\n   78  \n   79          mHandler = new Handler();\n   80:         mTessBaseAPI = new TessBaseAPI();\n   81          mTextDetector = new HydrogenTextDetector();\n   82          mTaskQueue = new LinkedList<OcrTask>();\n   ..\n  166          abort();\n  167  \n  168:         mTessBaseAPI.end();\n  169      }\n  170  \n  ...\n  314                      .getPageSegMode();\n  315  \n  316:             mTessBaseAPI.init(mDatapath.getAbsolutePath() + \"/\", language);\n  317:             mTessBaseAPI.setDebug(debug);\n  318:             mTessBaseAPI.setPageSegMode(pageSegMode);\n  319  \n  320              for (String key : params.getVariableKeys()) {\n  321                  String value = params.getVariable(key);\n  322:                 mTessBaseAPI.setVariable(key, value);\n  323              }\n  324          }\n  ...\n  428              }\n  429  \n  430:             mTessBaseAPI.setImage(pix);\n  431:             String string = mTessBaseAPI.getUTF8Text();\n  432:             int[] confidences = mTessBaseAPI.wordConfidences();\n  433:             mTessBaseAPI.clear();\n  434  \n  435              pix.recycle();\n  ...\n  532  \n  533          private void cleanupOcrLibrary() {\n  534:             mTessBaseAPI.clear();\n  535          }\n  536      }\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\opticflow\\OcrQueue.java:\n   21  \n   22  import com.googlecode.eyesfree.opticflow.TextTrackerProcessor.TrackedRect;\n   23: import com.googlecode.tesseract.android.TessBaseAPI;\n   24  \n   25  import java.util.Collection;\n   ..\n   35      private static final String DEFAULT_WHITELIST = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/:=.@,!-'%()$&?*\";\n   36  \n   37:     private final TessBaseAPI mOcrAPI;\n   38      private final LinkedList<TrackedRect> mRectQueue;\n   39      private final String mTessdata;\n   ..\n   56          mLanguage = language;\n   57          mRectQueue = new LinkedList<TrackedRect>();\n   58:         mOcrAPI = new TessBaseAPI();\n   59      }\n   60  \n   ..\n   75  \n   76          if (success) {\n   77:             mOcrAPI.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n   78:             mOcrAPI.setVariable(TessBaseAPI.VAR_CHAR_WHITELIST, DEFAULT_WHITELIST);\n   79  \n   80              mInitialized = true;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two-test\\src\\com\\googlecode\\tesseract\\android\\test\\TessBaseAPITest.java:\n   19  import com.googlecode.leptonica.android.Pixa;\n   20  import com.googlecode.tesseract.android.ResultIterator;\n   21: import com.googlecode.tesseract.android.TessBaseAPI;\n   22: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   23  \n   24  import android.graphics.Bitmap;\n   ..\n   34  import junit.framework.TestCase;\n   35  \n   36: public class TessBaseAPITest extends TestCase {\n   37      private static final String TESSBASE_PATH = \"/mnt/sdcard/tesseract/\";\n   38      private static final String DEFAULT_LANGUAGE = \"eng\";\n   ..\n   47  \n   48          // Attempt to initialize the API.\n   49:         final TessBaseAPI baseApi = new TessBaseAPI();\n   50          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   51  \n   ..\n   61  \n   62          // Attempt to initialize the API.\n   63:         final TessBaseAPI baseApi = new TessBaseAPI();\n   64          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n   65  \n   ..\n   99  \n  100          // Attempt to initialize the API.\n  101:         final TessBaseAPI baseApi = new TessBaseAPI();\n  102          baseApi.init(TESSBASE_PATH, DEFAULT_LANGUAGE);\n  103:         baseApi.setPageSegMode(TessBaseAPI.PageSegMode.PSM_SINGLE_LINE);\n  104          baseApi.setImage(bmp);\n  105  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\Android.mk:\n   62    pageiterator.cpp \\\n   63    resultiterator.cpp \\\n   64:   tessbaseapi.cpp\n   65  \n   66  LOCAL_C_INCLUDES += \\\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.cpp:\n  103  const int kMaxCredibleResolution = 2400;\n  104  \n  105: TessBaseAPI::TessBaseAPI()\n  106    : tesseract_(NULL),\n  107      osd_tesseract_(NULL),\n  ...\n  126  }\n  127  \n  128: TessBaseAPI::~TessBaseAPI() {\n  129    End();\n  130  }\n  ...\n  133   * Returns the version identifier as a static string. Do not delete.\n  134   */\n  135: const char* TessBaseAPI::Version() {\n  136    return VERSION;\n  137  }\n  ...\n  149  #endif\n  150  #endif\n  151: size_t TessBaseAPI::getOpenCLDevice(void **data) {\n  152  #ifdef USE_OPENCL\n  153  #if USE_DEVICE_SELECTION\n  ...\n  169   * SIGSEGV, SIGFPE, or SIGBUS signal. (Linux/Unix only).\n  170   */\n  171: void TessBaseAPI::CatchSignals() {\n  172  #ifdef __linux__\n  173    struct sigaction action;\n  ...\n  188   * loading a UNLV zone file.\n  189   */\n  190: void TessBaseAPI::SetInputName(const char* name) {\n  191    if (input_file_ == NULL)\n  192      input_file_ = new STRING(name);\n  ...\n  196  \n  197  /** Set the name of the output files. Needed only for debugging. */\n  198: void TessBaseAPI::SetOutputName(const char* name) {\n  199    if (output_file_ == NULL)\n  200      output_file_ = new STRING(name);\n  ...\n  203  }\n  204  \n  205: bool TessBaseAPI::SetVariable(const char* name, const char* value) {\n  206    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  207    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_NON_INIT_ONLY,\n  ...\n  209  }\n  210  \n  211: bool TessBaseAPI::SetDebugVariable(const char* name, const char* value) {\n  212    if (tesseract_ == NULL) tesseract_ = new Tesseract;\n  213    return ParamUtils::SetParam(name, value, SET_PARAM_CONSTRAINT_DEBUG_ONLY,\n  ...\n  215  }\n  216  \n  217: bool TessBaseAPI::GetIntVariable(const char *name, int *value) const {\n  218    IntParam *p = ParamUtils::FindParam<IntParam>(\n  219        name, GlobalParams()->int_params, tesseract_->params()->int_params);\n  ...\n  223  }\n  224  \n  225: bool TessBaseAPI::GetBoolVariable(const char *name, bool *value) const {\n  226    BoolParam *p = ParamUtils::FindParam<BoolParam>(\n  227        name, GlobalParams()->bool_params, tesseract_->params()->bool_params);\n  ...\n  231  }\n  232  \n  233: const char *TessBaseAPI::GetStringVariable(const char *name) const {\n  234    StringParam *p = ParamUtils::FindParam<StringParam>(\n  235        name, GlobalParams()->string_params, tesseract_->params()->string_params);\n  ...\n  237  }\n  238  \n  239: bool TessBaseAPI::GetDoubleVariable(const char *name, double *value) const {\n  240    DoubleParam *p = ParamUtils::FindParam<DoubleParam>(\n  241        name, GlobalParams()->double_params, tesseract_->params()->double_params);\n  ...\n  246  \n  247  /** Get value of named variable as a string, if it exists. */\n  248: bool TessBaseAPI::GetVariableAsString(const char *name, STRING *val) {\n  249    return ParamUtils::GetParamAsString(name, tesseract_->params(), val);\n  250  }\n  251  \n  252  /** Print Tesseract parameters to the given file. */\n  253: void TessBaseAPI::PrintVariables(FILE *fp) const {\n  254    ParamUtils::PrintParams(fp, tesseract_->params());\n  255  }\n  ...\n  263   * @return: 0 on success and -1 on initialization failure.\n  264   */\n  265: int TessBaseAPI::Init(const char* datapath, const char* language,\n  266                        OcrEngineMode oem, char **configs, int configs_size,\n  267                        const GenericVector<STRING> *vars_vec,\n  268                        const GenericVector<STRING> *vars_values,\n  269                        bool set_only_non_debug_params) {\n  270:   PERF_COUNT_START(\"TessBaseAPI::Init\")\n  271    // Default language is \"eng\".\n  272    if (language == NULL) language = \"eng\";\n  ...\n  333   * The returned string should NOT be deleted.\n  334   */\n  335: const char* TessBaseAPI::GetInitLanguagesAsString() const {\n  336    return (language_ == NULL || language_->string() == NULL) ?\n  337        \"\" : language_->string();\n  ...\n  343   * as dependencies of other loaded languages.\n  344   */\n  345: void TessBaseAPI::GetLoadedLanguagesAsVector(\n  346      GenericVector<STRING>* langs) const {\n  347    langs->clear();\n  ...\n  357   * Returns the available languages in the vector of STRINGs.\n  358   */\n  359: void TessBaseAPI::GetAvailableLanguagesAsVector(\n  360      GenericVector<STRING>* langs) const {\n  361    langs->clear();\n  ...\n  409   * in a separate API at some future time.\n  410   */\n  411: int TessBaseAPI::InitLangMod(const char* datapath, const char* language) {\n  412    if (tesseract_ == NULL)\n  413      tesseract_ = new Tesseract;\n  ...\n  421   * AnalysePage. Calls that attempt recognition will generate an error.\n  422   */\n  423: void TessBaseAPI::InitForAnalysePage() {\n  424    if (tesseract_ == NULL) {\n  425      tesseract_ = new Tesseract;\n  ...\n  433   * and also accepts a relative or absolute path name.\n  434   */\n  435: void TessBaseAPI::ReadConfigFile(const char* filename) {\n  436    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_NON_INIT_ONLY);\n  437  }\n  438  \n  439  /** Same as above, but only set debug params from the given config file. */\n  440: void TessBaseAPI::ReadDebugConfigFile(const char* filename) {\n  441    tesseract_->read_config_file(filename, SET_PARAM_CONSTRAINT_DEBUG_ONLY);\n  442  }\n  ...\n  447   * ReadConfigFile or SetVariable(\"tessedit_pageseg_mode\", mode as string).\n  448   */\n  449: void TessBaseAPI::SetPageSegMode(PageSegMode mode) {\n  450    if (tesseract_ == NULL)\n  451      tesseract_ = new Tesseract;\n  ...\n  454  \n  455  /** Return the current page segmentation mode. */\n  456: PageSegMode TessBaseAPI::GetPageSegMode() const {\n  457    if (tesseract_ == NULL)\n  458      return PSM_SINGLE_BLOCK;\n  ...\n  474   * as UTF8 and must be freed with the delete [] operator.\n  475   */\n  476: char* TessBaseAPI::TesseractRect(const unsigned char* imagedata,\n  477                                   int bytes_per_pixel,\n  478                                   int bytes_per_line,\n  ...\n  496   * adaptive data.\n  497   */\n  498: void TessBaseAPI::ClearAdaptiveClassifier() {\n  499    if (tesseract_ == NULL)\n  500      return;\n  ...\n  512   * will automatically perform recognition.\n  513   */\n  514: void TessBaseAPI::SetImage(const unsigned char* imagedata,\n  515                             int width, int height,\n  516                             int bytes_per_pixel, int bytes_per_line) {\n  ...\n  520  }\n  521  \n  522: void TessBaseAPI::SetSourceResolution(int ppi) {\n  523    if (thresholder_)\n  524      thresholder_->SetSourceYResolution(ppi);\n  ...\n  537   * with less copies than an implementation that does not.\n  538   */\n  539: void TessBaseAPI::SetImage(const Pix* pix) {\n  540    if (InternalSetImage())\n  541      thresholder_->SetImage(pix);\n  ...\n  547   * can be recognized with the same image.\n  548   */\n  549: void TessBaseAPI::SetRectangle(int left, int top, int width, int height) {\n  550    if (thresholder_ == NULL)\n  551      return;\n  ...\n  558   * Get a copy of the internal thresholded image from Tesseract.\n  559   */\n  560: Pix* TessBaseAPI::GetThresholdedImage() {\n  561    if (tesseract_ == NULL)\n  562      return NULL;\n  ...\n  571   * Can be called before or after Recognize.\n  572   */\n  573: Boxa* TessBaseAPI::GetRegions(Pixa** pixa) {\n  574    return GetComponentImages(RIL_BLOCK, false, pixa, NULL);\n  575  }\n  ...\n  583   * also returned as an array of one element per line. delete [] after use.\n  584   */\n  585: Boxa* TessBaseAPI::GetTextlines(const bool raw_image, const int raw_padding,\n  586                                  Pixa** pixa, int** blockids, int** paraids) {\n  587    return GetComponentImages(RIL_TEXTLINE, true, raw_image, raw_padding,\n  ...\n  597   * array of one element per line. delete [] after use.\n  598   */\n  599: Boxa* TessBaseAPI::GetStrips(Pixa** pixa, int** blockids) {\n  600    return GetComponentImages(RIL_TEXTLINE, false, pixa, blockids);\n  601  }\n  ...\n  606   * Can be called before or after Recognize.\n  607   */\n  608: Boxa* TessBaseAPI::GetWords(Pixa** pixa) {\n  609    return GetComponentImages(RIL_WORD, true, pixa, NULL);\n  610  }\n  ...\n  616   * Can be called before or after Recognize.\n  617   */\n  618: Boxa* TessBaseAPI::GetConnectedComponents(Pixa** pixa) {\n  619    return GetComponentImages(RIL_SYMBOL, true, pixa, NULL);\n  620  }\n  ...\n  628   * If text_only is true, then only text components are returned.\n  629   */\n  630: Boxa* TessBaseAPI::GetComponentImages(PageIteratorLevel level,\n  631                                        bool text_only, bool raw_image,\n  632                                        const int raw_padding,\n  ...\n  709  }\n  710  \n  711: int TessBaseAPI::GetThresholdedImageScaleFactor() const {\n  712    if (thresholder_ == NULL) {\n  713      return 0;\n  ...\n  717  \n  718  /** Dump the internal binary image to a PGM file. */\n  719: void TessBaseAPI::DumpPGM(const char* filename) {\n  720    if (tesseract_ == NULL)\n  721      return;\n  ...\n  786   * Returns NULL on error or an empty page.\n  787   * The returned iterator must be deleted after use.\n  788:  * WARNING! This class points to data held within the TessBaseAPI class, and\n  789:  * therefore can only be used while the TessBaseAPI class still exists and\n  790   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  791   * DetectOS, or anything else that changes the internal PAGE_RES.\n  792   */\n  793: PageIterator* TessBaseAPI::AnalyseLayout() {\n  794    if (FindLines() == 0) {\n  795      if (block_list_->empty())\n  ...\n  809   * internal structures.\n  810   */\n  811: int TessBaseAPI::Recognize(ETEXT_DESC* monitor) {\n  812    if (tesseract_ == NULL)\n  813      return -1;\n  ...\n  878  \n  879  /** Tests the chopper by exhaustively running chop_one_blob. */\n  880: int TessBaseAPI::RecognizeForChopTest(ETEXT_DESC* monitor) {\n  881    if (tesseract_ == NULL)\n  882      return -1;\n  ...\n  924   * for interactively debugging a bad page.\n  925   */\n  926: bool TessBaseAPI::ProcessPages(const char* filename,\n  927                                 const char* retry_config, int timeout_millisec,\n  928                                 STRING* text_out) {\n  ...\n  948  }\n  949  \n  950: void TessBaseAPI::SetInputImage(Pix *pix) {\n  951    if (input_image_)\n  952      pixDestroy(&input_image_);\n  ...\n  954  }\n  955  \n  956: Pix* TessBaseAPI::GetInputImage() {\n  957    return input_image_;\n  958  }\n  959  \n  960: const char * TessBaseAPI::GetInputName() {\n  961    if (input_file_)\n  962      return input_file_->c_str();\n  ...\n  964  }\n  965  \n  966: const char *  TessBaseAPI::GetDatapath() {\n  967    return tesseract_->datadir.c_str();\n  968  }\n  969  \n  970: int TessBaseAPI::GetSourceYResolution() {\n  971    return thresholder_->GetSourceYResolution();\n  972  }\n  973  \n  974: bool TessBaseAPI::ProcessPages(const char* filename,\n  975                                 const char* retry_config, int timeout_millisec,\n  976                                 TessResultRenderer* renderer) {\n  ...\n 1091   * The text is returned in text_out. Returns false on error.\n 1092   */\n 1093: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1094                                const char* retry_config, int timeout_millisec,\n 1095                                STRING* text_out) {\n ....\n 1127   * The text is returned in renderer. Returns false on error.\n 1128   */\n 1129: bool TessBaseAPI::ProcessPage(Pix* pix, int page_index, const char* filename,\n 1130                                const char* retry_config, int timeout_millisec,\n 1131                                TessResultRenderer* renderer) {\n ....\n 1190   * Recognize. The returned iterator must be deleted after use.\n 1191   */\n 1192: LTRResultIterator* TessBaseAPI::GetLTRIterator() {\n 1193    if (tesseract_ == NULL || page_res_ == NULL)\n 1194      return NULL;\n ....\n 1202   * Get a reading-order iterator to the results of LayoutAnalysis and/or\n 1203   * Recognize. The returned iterator must be deleted after use.\n 1204:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1205:  * therefore can only be used while the TessBaseAPI class still exists and\n 1206   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1207   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1208   */\n 1209: ResultIterator* TessBaseAPI::GetIterator() {\n 1210    if (tesseract_ == NULL || page_res_ == NULL)\n 1211      return NULL;\n ....\n 1219   * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n 1220   * The returned iterator must be deleted after use.\n 1221:  * WARNING! This class points to data held within the TessBaseAPI class, and\n 1222:  * therefore can only be used while the TessBaseAPI class still exists and\n 1223   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n 1224   * DetectOS, or anything else that changes the internal PAGE_RES.\n 1225   */\n 1226: MutableIterator* TessBaseAPI::GetMutableIterator() {\n 1227    if (tesseract_ == NULL || page_res_ == NULL)\n 1228      return NULL;\n ....\n 1234  \n 1235  /** Make a text string from the internal data structures. */\n 1236: char* TessBaseAPI::GetUTF8Text() {\n 1237    if (tesseract_ == NULL ||\n 1238        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1335   * STL removed from original patch submission and refactored by rays.\n 1336   */\n 1337: char* TessBaseAPI::GetHOCRText(int page_number) {\n 1338    if (tesseract_ == NULL ||\n 1339        (page_res_ == NULL && Recognize(NULL) < 0))\n ....\n 1515   * page_number is a 0-base page index that will appear in the box file.\n 1516   */\n 1517: char* TessBaseAPI::GetBoxText(int page_number) {\n 1518    if (tesseract_ == NULL ||\n 1519        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1570   * and must be freed with the delete [] operator.\n 1571   */\n 1572: char* TessBaseAPI::GetUNLVText() {\n 1573    if (tesseract_ == NULL ||\n 1574        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1672  \n 1673  /** Returns the average word confidence for Tesseract page result. */\n 1674: int TessBaseAPI::MeanTextConf() {\n 1675    int* conf = AllWordConfidences();\n 1676    if (!conf) return 0;\n ....\n 1684  \n 1685  /** Returns an array of all word confidences, terminated by -1. */\n 1686: int* TessBaseAPI::AllWordConfidences() {\n 1687    if (tesseract_ == NULL ||\n 1688        (!recognition_done_ && Recognize(NULL) < 0))\n ....\n 1718   * Returns false if adaption was not possible for some reason.\n 1719   */\n 1720: bool TessBaseAPI::AdaptToWordStr(PageSegMode mode, const char* wordstr) {\n 1721    int debug = 0;\n 1722    GetIntVariable(\"applybox_debug\", &debug);\n ....\n 1782   * any Recognize or Get* operation.\n 1783   */\n 1784: void TessBaseAPI::Clear() {\n 1785    if (thresholder_ != NULL)\n 1786      thresholder_->Clear();\n ....\n 1790  /**\n 1791   * Close down tesseract and free up all memory. End() is equivalent to\n 1792:  * destructing and reconstructing your TessBaseAPI.\n 1793   * Once End() has been used, none of the other API functions may be used\n 1794   * other than Init and anything declared above it in the class definition.\n 1795   */\n 1796: void TessBaseAPI::End() {\n 1797    if (thresholder_ != NULL) {\n 1798      delete thresholder_;\n ....\n 1847  // There are a variety of expensive-to-load constant data structures (mostly\n 1848  // language dictionaries) that are cached globally -- surviving the Init()\n 1849: // and End() of individual TessBaseAPI's.  This function allows the clearing\n 1850  // of these caches.\n 1851: void TessBaseAPI::ClearPersistentCache() {\n 1852    Dict::GlobalDawgCache()->DeleteUnusedDawgs();\n 1853  }\n ....\n 1857   * returns 0 if the word is invalid, non-zero if valid\n 1858   */\n 1859: int TessBaseAPI::IsValidWord(const char *word) {\n 1860    return tesseract_->getDict().valid_word(word);\n 1861  }\n ....\n 1864  // TODO(rays) Obsolete this function and replace with a more aptly named\n 1865  // function that returns image coordinates rather than tesseract coordinates.\n 1866: bool TessBaseAPI::GetTextDirection(int* out_offset, float* out_slope) {\n 1867    PageIterator* it = AnalyseLayout();\n 1868    if (it == NULL) {\n ....\n 1897  \n 1898  /** Sets Dict::letter_is_okay_ function to point to the given function. */\n 1899: void TessBaseAPI::SetDictFunc(DictFunc f) {\n 1900    if (tesseract_ != NULL) {\n 1901      tesseract_->getDict().letter_is_okay_ = f;\n ....\n 1907   * function.\n 1908   */\n 1909: void TessBaseAPI::SetProbabilityInContextFunc(ProbabilityInContextFunc f) {\n 1910    if (tesseract_ != NULL) {\n 1911      tesseract_->getDict().probability_in_context_ = f;\n ....\n 1919  \n 1920  /** Sets Wordrec::fill_lattice_ function to point to the given function. */\n 1921: void TessBaseAPI::SetFillLatticeFunc(FillLatticeFunc f) {\n 1922    if (tesseract_ != NULL) tesseract_->fill_lattice_ = f;\n 1923  }\n 1924  \n 1925  /** Common code for setting the image. */\n 1926: bool TessBaseAPI::InternalSetImage() {\n 1927    if (tesseract_ == NULL) {\n 1928      tprintf(\"Please call Init before attempting to send an image.\");\n ....\n 1941   * The usual argument to Threshold is Tesseract::mutable_pix_binary().\n 1942   */\n 1943: void TessBaseAPI::Threshold(Pix** pix) {\n 1944    ASSERT_HOST(pix != NULL);\n 1945    if (*pix != NULL)\n ....\n 1979  \n 1980  /** Find lines from the image making the BLOCK_LIST. */\n 1981: int TessBaseAPI::FindLines() {\n 1982    if (thresholder_ == NULL || thresholder_->IsEmpty()) {\n 1983      tprintf(\"Please call SetImage before attempting recognition.\");\n ....\n 2042  \n 2043  /** Delete the pageres and clear the block list ready for a new page. */\n 2044: void TessBaseAPI::ClearResults() {\n 2045    if (tesseract_ != NULL) {\n 2046      tesseract_->Clear();\n ....\n 2070   * Also return the number of recognized blobs in blob_count.\n 2071   */\n 2072: int TessBaseAPI::TextLength(int* blob_count) {\n 2073    if (tesseract_ == NULL || page_res_ == NULL)\n 2074      return 0;\n ....\n 2100   * Returns true if the image was processed successfully.\n 2101   */\n 2102: bool TessBaseAPI::DetectOS(OSResults* osr) {\n 2103    if (tesseract_ == NULL)\n 2104      return false;\n ....\n 2111  }\n 2112  \n 2113: void TessBaseAPI::set_min_orientation_margin(double margin) {\n 2114    tesseract_->min_orientation_margin.set_value(margin);\n 2115  }\n ....\n 2129   * consistent with GetTextLines().\n 2130   */\n 2131: void TessBaseAPI::GetBlockTextOrientations(int** block_orientation,\n 2132                                             bool** vertical_writing) {\n 2133    delete[] *block_orientation;\n ....\n 2177  \n 2178  /** Find lines from the image making the BLOCK_LIST. */\n 2179: BLOCK_LIST* TessBaseAPI::FindLinesCreateBlockList() {\n 2180    FindLines();\n 2181    BLOCK_LIST* result = block_list_;\n ....\n 2189   * and let go of including the other headers.\n 2190   */\n 2191: void TessBaseAPI::DeleteBlockList(BLOCK_LIST *block_list) {\n 2192    delete block_list;\n 2193  }\n 2194  \n 2195  \n 2196: ROW *TessBaseAPI::MakeTessOCRRow(float baseline,\n 2197                                   float xheight,\n 2198                                   float descender,\n ....\n 2211  \n 2212  /** Creates a TBLOB* from the whole pix. */\n 2213: TBLOB *TessBaseAPI::MakeTBLOB(Pix *pix) {\n 2214    int width = pixGetWidth(pix);\n 2215    int height = pixGetHeight(pix);\n ....\n 2241   * normalization-antidote is returned.\n 2242   */\n 2243: void TessBaseAPI::NormalizeTBLOB(TBLOB *tblob, ROW *row, bool numeric_mode) {\n 2244    TBOX box = tblob->bounding_box();\n 2245    float x_center = (box.left() + box.right()) / 2.0f;\n ....\n 2257                             float descender, float ascender,\n 2258                             bool numeric_mode, Pix* pix) {\n 2259:   TBLOB *tblob = TessBaseAPI::MakeTBLOB(pix);\n 2260  \n 2261    // Normalize TBLOB\n 2262    ROW *row =\n 2263:       TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n 2264:   TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode);\n 2265    delete row;\n 2266    return tblob;\n ....\n 2272   * of a single character.\n 2273   */\n 2274: void TessBaseAPI::AdaptToCharacter(const char *unichar_repr,\n 2275                                     int length,\n 2276                                     float baseline,\n ....\n 2306  \n 2307  \n 2308: PAGE_RES* TessBaseAPI::RecognitionPass1(BLOCK_LIST* block_list) {\n 2309    PAGE_RES *page_res = new PAGE_RES(block_list,\n 2310                                      &(tesseract_->prev_word_best_choice_));\n ....\n 2313  }\n 2314  \n 2315: PAGE_RES* TessBaseAPI::RecognitionPass2(BLOCK_LIST* block_list,\n 2316                                          PAGE_RES* pass1_result) {\n 2317    if (!pass1_result)\n ....\n 2322  }\n 2323  \n 2324: void TessBaseAPI::DetectParagraphs(bool after_text_recognition) {\n 2325    int debug_level = 0;\n 2326    GetIntVariable(\"paragraph_debug_level\", &debug_level);\n ....\n 2408   * and the bounding boxes of the characters.\n 2409   */\n 2410: int TessBaseAPI::TesseractExtractResult(char** text,\n 2411                                          int** lengths,\n 2412                                          float** costs,\n ....\n 2460  // corresponding to each feature in int_features.\n 2461  // TODO(rays) Fix the caller to out outline_counts instead.\n 2462: void TessBaseAPI::GetFeaturesForBlob(TBLOB* blob,\n 2463                                       INT_FEATURE_STRUCT* int_features,\n 2464                                       int* num_features,\n ....\n 2488  // This method returns the row to which a box of specified dimensions would\n 2489  // belong. If no good match is found, it returns NULL.\n 2490: ROW* TessBaseAPI::FindRowForBox(BLOCK_LIST* blocks,\n 2491                                  int left, int top, int right, int bottom) {\n 2492    TBOX box(left, bottom, right, top);\n ....\n 2513  \n 2514  /** Method to run adaptive classifier on a blob. */\n 2515: void TessBaseAPI::RunAdaptiveClassifier(TBLOB* blob,\n 2516                                          int num_max_matches,\n 2517                                          int* unichar_ids,\n ....\n 2536  \n 2537  /** This method returns the string form of the specified unichar. */\n 2538: const char* TessBaseAPI::GetUnichar(int unichar_id) {\n 2539    return tesseract_->unicharset.id_to_unichar(unichar_id);\n 2540  }\n 2541  \n 2542  /** Return the pointer to the i-th dawg loaded into tesseract_ object. */\n 2543: const Dawg *TessBaseAPI::GetDawg(int i) const {\n 2544    if (tesseract_ == NULL || i >= NumDawgs()) return NULL;\n 2545    return tesseract_->getDict().GetDawg(i);\n ....\n 2547  \n 2548  /** Return the number of dawgs loaded into tesseract_ object. */\n 2549: int TessBaseAPI::NumDawgs() const {\n 2550    return tesseract_ == NULL ? 0 : tesseract_->getDict().NumDawgs();\n 2551  }\n 2552  \n 2553  /** Return a pointer to underlying CubeRecoContext object if present. */\n 2554: CubeRecoContext *TessBaseAPI::GetCubeRecoContext() const {\n 2555    return (tesseract_ == NULL) ? NULL : tesseract_->GetCubeRecoContext();\n 2556  }\n 2557  \n 2558: TessResultRenderer* TessBaseAPI::NewRenderer() {\n 2559    if (tesseract_->tessedit_create_boxfile\n 2560        || tesseract_->tessedit_make_boxes_from_boxes) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\baseapi.h:\n   98   * include any other Tesseract headers.\n   99   */\n  100: class TESS_API TessBaseAPI {\n  101   public:\n  102:   TessBaseAPI();\n  103:   virtual ~TessBaseAPI();\n  104  \n  105    /**\n  ...\n  187     * Instances are now mostly thread-safe and totally independent,\n  188     * but some global parameters remain. Basically it is safe to use multiple\n  189:    * TessBaseAPIs in different threads in parallel, UNLESS:\n  190     * you use SetVariable on some of the Params in classify and textord.\n  191     * If you do, then the effect will be to change it for all your instances.\n  ...\n  482     * Returns NULL on error.\n  483     * The returned iterator must be deleted after use.\n  484:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  485:    * therefore can only be used while the TessBaseAPI class still exists and\n  486     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  487     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  551     * Get a reading-order iterator to the results of LayoutAnalysis and/or\n  552     * Recognize. The returned iterator must be deleted after use.\n  553:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  554:    * therefore can only be used while the TessBaseAPI class still exists and\n  555     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  556     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  561     * Get a mutable iterator to the results of LayoutAnalysis and/or Recognize.\n  562     * The returned iterator must be deleted after use.\n  563:    * WARNING! This class points to data held within the TessBaseAPI class, and\n  564:    * therefore can only be used while the TessBaseAPI class still exists and\n  565     * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n  566     * DetectOS, or anything else that changes the internal PAGE_RES.\n  ...\n  627    /**\n  628     * Close down tesseract and free up all memory. End() is equivalent to\n  629:    * destructing and reconstructing your TessBaseAPI.\n  630     * Once End() has been used, none of the other API functions may be used\n  631     * other than Init and anything declared above it in the class definition.\n  ...\n  637     * There are a variety of expensive-to-load constant data structures (mostly\n  638     * language dictionaries) that are cached globally -- surviving the Init()\n  639:    * and End() of individual TessBaseAPI's.  This function allows the clearing\n  640     * of these caches.\n  641     **/\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.cpp:\n    8  TESS_API const char* TESS_CALL TessVersion()\n    9  {\n   10:     return TessBaseAPI::Version();\n   11  }\n   12  \n   ..\n   30  TESS_API void TESS_CALL TessDeleteBlockList(BLOCK_LIST* block_list)\n   31  {\n   32:     TessBaseAPI::DeleteBlockList(block_list);\n   33  }\n   34  \n   ..\n   78  }\n   79  \n   80: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api)\n   81  {\n   82      return renderer->AddImage(api);\n   83  }\n   84  \n   85: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api)\n   86  {\n   87      return renderer->AddError(api);\n   ..\n  123  }\n  124  \n  125: TESS_API TessBaseAPI* TESS_CALL TessBaseAPICreate()\n  126  {\n  127:     return new TessBaseAPI;\n  128  }\n  129  \n  130: TESS_API void TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle)\n  131  {\n  132      delete handle;\n  133  }\n  134  \n  135: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device)\n  136  {\n  137      return handle->getOpenCLDevice(device);\n  138  }\n  139  \n  140: TESS_API void TESS_CALL TessBaseAPISetInputName(TessBaseAPI* handle, const char* name)\n  141  {\n  142      handle->SetInputName(name);\n  143  }\n  144  \n  145: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle)\n  146  {\n  147      return handle->GetInputName();\n  148  }\n  149  \n  150: TESS_API void TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, Pix* pix)\n  151  {\n  152      handle->SetInputImage(pix);\n  153  }\n  154  \n  155: TESS_API Pix* TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle)\n  156  {\n  157      return handle->GetInputImage();\n  158  }\n  159  \n  160: TESS_API int TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle)\n  161  {\n  162      return handle->GetSourceYResolution();\n  163  }\n  164  \n  165: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle)\n  166  {\n  167      return handle->GetDatapath();\n  168  }\n  169  \n  170: TESS_API void TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name)\n  171  {\n  172      handle->SetOutputName(name);\n  173  }\n  174  \n  175: TESS_API BOOL TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value)\n  176  {\n  177      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  178  }\n  179  \n  180: TESS_API BOOL TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value)\n  181  {\n  182      return handle->SetVariable(name, value) ? TRUE : FALSE;\n  183  }\n  184  \n  185: TESS_API BOOL TESS_CALL TessBaseAPIGetIntVariable(const TessBaseAPI* handle, const char* name, int* value)\n  186  {\n  187      return handle->GetIntVariable(name, value) ? TRUE : FALSE;\n  188  }\n  189  \n  190: TESS_API BOOL TESS_CALL TessBaseAPIGetBoolVariable(const TessBaseAPI* handle, const char* name, BOOL* value)\n  191  {\n  192      bool boolValue;\n  ...\n  202  }\n  203  \n  204: TESS_API BOOL TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value)\n  205  {\n  206      return handle->GetDoubleVariable(name, value) ? TRUE : FALSE;\n  207  }\n  208  \n  209: TESS_API const char* TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name)\n  210  {\n  211      return handle->GetStringVariable(name);\n  212  }\n  213  \n  214: TESS_API void TESS_CALL TessBaseAPIPrintVariables(const TessBaseAPI* handle, FILE* fp)\n  215  {\n  216      handle->PrintVariables(fp);\n  217  }\n  218  \n  219: TESS_API BOOL TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename)\n  220  {\n  221      FILE* fp = fopen(filename, \"w\");\n  ...\n  229  }\n  230  \n  231: TESS_API BOOL TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val)\n  232  {\n  233      return handle->GetVariableAsString(name, val) ? TRUE : FALSE;\n  234  }\n  235  \n  236: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language,\n  237      TessOcrEngineMode mode, char** configs, int configs_size,\n  238      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  252  \n  253  \n  254: TESS_API int TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  255                                          char** configs, int configs_size)\n  256  {\n  ...\n  258  }\n  259  \n  260: TESS_API int TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem)\n  261  {\n  262      return handle->Init(datapath, language, oem);\n  263  }\n  264  \n  265: TESS_API int TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language)\n  266  {\n  267      return handle->Init(datapath, language);\n  268  }\n  269  \n  270: TESS_API const char* TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle)\n  271  {\n  272      return handle->GetInitLanguagesAsString();\n  273  }\n  274  \n  275: TESS_API char** TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle)\n  276  {\n  277      GenericVector<STRING> languages;\n  ...\n  284  }\n  285  \n  286: TESS_API char** TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle)\n  287  {\n  288      GenericVector<STRING> languages;\n  ...\n  295  }\n  296  \n  297: TESS_API int TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language)\n  298  {\n  299      return handle->InitLangMod(datapath, language);\n  300  }\n  301  \n  302: TESS_API void TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle)\n  303  {\n  304      handle->InitForAnalysePage();\n  305  }\n  306  \n  307: TESS_API void TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename)\n  308  {\n  309      handle->ReadConfigFile(filename);\n  310  }\n  311  \n  312: TESS_API void TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename)\n  313  {\n  314      handle->ReadDebugConfigFile(filename);\n  315  }\n  316  \n  317: TESS_API void TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode)\n  318  {\n  319      handle->SetPageSegMode(mode);\n  320  }\n  321  \n  322: TESS_API TessPageSegMode TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle)\n  323  {\n  324      return handle->GetPageSegMode();\n  325  }\n  326  \n  327: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  328                                                 int bytes_per_pixel, int bytes_per_line,\n  329                                                 int left, int top, int width, int height)\n  ...\n  332  }\n  333  \n  334: TESS_API void TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle)\n  335  {\n  336      handle->ClearAdaptiveClassifier();\n  337  }\n  338  \n  339: TESS_API void TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  340                                                    int bytes_per_pixel, int bytes_per_line)\n  341  {\n  ...\n  343  }\n  344  \n  345: TESS_API void TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix)\n  346  {\n  347      return handle->SetImage(pix);\n  348  }\n  349  \n  350: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi)\n  351  {\n  352      handle->SetSourceResolution(ppi);\n  353  }\n  354  \n  355: TESS_API void TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height)\n  356  {\n  357      handle->SetRectangle(left, top, width, height);\n  358  }\n  359  \n  360: TESS_API void TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder)\n  361  {\n  362      handle->SetThresholder(thresholder);\n  363  }\n  364  \n  365: TESS_API struct Pix* TESS_CALL TessBaseAPIGetThresholdedImage(TessBaseAPI* handle)\n  366  {\n  367      return handle->GetThresholdedImage();\n  368  }\n  369  \n  370: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetRegions(TessBaseAPI* handle, struct Pixa** pixa)\n  371  {\n  372      return handle->GetRegions(pixa);\n  373  }\n  374  \n  375: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  376  {\n  377      return handle->GetTextlines(pixa, blockids);\n  378  }\n  379  \n  380: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetTextlines1(TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  381                                                                    struct Pixa** pixa, int** blockids, int** paraids)\n  382  {\n  ...\n  384  }\n  385  \n  386: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetStrips(TessBaseAPI* handle, struct Pixa** pixa, int** blockids)\n  387  {\n  388      return handle->GetStrips(pixa, blockids);\n  389  }\n  390  \n  391: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetWords(TessBaseAPI* handle, struct Pixa** pixa)\n  392  {\n  393      return handle->GetWords(pixa);\n  394  }\n  395  \n  396: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc)\n  397  {\n  398      return handle->GetConnectedComponents(cc);\n  399  }\n  400  \n  401: TESS_API struct Boxa* TESS_CALL TessBaseAPIGetComponentImages(TessBaseAPI* handle, TessPageIteratorLevel level, BOOL text_only, struct Pixa** pixa, int** blockids)\n  402  {\n  403      return handle->GetComponentImages(level, text_only != FALSE, pixa, blockids);\n  ...\n  405  \n  406  TESS_API struct Boxa*\n  407:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  408                                                             const BOOL raw_image, const int raw_padding,\n  409                                                             struct Pixa** pixa, int** blockids, int** paraids)\n  ...\n  412  }\n  413  \n  414: TESS_API int TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle)\n  415  {\n  416      return handle->GetThresholdedImageScaleFactor();\n  417  }\n  418  \n  419: TESS_API void TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename)\n  420  {\n  421      handle->DumpPGM(filename);\n  422  }\n  423  \n  424: TESS_API TessPageIterator* TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle)\n  425  {\n  426      return handle->AnalyseLayout();\n  427  }\n  428  \n  429: TESS_API int TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  430  {\n  431      return handle->Recognize(monitor);\n  432  }\n  433  \n  434: TESS_API int TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor)\n  435  {\n  436      return handle->RecognizeForChopTest(monitor);\n  437  }\n  438  \n  439: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  440                                                   int timeout_millisec)\n  441  {\n  ...\n  447  }\n  448  \n  449: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  450                                                   int timeout_millisec, TessResultRenderer* renderer)\n  451  {\n  ...\n  456  }\n  457  \n  458: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  459                                                  const char* retry_config, int timeout_millisec)\n  460  {\n  ...\n  466  }\n  467  \n  468: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  469                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer)\n  470  {\n  ...\n  475  }\n  476  \n  477: TESS_API TessResultIterator* TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle)\n  478  {\n  479      return handle->GetIterator();\n  480  }\n  481  \n  482: TESS_API TessMutableIterator* TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle)\n  483  {\n  484      return handle->GetMutableIterator();\n  485  }\n  486  \n  487: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle)\n  488  {\n  489      return handle->GetUTF8Text();\n  490  }\n  491  \n  492: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number)\n  493  {\n  494      return handle->GetHOCRText(page_number);\n  495  }\n  496  \n  497: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number)\n  498  {\n  499      return handle->GetBoxText(page_number);\n  500  }\n  501  \n  502: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle)\n  503  {\n  504      return handle->GetUNLVText();\n  505  }\n  506  \n  507: TESS_API int TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle)\n  508  {\n  509      return handle->MeanTextConf();\n  510  }\n  511  \n  512: TESS_API int* TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle)\n  513  {\n  514      return handle->AllWordConfidences();\n  515  }\n  516  \n  517: TESS_API BOOL TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr)\n  518  {\n  519      return handle->AdaptToWordStr(mode, wordstr) ? TRUE : FALSE;\n  520  }\n  521  \n  522: TESS_API void TESS_CALL TessBaseAPIClear(TessBaseAPI* handle)\n  523  {\n  524      handle->Clear();\n  525  }\n  526  \n  527: TESS_API void TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle)\n  528  {\n  529      handle->End();\n  530  }\n  531  \n  532: TESS_API int TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word)\n  533  {\n  534      return handle->IsValidWord(word);\n  535  }\n  536  \n  537: TESS_API BOOL TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope)\n  538  {\n  539      return handle->GetTextDirection(out_offset, out_slope) ? TRUE : FALSE;\n  540  }\n  541  \n  542: TESS_API void TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f)\n  543  {\n  544      handle->SetDictFunc(f);\n  545  }\n  546  \n  547: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle)\n  548  {\n  549      handle->ClearPersistentCache();\n  550  }\n  551  \n  552: TESS_API void TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f)\n  553  {\n  554      handle->SetProbabilityInContextFunc(f);\n  555  }\n  556  \n  557: TESS_API BOOL TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results)\n  558  {\n  559      return handle->DetectOS(results) ? TRUE : FALSE;\n  560  }\n  561  \n  562: TESS_API void TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  563                                                              int* num_features, int* FeatureOutlineIndex)\n  564  {\n  ...\n  568  TESS_API ROW* TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom)\n  569  {\n  570:     return TessBaseAPI::FindRowForBox(blocks, left, top, right, bottom);\n  571  }\n  572  \n  573: TESS_API void TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  574                                                                 int* unichar_ids, float* ratings, int* num_matches_returned)\n  575  {\n  ...\n  577  }\n  578  \n  579: TESS_API const char* TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id)\n  580  {\n  581      return handle->GetUnichar(unichar_id);\n  582  }\n  583  \n  584: TESS_API const TessDawg* TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i)\n  585  {\n  586      return handle->GetDawg(i);\n  587  }\n  588  \n  589: TESS_API int TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle)\n  590  {\n  591      return handle->NumDawgs();\n  ...\n  594  TESS_API ROW* TESS_CALL TessMakeTessOCRRow(float baseline, float xheight, float descender, float ascender)\n  595  {\n  596:     return TessBaseAPI::MakeTessOCRRow(baseline, xheight, descender, ascender);\n  597  }\n  598  \n  599  TESS_API TBLOB* TESS_CALL TessMakeTBLOB(struct Pix* pix)\n  600  {\n  601:     return TessBaseAPI::MakeTBLOB(pix);\n  602  }\n  603  \n  604  TESS_API void TESS_CALL TessNormalizeTBLOB(TBLOB* tblob, ROW* row, BOOL numeric_mode)\n  605  {\n  606:     TessBaseAPI::NormalizeTBLOB(tblob, row, numeric_mode != FALSE);\n  607  }\n  608  \n  609: TESS_API TessOcrEngineMode TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle)\n  610  {\n  611      return handle->oem();\n  612  }\n  613  \n  614: TESS_API void TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb)\n  615  {\n  616      handle->InitTruthCallback(cb);\n  617  }\n  618  \n  619: TESS_API TessCubeRecoContext* TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle)\n  620  {\n  621      return handle->GetCubeRecoContext();\n  622  }\n  623  \n  624: TESS_API void TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin)\n  625  {\n  626      handle->set_min_orientation_margin(margin);\n  627  }\n  628  \n  629: TESS_API void TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing)\n  630  {\n  631      handle->GetBlockTextOrientations(block_orientation, vertical_writing);\n  632  }\n  633  \n  634: TESS_API BLOCK_LIST* TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle)\n  635  {\n  636      return handle->FindLinesCreateBlockList();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\capi.h:\n   37  typedef tesseract::TessUnlvRenderer TessUnlvRenderer;\n   38  typedef tesseract::TessBoxTextRenderer TessBoxTextRenderer;\n   39: typedef tesseract::TessBaseAPI TessBaseAPI;\n   40  typedef tesseract::PageIterator TessPageIterator;\n   41  typedef tesseract::ResultIterator TessResultIterator;\n   ..\n   63  typedef struct TessUnlvRenderer TessUnlvRenderer;\n   64  typedef struct TessBoxTextRenderer TessBoxTextRenderer;\n   65: typedef struct TessBaseAPI TessBaseAPI;\n   66  typedef struct TessPageIterator TessPageIterator;\n   67  typedef struct TessResultIterator TessResultIterator;\n   ..\n  108                TESS_CALL TessResultRendererNext(TessResultRenderer* renderer);\n  109  TESS_API BOOL TESS_CALL TessResultRendererBeginDocument(TessResultRenderer* renderer, const char* title);\n  110: TESS_API BOOL TESS_CALL TessResultRendererAddImage(TessResultRenderer* renderer, TessBaseAPI* api);\n  111: TESS_API BOOL TESS_CALL TessResultRendererAddError(TessResultRenderer* renderer, TessBaseAPI* api);\n  112  TESS_API BOOL TESS_CALL TessResultRendererEndDocument(TessResultRenderer* renderer);\n  113  TESS_API BOOL TESS_CALL TessResultRendererGetOutput(TessResultRenderer* renderer, const char** data, int* data_len);\n  ...\n  120  /* Base API */\n  121  \n  122: TESS_API TessBaseAPI*\n  123:                TESS_CALL TessBaseAPICreate();\n  124: TESS_API void  TESS_CALL TessBaseAPIDelete(TessBaseAPI* handle);\n  125  \n  126: TESS_API size_t TESS_CALL TessBaseAPIGetOpenCLDevice(TessBaseAPI* handle, void **device);\n  127  \n  128: TESS_API void  TESS_CALL TessBaseAPISetInputName( TessBaseAPI* handle, const char* name);\n  129: TESS_API const char* TESS_CALL TessBaseAPIGetInputName(TessBaseAPI* handle);\n  130  \n  131: TESS_API void  TESS_CALL TessBaseAPISetInputImage(TessBaseAPI* handle, struct Pix* pix);\n  132: TESS_API struct Pix*  TESS_CALL TessBaseAPIGetInputImage(TessBaseAPI* handle);\n  133  \n  134: TESS_API int   TESS_CALL TessBaseAPIGetSourceYResolution(TessBaseAPI* handle);\n  135: TESS_API const char* TESS_CALL TessBaseAPIGetDatapath(TessBaseAPI* handle);\n  136  \n  137: TESS_API void  TESS_CALL TessBaseAPISetOutputName(TessBaseAPI* handle, const char* name);\n  138  \n  139: TESS_API BOOL  TESS_CALL TessBaseAPISetVariable(TessBaseAPI* handle, const char* name, const char* value);\n  140: TESS_API BOOL  TESS_CALL TessBaseAPISetDebugVariable(TessBaseAPI* handle, const char* name, const char* value);\n  141  \n  142: TESS_API BOOL  TESS_CALL TessBaseAPIGetIntVariable(   const TessBaseAPI* handle, const char* name, int* value);\n  143: TESS_API BOOL  TESS_CALL TessBaseAPIGetBoolVariable(  const TessBaseAPI* handle, const char* name, BOOL* value);\n  144: TESS_API BOOL  TESS_CALL TessBaseAPIGetDoubleVariable(const TessBaseAPI* handle, const char* name, double* value);\n  145  TESS_API const char*\n  146:                TESS_CALL TessBaseAPIGetStringVariable(const TessBaseAPI* handle, const char* name);\n  147  \n  148: TESS_API void  TESS_CALL TessBaseAPIPrintVariables(      const TessBaseAPI* handle, FILE* fp);\n  149: TESS_API BOOL  TESS_CALL TessBaseAPIPrintVariablesToFile(const TessBaseAPI* handle, const char* filename);\n  150  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  151: TESS_API BOOL  TESS_CALL TessBaseAPIGetVariableAsString(TessBaseAPI* handle, const char* name, STRING* val);\n  152  #endif\n  153  \n  154  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  155: TESS_API int   TESS_CALL TessBaseAPIInit(TessBaseAPI* handle, const char* datapath, const char* language,\n  156                                           TessOcrEngineMode mode, char** configs, int configs_size,\n  157                                           const STRING* vars_vec, size_t vars_vec_size,\n  158                                           const STRING* vars_values, size_t vars_values_size, BOOL set_only_init_params);\n  159  #endif\n  160: TESS_API int   TESS_CALL TessBaseAPIInit1(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem,\n  161                                            char** configs, int configs_size);\n  162: TESS_API int   TESS_CALL TessBaseAPIInit2(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode oem);\n  163: TESS_API int   TESS_CALL TessBaseAPIInit3(TessBaseAPI* handle, const char* datapath, const char* language);\n  164  \n  165: TESS_API int TESS_CALL TessBaseAPIInit4(TessBaseAPI* handle, const char* datapath, const char* language, TessOcrEngineMode mode, \n  166      char** configs, int configs_size,\n  167      char** vars_vec, char** vars_values, size_t vars_vec_size,\n  ...\n  169  \n  170  TESS_API const char*\n  171:                TESS_CALL TessBaseAPIGetInitLanguagesAsString(const TessBaseAPI* handle);\n  172  TESS_API char**\n  173:                TESS_CALL TessBaseAPIGetLoadedLanguagesAsVector(const TessBaseAPI* handle);\n  174  TESS_API char**\n  175:                TESS_CALL TessBaseAPIGetAvailableLanguagesAsVector(const TessBaseAPI* handle);\n  176  \n  177: TESS_API int   TESS_CALL TessBaseAPIInitLangMod(TessBaseAPI* handle, const char* datapath, const char* language);\n  178: TESS_API void  TESS_CALL TessBaseAPIInitForAnalysePage(TessBaseAPI* handle);\n  179  \n  180: TESS_API void  TESS_CALL TessBaseAPIReadConfigFile(TessBaseAPI* handle, const char* filename);\n  181: TESS_API void  TESS_CALL TessBaseAPIReadDebugConfigFile(TessBaseAPI* handle, const char* filename);\n  182  \n  183: TESS_API void  TESS_CALL TessBaseAPISetPageSegMode(TessBaseAPI* handle, TessPageSegMode mode);\n  184  TESS_API TessPageSegMode\n  185:                TESS_CALL TessBaseAPIGetPageSegMode(const TessBaseAPI* handle);\n  186  \n  187: TESS_API char* TESS_CALL TessBaseAPIRect(TessBaseAPI* handle, const unsigned char* imagedata,\n  188                                           int bytes_per_pixel, int bytes_per_line,\n  189                                           int left, int top, int width, int height);\n  190  \n  191: TESS_API void  TESS_CALL TessBaseAPIClearAdaptiveClassifier(TessBaseAPI* handle);\n  192  \n  193: TESS_API void  TESS_CALL TessBaseAPISetImage(TessBaseAPI* handle, const unsigned char* imagedata, int width, int height,\n  194                                               int bytes_per_pixel, int bytes_per_line);\n  195: TESS_API void  TESS_CALL TessBaseAPISetImage2(TessBaseAPI* handle, const struct Pix* pix);\n  196  \n  197: TESS_API void TESS_CALL TessBaseAPISetSourceResolution(TessBaseAPI* handle, int ppi);\n  198  \n  199: TESS_API void  TESS_CALL TessBaseAPISetRectangle(TessBaseAPI* handle, int left, int top, int width, int height);\n  200  \n  201  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  202: TESS_API void  TESS_CALL TessBaseAPISetThresholder(TessBaseAPI* handle, TessImageThresholder* thresholder);\n  203  #endif\n  204  \n  205  TESS_API struct Pix*\n  206:                TESS_CALL TessBaseAPIGetThresholdedImage(   TessBaseAPI* handle);\n  207  TESS_API struct Boxa*\n  208:                TESS_CALL TessBaseAPIGetRegions(            TessBaseAPI* handle, struct Pixa** pixa);\n  209  TESS_API struct Boxa*\n  210:                TESS_CALL TessBaseAPIGetTextlines(          TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  211  TESS_API struct Boxa*\n  212:                TESS_CALL TessBaseAPIGetTextlines1(         TessBaseAPI* handle, const BOOL raw_image, const int raw_padding,\n  213                                                                                  struct Pixa** pixa, int** blockids, int** paraids);\n  214  TESS_API struct Boxa*\n  215:                TESS_CALL TessBaseAPIGetStrips(             TessBaseAPI* handle, struct Pixa** pixa, int** blockids);\n  216  TESS_API struct Boxa*\n  217:                TESS_CALL TessBaseAPIGetWords(              TessBaseAPI* handle, struct Pixa** pixa);\n  218  TESS_API struct Boxa*\n  219:                TESS_CALL TessBaseAPIGetConnectedComponents(TessBaseAPI* handle, struct Pixa** cc);\n  220  TESS_API struct Boxa*\n  221:                TESS_CALL TessBaseAPIGetComponentImages(    TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  222                                                             struct Pixa** pixa, int** blockids);\n  223  TESS_API struct Boxa*\n  224:                TESS_CALL TessBaseAPIGetComponentImages1(   TessBaseAPI* handle, const TessPageIteratorLevel level, const BOOL text_only,\n  225                                                             const BOOL raw_image, const int raw_padding,\n  226                                                             struct Pixa** pixa, int** blockids, int** paraids);\n  227  \n  228: TESS_API int   TESS_CALL TessBaseAPIGetThresholdedImageScaleFactor(const TessBaseAPI* handle);\n  229  \n  230: TESS_API void  TESS_CALL TessBaseAPIDumpPGM(TessBaseAPI* handle, const char* filename);\n  231  \n  232  TESS_API TessPageIterator*\n  233:                TESS_CALL TessBaseAPIAnalyseLayout(TessBaseAPI* handle);\n  234  \n  235: TESS_API int   TESS_CALL TessBaseAPIRecognize(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  236: TESS_API int   TESS_CALL TessBaseAPIRecognizeForChopTest(TessBaseAPI* handle, ETEXT_DESC* monitor);\n  237: TESS_API char* TESS_CALL TessBaseAPIProcessPages(TessBaseAPI* handle, const char* filename, const char* retry_config,\n  238                                                   int timeout_millisec);\n  239: TESS_API BOOL TessBaseAPIProcessPages1(TessBaseAPI* handle,  const char* filename, const char* retry_config,\n  240                                                   int timeout_millisec, TessResultRenderer* renderer);\n  241: TESS_API char* TESS_CALL TessBaseAPIProcessPage(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  242                                                  const char* retry_config, int timeout_millisec);\n  243: TESS_API BOOL TessBaseAPIProcessPage1(TessBaseAPI* handle, struct Pix* pix, int page_index, const char* filename,\n  244                                        const char* retry_config, int timeout_millisec, TessResultRenderer* renderer);\n  245  \n  246  TESS_API TessResultIterator*\n  247:                TESS_CALL TessBaseAPIGetIterator(TessBaseAPI* handle);\n  248  TESS_API TessMutableIterator*\n  249:                TESS_CALL TessBaseAPIGetMutableIterator(TessBaseAPI* handle);\n  250  \n  251: TESS_API char* TESS_CALL TessBaseAPIGetUTF8Text(TessBaseAPI* handle);\n  252: TESS_API char* TESS_CALL TessBaseAPIGetHOCRText(TessBaseAPI* handle, int page_number);\n  253: TESS_API char* TESS_CALL TessBaseAPIGetBoxText(TessBaseAPI* handle, int page_number);\n  254: TESS_API char* TESS_CALL TessBaseAPIGetUNLVText(TessBaseAPI* handle);\n  255: TESS_API int   TESS_CALL TessBaseAPIMeanTextConf(TessBaseAPI* handle);\n  256: TESS_API int*  TESS_CALL TessBaseAPIAllWordConfidences(TessBaseAPI* handle);\n  257: TESS_API BOOL  TESS_CALL TessBaseAPIAdaptToWordStr(TessBaseAPI* handle, TessPageSegMode mode, const char* wordstr);\n  258  \n  259: TESS_API void  TESS_CALL TessBaseAPIClear(TessBaseAPI* handle);\n  260: TESS_API void  TESS_CALL TessBaseAPIEnd(TessBaseAPI* handle);\n  261  \n  262: TESS_API int   TESS_CALL TessBaseAPIIsValidWord(TessBaseAPI* handle, const char* word);\n  263: TESS_API BOOL  TESS_CALL TessBaseAPIGetTextDirection(TessBaseAPI* handle, int* out_offset, float* out_slope);\n  264  \n  265  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  266: TESS_API void  TESS_CALL TessBaseAPISetDictFunc(TessBaseAPI* handle, TessDictFunc f);\n  267: TESS_API void  TESS_CALL TessBaseAPIClearPersistentCache(TessBaseAPI* handle);\n  268: TESS_API void  TESS_CALL TessBaseAPISetProbabilityInContextFunc(TessBaseAPI* handle, TessProbabilityInContextFunc f);\n  269  \n  270: TESS_API void  TESS_CALL TessBaseAPISetFillLatticeFunc(TessBaseAPI* handle, TessFillLatticeFunc f);\n  271: TESS_API BOOL  TESS_CALL TessBaseAPIDetectOS(TessBaseAPI* handle, OSResults* results);\n  272  \n  273: TESS_API void  TESS_CALL TessBaseAPIGetFeaturesForBlob(TessBaseAPI* handle, TBLOB* blob, INT_FEATURE_STRUCT* int_features,\n  274                                                         int* num_features, int* FeatureOutlineIndex);\n  275  \n  276  TESS_API ROW*  TESS_CALL TessFindRowForBox(BLOCK_LIST* blocks, int left, int top, int right, int bottom);\n  277: TESS_API void  TESS_CALL TessBaseAPIRunAdaptiveClassifier(TessBaseAPI* handle, TBLOB* blob, int num_max_matches,\n  278                                                            int* unichar_ids, float* ratings, int* num_matches_returned);\n  279  #endif\n  280  \n  281  TESS_API const char*\n  282:                TESS_CALL TessBaseAPIGetUnichar(TessBaseAPI* handle, int unichar_id);\n  283  \n  284  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  285  TESS_API const TessDawg*\n  286:                TESS_CALL TessBaseAPIGetDawg(const TessBaseAPI* handle, int i);\n  287: TESS_API int   TESS_CALL TessBaseAPINumDawgs(const TessBaseAPI* handle);\n  288  #endif\n  289  \n  ...\n  295  \n  296  TESS_API TessOcrEngineMode\n  297:                TESS_CALL TessBaseAPIOem(const TessBaseAPI* handle);\n  298: TESS_API void  TESS_CALL TessBaseAPIInitTruthCallback(TessBaseAPI* handle, TessTruthCallback* cb);\n  299  \n  300  TESS_API TessCubeRecoContext*\n  301:                TESS_CALL TessBaseAPIGetCubeRecoContext(const TessBaseAPI* handle);\n  302  #endif\n  303  \n  304: TESS_API void  TESS_CALL TessBaseAPISetMinOrientationMargin(TessBaseAPI* handle, double margin);\n  305  #ifdef TESS_CAPI_INCLUDE_BASEAPI\n  306: TESS_API void  TESS_CALL TessBaseGetBlockTextOrientations(TessBaseAPI* handle, int** block_orientation, bool** vertical_writing);\n  307  \n  308  TESS_API BLOCK_LIST*\n  309:                TESS_CALL TessBaseAPIFindLinesCreateBlockList(TessBaseAPI* handle);\n  310  #endif\n  311  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\pdfrenderer.cpp:\n   65  }\n   66  \n   67: char* TessPDFRenderer::GetPDFTextObjects(TessBaseAPI* api,\n   68                                           double width, double height,\n   69                                           int page_number) {\n   ..\n  595  \n  596  \n  597: bool TessPDFRenderer::AddImageHandler(TessBaseAPI* api) {\n  598    char buf[kBasicBufSize];\n  599    Pix *pix = api->GetInputImage();\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.cpp:\n   60  }\n   61  \n   62: bool TessResultRenderer::AddImage(TessBaseAPI* api) {\n   63    ++imagenum_;\n   64    bool ok = AddImageHandler(api);\n   ..\n   69  }\n   70  \n   71: bool TessResultRenderer::AddError(TessBaseAPI* api) {\n   72    ++imagenum_;\n   73    bool ok = AddErrorHandler(api);\n   ..\n  128  }\n  129  \n  130: bool TessResultRenderer::AddErrorHandler(TessBaseAPI* api) {\n  131    return true;\n  132  }\n  ...\n  144  }\n  145  \n  146: bool TessTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  147    char* utf8 = api->GetUTF8Text();\n  148    if (utf8 == NULL) {\n  ...\n  189  }\n  190  \n  191: bool TessHOcrRenderer::AddImageHandler(TessBaseAPI* api) {\n  192    char* hocr = api->GetHOCRText(imagenum());\n  193    if (hocr == NULL) return false;\n  ...\n  206  }\n  207  \n  208: bool TessUnlvRenderer::AddImageHandler(TessBaseAPI* api) {\n  209    char* unlv = api->GetUNLVText();\n  210    if (unlv == NULL) return false;\n  ...\n  223  }\n  224  \n  225: bool TessBoxTextRenderer::AddImageHandler(TessBaseAPI* api) {\n  226    char* text = api->GetBoxText(imagenum());\n  227    if (text == NULL) return false;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\renderer.h:\n    1  ///////////////////////////////////////////////////////////////////////\n    2  // File:        renderer.h\n    3: // Description: Rendering interface to inject into TessBaseAPI\n    4  //\n    5  // (C) Copyright 2011, Google Inc.\n    .\n   28  namespace tesseract {\n   29  \n   30: class TessBaseAPI;\n   31  \n   32  /**\n   ..\n   38   * For simplicity implementing this with tesesract version 3.01,\n   39   * the renderer contains document state that is cleared from document\n   40:  * to document just as the TessBaseAPI is. This way the base API can just\n   41   * delegate its rendering functionality to injected renderers, and the\n   42   * renderers can manage the associated state needed for the specific formats\n   ..\n   66       *\n   67       * Note that this API is a bit weird but is designed to fit into the\n   68:      * current TessBaseAPI implementation where the api has lots of state\n   69       * information that we might want to add in.\n   70       */\n   71:     bool AddImage(TessBaseAPI* api);\n   72  \n   73      /**\n   74       * Called to inform the renderer when tesseract failed on an image.\n   75       */\n   76:     bool AddError(TessBaseAPI* api);\n   77  \n   78      /**\n   ..\n  116  \n  117      // This must be overriden to render the OCR'd results\n  118:     virtual bool AddImageHandler(TessBaseAPI* api) = 0;\n  119  \n  120      // The default handler ignores the error and just returns true\n  121:     virtual bool AddErrorHandler(TessBaseAPI* api);\n  122  \n  123      // Hook for specialized handling in EndDocument()\n  ...\n  165  \n  166   protected:\n  167:   virtual bool AddImageHandler(TessBaseAPI* api);\n  168  };\n  169  \n  ...\n  177  protected:\n  178    virtual bool BeginDocumentHandler();\n  179:   virtual bool AddImageHandler(TessBaseAPI* api);\n  180    virtual bool EndDocumentHandler();\n  181  };\n  ...\n  190  protected:\n  191    virtual bool BeginDocumentHandler();\n  192:   virtual bool AddImageHandler(TessBaseAPI* api);\n  193    virtual bool EndDocumentHandler();\n  194  \n  ...\n  208    void AppendPDFObject(const char *data);\n  209    // Create the /Contents object for an entire page.\n  210:   static char* GetPDFTextObjects(TessBaseAPI* api,\n  211                                   double width, double height,\n  212                                   int page_number);\n  ...\n  228  \n  229   protected:\n  230:   virtual bool AddImageHandler(TessBaseAPI* api);\n  231  };\n  232  \n  ...\n  239  \n  240   protected:\n  241:   virtual bool AddImageHandler(TessBaseAPI* api);\n  242  };\n  243  \n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\api\\tesseractmain.cpp:\n   48      char *versionStrP;\n   49  \n   50:     fprintf(stderr, \"tesseract %s\\n\", tesseract::TessBaseAPI::Version());\n   51  \n   52      versionStrP = getLeptonicaVersion();\n   ..\n  162    if (output != NULL && strcmp(output, \"-\") && strcmp(output, \"stdout\")) {\n  163      tprintf(\"Tesseract Open Source OCR Engine v%s with Leptonica\\n\",\n  164:            tesseract::TessBaseAPI::Version());\n  165    }\n  166    PERF_COUNT_START(\"Tesseract:main\")\n  167:   tesseract::TessBaseAPI api;\n  168  \n  169    api.SetOutputName(output);\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.cpp:\n  152  // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  153  // the iterator itself, ie rendered invalid by various members of\n  154: // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  155  // Pointsize is returned in printers points (1/72 inch.)\n  156  const char* LTRResultIterator::WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\ltrresultiterator.h:\n   36  // of the page hierarchy, without including any tesseract headers or having\n   37  // to handle any tesseract structures.\n   38: // WARNING! This class points to data held within the TessBaseAPI class, and\n   39: // therefore can only be used while the TessBaseAPI class still exists and\n   40  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   41  // DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   52    // original image (in top-left-origin coordinates) and therefore the top-left\n   53    // needs to be added to any output boxes in order to specify coordinates\n   54:   // in the original image. See TessBaseAPI::SetRectangle.\n   55    // The scale and scaled_yres are in case the Thresholder scaled the image\n   56    // rectangle prior to thresholding. Any coordinates in tesseract's image\n   ..\n  100    // to an internal table and SHOULD NOT BE DELETED. Lifespan is the same as\n  101    // the iterator itself, ie rendered invalid by various members of\n  102:   // TessBaseAPI, including Init, SetImage, End or deleting the TessBaseAPI.\n  103    // Pointsize is returned in printers points (1/72 inch.)\n  104    const char* WordFontAttributes(bool* is_bold,\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\mutableiterator.h:\n   33  // of the page hierarchy, without including any tesseract headers or having\n   34  // to handle any tesseract structures.\n   35: // WARNING! This class points to data held within the TessBaseAPI class, and\n   36: // therefore can only be used while the TessBaseAPI class still exists and\n   37  // has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   38  // DetectOS, or anything else that changes the internal PAGE_RES.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\pageiterator.h:\n   41   * levels of the page hierarchy, without including any tesseract headers or\n   42   * having to handle any tesseract structures.\n   43:  * WARNING! This class points to data held within the TessBaseAPI class, and\n   44:  * therefore can only be used while the TessBaseAPI class still exists and\n   45   * has not been subjected to a call of Init, SetImage, Recognize, Clear, End\n   46   * DetectOS, or anything else that changes the internal PAGE_RES.\n   ..\n   58     * original image (in top-left-origin coordinates) and therefore the top-left\n   59     * needs to be added to any output boxes in order to specify coordinates\n   60:    * in the original image. See TessBaseAPI::SetRectangle.\n   61     * The scale and scaled_yres are in case the Thresholder scaled the image\n   62     * rectangle prior to thresholding. Any coordinates in tesseract's image\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ccmain\\tesseractclass.h:\n   78  // Other important classes:\n   79  //\n   80: //  TessBaseAPI (api/baseapi.h)\n   81  //                                 Members include: BLOCK_LIST*, PAGE_RES*,\n   82  //                                 Tesseract*, ImageThresholder*\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ChangeLog:\n   56    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   57    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   58:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   59    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   60    * Auto orientation and script detection added to page layout analysis.\n   ..\n   77  2010-09-21 - V3.00\n   78    * Preparations for thread safety:\n   79:      * Changed TessBaseAPI methods to be non-static\n   80       * Created a class hierarchy for the directories to hold instance data,\n   81         and began moving code into the classes.\n   ..\n  160            Improved Init/End to make them safe.\n  161            Reduced memory use of dictionaries.\n  162:           Added some new APIs to TessBaseAPI.\n  163  April 21 2008 - V2.02 (again)\n  164            Fixed namespace collisions with jpeg library (INT32).\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\contrib\\tesseract-c_api-demo.py:\n   63  	exit(2)\n   64  \n   65: api = tesseract.TessBaseAPICreate()\n   66: rc = tesseract.TessBaseAPIInit3(api, TESSDATA_PREFIX, lang);\n   67  if (rc):\n   68: 	tesseract.TessBaseAPIDelete(api)\n   69  	print(\"Could not initialize tesseract.\\n\")\n   70  	exit(3)\n   71  \n   72: text_out = tesseract.TessBaseAPIProcessPages(api, filename, None , 0);\n   73  result_text = ctypes.string_at(text_out)\n   74  print result_text\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\ReleaseNotes:\n   18    * `OcrEngineMode` in `Init` replaces `AccuracyVSpeed` to control cube.\n   19    * Greatly improved segmentation search with consequent accuracy and speed improvements, especially for Chinese.\n   20:   * Added `PageIterator` and `ResultIterator` as cleaner ways to get the full results out of Tesseract, that are not currently provided by any of the `TessBaseAPI::Get*` methods. All other methods, such as the `ETEXT_STRUCT` in particular are deprecated and will be deleted in the future.\n   21    * ApplyBoxes totally rewritten to make training easier. It can now cope with touching/overlapping training characters, and a new boxfile format allows word boxes instead of character boxes, BUT to use that you have to have already boostrapped the language with character boxes. \"Cyclic dependency\" on traineddata.\n   22    * Auto orientation and script detection added to page layout analysis.\n   ..\n   39  Tesseract release notes Sep 30 2010 - V3.00\n   40    * Preparations for thread safety:\n   41:      * Changed TessBaseAPI methods to be non-static\n   42       * Created a class hierarchy for the directories to hold instance data,\n   43         and began moving code into the classes.\n   ..\n   84  Improved Init/End to make them safe.\n   85  Reduced memory use of dictionaries.\n   86: Added some new APIs to TessBaseAPI.\n   87  Fixed namespace collisions with jpeg library (INT32).\n   88  Portability fixes for Windows for new code.\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\ambiguous_words.cpp:\n   51  \n   52    // Initialize Tesseract.\n   53:   tesseract::TessBaseAPI api;\n   54    GenericVector<STRING> vars_vec;\n   55    GenericVector<STRING> vars_values;\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\src\\training\\classifier_tester.cpp:\n   48      const char* classifer_name, const UNICHARSET& unicharset,\n   49      int argc, char **argv,\n   50:     tesseract::TessBaseAPI** api) {\n   51    // Decode the classifier string.\n   52    ClassifierName classifier = CN_COUNT;\n   ..\n   63  \n   64    // We need to initialize tesseract to test.\n   65:   *api = new tesseract::TessBaseAPI;\n   66    tesseract::OcrEngineMode engine_mode = tesseract::OEM_TESSERACT_ONLY;\n   67    if (classifier == CN_CUBE || classifier == CN_CUBETESS)\n   ..\n  135    tesseract::MasterTrainer* trainer = tesseract::LoadTrainingData(\n  136        argc, argv, false, NULL, &file_prefix);\n  137:   tesseract::TessBaseAPI* api;\n  138    // Decode the classifier string.\n  139    tesseract::ShapeClassifier* shape_classifier = InitializeClassifier(\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\jni\\com_googlecode_tesseract_android\\tessbaseapi.cpp:\n   26  \n   27  struct native_data_t {\n   28:   tesseract::TessBaseAPI api;\n   29    PIX *pix;\n   30    void *data;\n   ..\n   57  }\n   58  \n   59: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClassInit(JNIEnv* env, \n   60                                                                         jclass clazz) {\n   61  \n   ..\n   63  }\n   64  \n   65: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeConstruct(JNIEnv* env,\n   66                                                                         jobject object) {\n   67  \n   ..\n   76  }\n   77  \n   78: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeFinalize(JNIEnv* env,\n   79                                                                        jobject object) {\n   80  \n   ..\n   95  }\n   96  \n   97: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInit(JNIEnv *env,\n   98                                                                        jobject thiz,\n   99                                                                        jstring dir,\n  ...\n  120  }\n  121  \n  122: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeInitOem(JNIEnv *env, \n  123                                                                           jobject thiz,\n  124                                                                           jstring dir, \n  ...\n  146  }\n  147  \n  148: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetInitLanguagesAsString(JNIEnv *env,\n  149                                                                                           jobject thiz) {\n  150  \n  ...\n  159  \n  160  \n  161: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImageBytes(JNIEnv *env,\n  162                                                                             jobject thiz,\n  163                                                                             jbyteArray data,\n  ...\n  193  }\n  194  \n  195: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetImagePix(JNIEnv *env,\n  196                                                                           jobject thiz,\n  197                                                                           jint nativePix) {\n  ...\n  214  }\n  215  \n  216: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetRectangle(JNIEnv *env,\n  217                                                                            jobject thiz,\n  218                                                                            jint left,\n  ...\n  226  }\n  227  \n  228: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetUTF8Text(JNIEnv *env,\n  229                                                                              jobject thiz) {\n  230  \n  ...\n  240  }\n  241  \n  242: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeStop(JNIEnv *env, \n  243                                                                    jobject thiz) {\n  244  \n  ...\n  248  }\n  249  \n  250: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeMeanConfidence(JNIEnv *env,\n  251                                                                              jobject thiz) {\n  252  \n  ...\n  256  }\n  257  \n  258: jintArray Java_com_googlecode_tesseract_android_TessBaseAPI_nativeWordConfidences(JNIEnv *env,\n  259                                                                                    jobject thiz) {\n  260  \n  ...\n  285  }\n  286  \n  287: jboolean Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetVariable(JNIEnv *env,\n  288                                                                               jobject thiz,\n  289                                                                               jstring var,\n  ...\n  303  }\n  304  \n  305: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeClear(JNIEnv *env,\n  306                                                                     jobject thiz) {\n  307  \n  ...\n  324  }\n  325  \n  326: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeEnd(JNIEnv *env,\n  327                                                                   jobject thiz) {\n  328  \n  ...\n  342  }\n  343  \n  344: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetDebug(JNIEnv *env,\n  345                                                                        jobject thiz,\n  346                                                                        jboolean debug) {\n  ...\n  351  }\n  352  \n  353: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetPageSegMode(JNIEnv *env,\n  354                                                                              jobject thiz,\n  355                                                                              jint mode) {\n  ...\n  360  }\n  361  \n  362: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetRegions(JNIEnv *env,\n  363                                                                          jobject thiz) {\n  364  \n  ...\n  374  }\n  375  \n  376: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetTextlines(JNIEnv *env,\n  377                                                                            jobject thiz) {\n  378  \n  ...\n  388  }\n  389  \n  390: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetStrips(JNIEnv *env,\n  391                                                                         jobject thiz) {\n  392  \n  ...\n  402  }\n  403  \n  404: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetWords(JNIEnv *env,\n  405                                                                        jobject thiz) {\n  406  \n  ...\n  416  }\n  417  \n  418: jint Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetResultIterator(JNIEnv *env,\n  419      jobject thiz) {\n  420    native_data_t *nat = get_native_data(env, thiz);\n  ...\n  423  }\n  424  \n  425: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetHOCRText(JNIEnv *env,\n  426                                                                              jobject thiz, jint page) {\n  427  \n  ...\n  437  }\n  438  \n  439: jstring Java_com_googlecode_tesseract_android_TessBaseAPI_nativeGetBoxText(JNIEnv *env,\n  440                                                                             jobject thiz, jint page) {\n  441  \n  ...\n  451  }\n  452  \n  453: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetInputName(JNIEnv *env,\n  454                                                                            jobject thiz,\n  455                                                                            jstring name) {\n  ...\n  460  }\n  461  \n  462: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeSetOutputName(JNIEnv *env,\n  463                                                                             jobject thiz,\n  464                                                                             jstring name) {\n  ...\n  469  }\n  470  \n  471: void Java_com_googlecode_tesseract_android_TessBaseAPI_nativeReadConfigFile(JNIEnv *env,\n  472                                                                              jobject thiz,\n  473                                                                              jstring fileName) {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\PageIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  public class PageIterator {\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\ResultIterator.java:\n   17  package com.googlecode.tesseract.android;\n   18  \n   19: import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\n   20  \n   21  /**\n\nD:\\dev\\eclipse\\tess-two-master\\tess-two\\src\\com\\googlecode\\tesseract\\android\\TessBaseAPI.java:\n   35   * @author alanv@google.com (Alan Viverette)\n   36   */\n   37: public class TessBaseAPI {\n   38      /**\n   39       * Used by the native implementation of the class.\n   ..\n  137      \n  138      /**\n  139:      * Constructs an instance of TessBaseAPI.\n  140       */\n  141:     public TessBaseAPI() {\n  142          nativeConstruct();\n  143      }\n  ...\n  156  \n  157        try {\n  158:         Log.d(\"TessBaseAPI.java\", \"finalize(): NOT calling nativeFinalize() due to premature garbage collection\");\n  159          //nativeFinalize();\n  160        } finally {\n  161:         Log.d(\"TessBaseAPI.java\", \"finalize(): calling super.finalize()\");\n  162          super.finalize();\n  163        }\n  ...\n  170       * Instances are now mostly thread-safe and totally independent, but some\n  171       * global parameters remain. Basically it is safe to use multiple\n  172:      * TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable\n  173       * on some of the Params in classify and textord. If you do, then the effect\n  174       * will be to change it for all your instances.\n  ...\n  266      /**\n  267       * Closes down tesseract and free up all memory. End() is equivalent to\n  268:      * destructing and reconstructing your TessBaseAPI.\n  269       * <p>\n  270       * Once End() has been used, none of the other API functions may be used\n\n601 matches across 26 files\n\n\nSearching 1857 files for \"OcrTaskProcessor\"\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrService.java:\n   37  import com.googlecode.eyesfree.ocr.client.OcrResult;\n   38  import com.googlecode.eyesfree.ocr.client.Ocr.Parameters;\n   39: import com.googlecode.eyesfree.ocr.service.OcrTaskProcessor.OcrTaskListener;\n   40  \n   41  import java.io.File;\n   ..\n   58      private HashMap<Integer, IOcrCallback> mCallbacksMap;\n   59      private LanguageManager mLanguageManager;\n   60:     private OcrTaskProcessor mOcrTaskProcessor;\n   61  \n   62      @Override\n   ..\n   72          mLanguageManager.loadLanguages();\n   73  \n   74:         mOcrTaskProcessor = new OcrTaskProcessor(mLanguageManager.getDatapath());\n   75:         mOcrTaskProcessor.setListener(mOcrTaskListener);\n   76  \n   77          IntentFilter filter = new IntentFilter();\n   ..\n  130       */\n  131      private boolean cancel(int pid, long token) {\n  132:         return mOcrTaskProcessor.cancel(pid, token);\n  133      }\n  134  \n  ...\n  140       */\n  141      private boolean stop(int pid) {\n  142:         return mOcrTaskProcessor.cancelAll(pid);\n  143      }\n  144  \n  ...\n  177          applyDefaults(params);\n  178  \n  179:         return mOcrTaskProcessor.enqueueData(pid, data, params);\n  180      }\n  181  \n  ...\n  200          applyDefaults(params);\n  201  \n  202:         return mOcrTaskProcessor.enqueueFile(pid, file, params);\n  203      }\n  204  \n  ...\n  311                  mLanguageManager.loadLanguages();\n  312              } else if (Intent.ACTION_MEDIA_EJECT.equals(intent.getAction())) {\n  313:                 mOcrTaskProcessor.abort();\n  314                  Log.i(TAG, \"Preparing for media eject\");\n  315              }\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrTaskProcessor.java:\n   46   * @author alanv@google.com (Alan Viverette)\n   47   */\n   48: public class OcrTaskProcessor {\n   49:     private static final String TAG = \"OcrTaskProcessor\";\n   50  \n   51      /** The wrapper for the native Tesseract instance. */\n   ..\n   74       *            </code> directory.\n   75       */\n   76:     public OcrTaskProcessor(File datapath) {\n   77          mDatapath = datapath;\n   78  \n\n14 matches across 2 files\n\n\nSearching 1857 files for \"LanguageManager\"\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\LanguageManager.java:\n   39   * @author alanv@google.com (Alan Viverette)\n   40   */\n   41: public class LanguageManager {\n   42      private static final String TESSDATA = \"tessdata\";\n   43      private static final String EXTENSION = \".traineddata\";\n   ..\n   52      private WeakReference<Context> mContext;\n   53  \n   54:     public LanguageManager(Context context) {\n   55          mContext = new WeakReference<Context>(context);\n   56          mSupported = new TreeMap<String, Language>();\n\nD:\\dev\\eclipse\\tess-two-master\\eyes-two\\src\\com\\googlecode\\eyesfree\\ocr\\service\\OcrService.java:\n   57      private RemoteCallbackList<IOcrCallback> mCallbacks;\n   58      private HashMap<Integer, IOcrCallback> mCallbacksMap;\n   59:     private LanguageManager mLanguageManager;\n   60      private OcrTaskProcessor mOcrTaskProcessor;\n   61  \n   ..\n   69          mCallbacksMap = new HashMap<Integer, IOcrCallback>();\n   70  \n   71:         mLanguageManager = new LanguageManager(this);\n   72:         mLanguageManager.loadLanguages();\n   73  \n   74:         mOcrTaskProcessor = new OcrTaskProcessor(mLanguageManager.getDatapath());\n   75          mOcrTaskProcessor.setListener(mOcrTaskListener);\n   76  \n   ..\n  249          @Override\n  250          public boolean reloadLanguages() {\n  251:             return mLanguageManager.loadLanguages();\n  252          }\n  253  \n  254          @Override\n  255          public List<Language> getAvailableLanguages() {\n  256:             return mLanguageManager.getAvailable();\n  257          }\n  258  \n  259          @Override\n  260          public String getDatapath() {\n  261:             File datapath = mLanguageManager.getDatapath();\n  262  \n  263              return datapath == null ? null : datapath.getAbsolutePath();\n  ...\n  266          @Override\n  267          public String getTessdata() {\n  268:             File tessdata = mLanguageManager.getTessdata();\n  269  \n  270              return tessdata == null ? null : tessdata.getAbsolutePath();\n  ...\n  309              if (Intent.ACTION_MEDIA_MOUNTED.equals(intent.getAction())\n  310                      || Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {\n  311:                 mLanguageManager.loadLanguages();\n  312              } else if (Intent.ACTION_MEDIA_EJECT.equals(intent.getAction())) {\n  313                  mOcrTaskProcessor.abort();\n\n13 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 338208,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/LanguageManager.java",
			"settings":
			{
				"buffer_size": 4971,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/OcrService.java",
			"settings":
			{
				"buffer_size": 9771,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/src/com/googlecode/tesseract/android/TessBaseAPI.java",
			"settings":
			{
				"buffer_size": 20505,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/OcrTaskProcessor.java",
			"settings":
			{
				"buffer_size": 18777,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/contrib/tesseract-c_api-demo.py",
			"settings":
			{
				"buffer_size": 2182,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/api/capi.cpp",
			"settings":
			{
				"buffer_size": 24479,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "package biz.codefuture.svgviewer;\n\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.annotation.SuppressLint;\nimport android.app.ActionBar;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.webkit.WebView;\n//import android.util.Log;\nimport android.widget.Toast;\n\npublic class MainActivity extends Activity {\n	\n//	private static final String TAG = \"SVGViewerActivity\";\n	private boolean mIsFullscreen = false;\n	final static boolean IsDebugging = false;\n\n	@Override\n	protected void onCreate(Bundle savedInstanceState) {\n		super.onCreate(savedInstanceState);\n		setContentView(R.layout.activity_main);\n		\n		Intent intent = getIntent();\n	    Uri data = intent.getData();\n	    //Log.v(TAG, \"data=\" + data);\n\n	    if (data != null && data.toString().indexOf(\"file\") > -1) {	\n	    	WebView webview = (WebView) findViewById(R.id.webView1);\n	    	webview.loadUrl(data.toString());\n	    	webview.getSettings().setBuiltInZoomControls(true);\n	    	webview.getSettings().setDisplayZoomControls(false);\n	    	webview.getSettings().setUseWideViewPort(true);\n	    	//webview.zoomOut();\n	    }\n	    \n	}\n\n	@Override\n	public boolean onCreateOptionsMenu(Menu menu) {\n		// Inflate the menu; this adds items to the action bar if it is present.\n		getMenuInflater().inflate(R.menu.activity_main, menu);\n		return true;\n	}\n	\n	@Override\n	public boolean onOptionsItemSelected(MenuItem item) {\n	    // Handle item selection\n	    switch (item.getItemId()) {\n	    case R.id.menu_zoom_fit:\n	        toggleFullscreen();\n	        return true;\n	    }\n	    if(IsDebugging)\n	        Log.v(\"svg viewer\", \"selected menu item about to return super\");\n        return super.onOptionsItemSelected(item);\n	}\n	\n	@Override\n	public void onBackPressed() {\n	    if(IsDebugging)\n		    Log.v(\"svg viewer\", \"onBackPressed\");\n		if (mIsFullscreen) {\n			toggleFullscreen();\n		} else {\n			super.onBackPressed();\n			/*\n			// TODO think about implementing 'press back again to exit' here\n			Intent intent = new Intent(Intent.ACTION_MAIN);\n			intent.addCategory(Intent.CATEGORY_HOME);\n			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n			startActivity(intent);\n			*/\n		}\n	}\n	\n	@SuppressLint(\"InlinedApi\")\n	private void toggleFullscreen()\n	{\n		if(IsDebugging)\n		    Log.v(\"svg viewer\", \"about to toggle fullscreen\");\n		ActionBar actionBar = getActionBar();\n		if (!mIsFullscreen) {\n		  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n		  getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n		  if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH){\n			  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\n		  }\n		  actionBar.hide();\n		  if(IsDebugging)\n		      Log.v(\"svg viewer\", \"set fullscreen\");\n	      mIsFullscreen = true;\n	      Toast.makeText(getApplicationContext(), R.string.disable_fullscreen_toast, Toast.LENGTH_SHORT).show();\n	    } else {\n	      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n	      getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n		  if(Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH){\n		      getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);\n		  }\n		  actionBar.show();\n		  if(IsDebugging)\n			  Log.v(\"svg viewer\", \"remove fullscreen\");\n	      mIsFullscreen = false;\n	    }\n	}\n	\n}\n",
			"file": "/D/dev/eclipse/svg-viewer-android-master/src/biz/codefuture/svgviewer/MainActivity.java",
			"file_size": 3552,
			"file_write_time": 130429567600000000,
			"settings":
			{
				"buffer_size": 3552,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/api/tesseractmain.cpp",
			"settings":
			{
				"buffer_size": 12031,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/ccmain/tessedit.cpp",
			"settings":
			{
				"buffer_size": 18339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/training/ambiguous_words.cpp",
			"settings":
			{
				"buffer_size": 2739,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/VisualDebugger.h",
			"settings":
			{
				"buffer_size": 1163,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/VisualDebugger.cpp",
			"settings":
			{
				"buffer_size": 18187,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/dev/eclipse/WhiteboardPhotoConverter/assets/android.svg",
		"/D/dev/eclipse/svg-viewer-android-master/.gitignore",
		"/D/dev/android-ndk/android-ndk-r9c/samples/native-audio/jni/native-audio-jni.c",
		"/D/dev/eclipse/tess-two-master/tess-two/AndroidManifest.xml",
		"/D/dev/WhiteboardPhotoConverter/WFCTest/stdafx.h",
		"/D/dev/WhiteboardPhotoConverter/SVGChartExporter/targetver.h",
		"/D/dev/WhiteboardPhotoConverter/WPCLib/ReadMe.txt",
		"/C/dev/__DevForKinect/ToDo.txt",
		"/D/dev/eclipse/WhiteboardPhotoConverter/install_apk.txt",
		"/D/dev/android-sdk/adt-bundle-windows-x86-20131030/sdk/extras/google/usb_driver/android_winusb.inf",
		"/C/dev/__DevForWebDeployment/ToDo.txt",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Gui/Controls/DefaultButton.gui",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Utils/Kinect/GUI/KinectHUD.gui",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/scene.html",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/UserSettings/Logs/Constructor.log",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/scene_with_camera_update.html",
		"/C/dev/__DevForWebDeployment/Constructor(24_02_2014)/Game/Bin/Data/Utils/WebExporter/scene_template.html",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Utils/Kinect/GUI/RotationCircleButton.gui",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Utils/Kinect/GUI/MovementCircleButton.gui",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Utils/Kinect/GUI/CameraCircleButton.gui",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/Data/Utils/Kinect/GUI/CheckedButton.gui",
		"/C/dev/__DevForKinect/Constructor(24_02_2014)/Game/Bin/UserSettings/Configs/ConstructorDocking.config",
		"/C/dev/__DevForWebDeployment/Constructor(23_02_2014)/Game/Bin/Data/Utils/WebExporter/scene_template.html",
		"/C/dev/__DevForWebDeployment/Constructor(23_02_2014)/Game/Bin/Data/Languages/Russian/Constructor.language",
		"/C/dev/__DevForWebDeployment/new  2.txt",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/Data/Base/Tools/WebExporter/js/loaders/ColladaLoader.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/build/three.js",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Game/Bin/Constructor.exe.config",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/docs/api/core/Object3D.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_interactive_draggablecubes.html",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Game/Bin/UserSettings/Logs/Constructor.log",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Game/Bin/Data/Utils/WebExporter/scene_template.html",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/Data/Base/Tools/WebExporter/scene_template.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/scene_ctr.html",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Game/Bin/scene.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/Base.dae",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/css3d_sandbox.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/css3d_molecules.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/canvas_ascii_effect.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/misc_controls_fly.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/editor/js/Viewport.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_effects_oculusrift.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_geometry_tessellation.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_lod.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/CraneTower.dae",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Tools/Constructor/WebExporter/WebExporterOptionsLeaf.cs",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Tools/Constructor/WebExporter/WebExporterForm.resx",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Tools/Constructor/WebExporter/WebExporterForm.Designer.cs",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Tools/Constructor/WebExporterForm.cs",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Addons/WebExporterConstructorAddon/WebExporterConstructorAddon.csproj",
		"/C/dev/__DevForWebDeployment/Constructor(14_02_2014)/Engine/Src/Addons/WebExporterREAddon/WebExporterConstructorAddon.csproj",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/scene_with_contorls.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/Box2.dae",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/Box.dae",
		"/C/NeoAxis/NeoAxisEngineSource-2.1/Components/AssimpModelImport/Assimp/CHANGES",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/js/loaders/AssimpJSONLoader.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/src/renderers/WebGLRenderer.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/js/loaders/ColladaLoader.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_loader_collada_keyframe.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/src/loaders/ObjectLoader.js",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/models/collada/multimaterial.dae",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_loader_assimp2json.html",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/models/collada/pump/pump.dae",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_materials_texture_compressed.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/Box3.dae",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/StopSign.dae",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/ExplosionBarrel.dae",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/BMW_base.dae",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/obj/male02/male02_dds.mtl",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/misc_controls_transform.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/crate.gif",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/README.md",
		"/C/dev/__DevForWebDeployment/SimpleHTTPServer.bat",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/obj/box/box.js",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/data/Cylinder.dae",
		"/C/dev/__DevForWebDeployment/mrdoob-three.js-4862f5f/examples/webgl_materials_bumpmap.html",
		"/C/NeoAxis/NeoAxisEngineSource-2.1/Components/AssimpModelImport/Assimp/revision.h",
		"/C/NeoAxis/NeoAxisEngineSource-2.1/Components/AssimpModelImport/Assimp/README",
		"/Y/README.txt",
		"/Y/home/test1.ru/www/index.html",
		"/C/WebServers/usr/local/apache/conf/httpd.conf",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Components/WebExporterREAddon/WebExporterREAddon.csproj",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/UnlimitedEdition.sln",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/Data/Base/Tools/WebExporter/scene.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/examples/webgl_loader_collada2.html",
		"/C/dev/__DevForWebDeployment/WebDeployment/export/webgl_loader_collada2.html",
		"/C/Users/Администратор/AppData/Roaming/WebDeployment/examples/webgl_loader_collada2.html",
		"/C/dev/__DevForWebDeployment/SimpleHTTPServer.bat.txt",
		"/C/Users/Администратор/AppData/Roaming/WebDeployment/examples/webgl_loader_collada.html",
		"/Y/home/threejs/www/webgl_loader_collada2.html",
		"/Y/usr/local/apache/conf/httpd.conf",
		"/Y/home/test1.ru/subdomain/index.html",
		"/Y/home/threejs/www/index.html",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Components/WebExporter/Properties/AssemblyInfo.cs",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Components/WebExporter/WebExporter.csproj",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/ResourceEditor.exe.config",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Components/ThreeJSExporterREAddon/ThreeJSExporterREAddon.csproj",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/Components/ResourceEditorAddon_WebExporter.component",
		"/C/dev/__DevForWebDeployment/NeoAxis Engine Unlimited SDK 2.1/Project/Bin/Components/ResourceEditorAddon_ThreeJSExporter.component",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/Data/_VegData/Gui/MainTerminal.gui",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/UserSettings/Configs/VegReg.config",
		"/C/Users/Администратор/Desktop/VegReg.config",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/UserSettings/Configs/Engine.config",
		"/F/dev/__html5/HTML5Test/TestWebApplication/Scripts/Test.Scripts.debug.js",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/Data/Base/Constants/EntitySystem.config",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/old_Data/GUI/AboutWindow.gui",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/old_Data/Base/Constants/EntitySystem.config",
		"/C/dev/___DevForVegReg/__awesom/Project/Bin/UserSettings/Logs/ResourceEditor.log",
		"/C/dev/___DevForVegReg/__awesom/Project/Bin/awesom_log.txt",
		"/C/dev/___DevForVegReg/__awesom/Project/Bin/Game.exe.config",
		"/C/dev/___DevForVegReg/__awesom/Project/Bin/Game.xml",
		"/C/dev/___DevForVegReg/__awesom/Project/Bin/UserSettings/Logs/Game.log",
		"/F/dev/__html5/HTML5Test/TestScriptLibrary/TestScriptLibrary.csproj",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/_VegData/Gui/Controls/FeatureEditorCheckBox.gui",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/_VegData/Gui/Controls/FeatureEditorButton.gui",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/Data/_VegData/Gui/FeatureEditorButton.gui",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/GUI/Controls/DefaultCheckBox.gui",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/Data/_VegData/Gui/FeatureEditorControlHUD.gui",
		"/C/Users/Администратор/AppData/Roaming/VegReg-3000/NA/Data/_VegData/Gui/FeatureEditorMenu.gui",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/GUI/Controls/DefaultComboBox.gui",
		"/D/dev/WhiteboardPhotoConverter/Release/small_3_ellipses_and_line_and_printed_text.svg",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/Maps/WebBrowserExample/Map.map",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/UserSettings/Logs/Game.log",
		"/C/dev/___DevForVegReg/Awesomium/Project/Bin/MapEditor.exe.config",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Components/AwesomiumWebBrowser.component",
		"/C/dev/___DevForVegReg/NeoAxisEngineSource-2.0.5(13_12_2013)/Project/Bin/Data/Base/Constants/EntitySystem.config",
		"/C/dev/___DevForVegReg/Awesomium/Project/Bin/Data/Base/Constants/EntitySystem.config",
		"/C/dev/___DevForVegReg/Awesomium/Project/Bin/UserSettings/Logs/Game.log"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"D:\\dev\\eclipse\\tess-two-master",
			"D:\\dev\\android-ndk\\android-ndk-r9c\\samples",
			"C:\\dev\\__DevForWebDeployment\\mrdoob-three.js-4862f5f",
			"C:\\Users\\Администратор\\AppData\\Roaming\\VegReg-3000\\NA\\Data\\\\",
			"C:\\Users\\Администратор\\AppData\\Roaming\\VegReg-3000\\NA\\Data\\_VegData\\SkiltKomponent",
			"D:\\avr_dev\\WinAVR-20100110\\avr\\include,C:\\Users\\Администратор\\AppData\\Roaming\\VegReg-3000\\NA\\Data\\_VegData\\SkiltKomponent"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"init",
			"Tessdata",
			"mTessdata",
			"mDatapath",
			"LanguageManager",
			"OcrTaskProcessor",
			"mDatapath",
			"mTessBaseAPI",
			"init",
			"TessBaseAPI",
			"init",
			"TessBaseAPIInit",
			"->Init",
			".Init",
			"Init",
			"TessBaseAPI",
			"static",
			"uri",
			"boolean",
			"bool",
			"../",
			"htc",
			"hand",
			"7",
			"%",
			"();\n",
			");",
			"requestAnimationFrame",
			"clear",
			"for",
			"objects",
			"stats",
			"controls",
			"Searching",
			"quaternion",
			"quat",
			"Object3D",
			"scene",
			"WebExporterConstructorAddon",
			"AddonOptionsLeaf",
			"addon",
			"AddonForm",
			"WebExporterConstructorAddon",
			"AddonForm",
			"WebExporterREAddon",
			"chann",
			" set=",
			"set",
			"setClearColor",
			"setClearColorHex",
			"controls",
			"TrackballControls",
			"camera",
			"FlyControls",
			"controls",
			"TransformControls",
			"controls",
			"EditorControls",
			"controls",
			"FirstPersonControls",
			"controls",
			"TrackballControls",
			"Editorcontrols",
			"firstpersoncontorls",
			"clock",
			"controls",
			"look",
			"controls",
			"FlyControls",
			"parse",
			"bump",
			"Shader",
			"shader",
			"bump",
			"normalMap",
			"bump",
			"bumpScale",
			"normalMap",
			"bump",
			"THREE",
			"',\n",
			"emissiveMap",
			"emissionMap",
			"specularMap",
			"emission",
			"file0",
			"load",
			"male_02",
			".dds",
			"Metal_S",
			"StaticBox",
			"lambert2SG",
			"CHANNEL0",
			"TEXCOORD",
			"tex0",
			"CHANNEL0",
			"lambert",
			"crate.gif",
			"crate.jpg",
			"Blue_file",
			".jpg",
			"file",
			"camera",
			"pump.dae",
			"multimaterial.dae",
			"library",
			"Material2",
			"Material2-effect",
			"#Material2-effect",
			"Material2-material",
			"#Material6-material",
			"Material2-material",
			"parseLib",
			"scene",
			"geometries",
			"return",
			"fbx",
			"scene",
			"collada",
			"dae",
			"position",
			"				// if ( skin ) {\n\n				// 	// guess this can be done smarter...\n\n				// 	// (Indeed, there are way more frames than needed and interpolation is not used at all\n				// 	//  could be something like - one morph per each skinning pose keyframe, or even less,\n				// 	//  animation could be resampled, morphing interpolation handles sparse keyframes quite well.\n				// 	//  Simple animation cycles like this look ok with 10-15 frames instead of 100 ;)\n\n				// 	for ( var i = 0; i < skin.morphTargetInfluences.length; i++ ) {\n\n				// 		skin.morphTargetInfluences[ i ] = 0;\n\n				// 	}\n\n				// 	//skin.morphTargetInfluences[ Math.floor( t * 30 ) ] = 1;\n				// 	skin.morphTargetInfluences[0] = 1;\n\n				// 	//t += delta;\n\n				// }",
			"animate",
			"0",
			"skin",
			"animate",
			"clock",
			"particleLight"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\\\n	",
			"MapEditor",
			"WebExporterOptionsLeaf",
			"WebExporterForm",
			"MapEditor",
			"WebExporterForm",
			"WebExporterConstructorAddon",
			"WebExporterREAddon",
			"WebExporter",
			"ThreeJSExporterREAddon",
			"Base\\\\Types\\\\HeightmapTerrain",
			"Maps\\\\VillageDemo\\\\FarmModels\\\\Meshes",
			"900 72",
			"Base\\\\Types\\\\HeightmapTerrain\\\\",
			"Maps\\\\VillageDemo\\\\FarmModels\\\\Meshes\\\\",
			"SyntaksLiberal           \"\"",
			" SyntaksStrikt            \"\"",
			"    Notat                      \"\"",
			"&quot;"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/WPCTest.cpp",
					"settings":
					{
						"buffer_size": 1579,
						"regions":
						{
						},
						"selection":
						[
							[
								1437,
								1271
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/stdafx.h",
					"settings":
					{
						"buffer_size": 425,
						"regions":
						{
						},
						"selection":
						[
							[
								296,
								358
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/D/dev/eclipse/svg-viewer-android-master/assets/svg-logo.svg",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 338208,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										302,
										313
									],
									[
										455,
										466
									],
									[
										468,
										479
									],
									[
										624,
										635
									],
									[
										642,
										653
									],
									[
										825,
										836
									],
									[
										945,
										956
									],
									[
										1028,
										1039
									],
									[
										1077,
										1088
									],
									[
										1278,
										1289
									],
									[
										1408,
										1419
									],
									[
										1471,
										1482
									],
									[
										1538,
										1549
									],
									[
										1589,
										1600
									],
									[
										1736,
										1747
									],
									[
										2018,
										2029
									],
									[
										2255,
										2266
									],
									[
										2511,
										2522
									],
									[
										2633,
										2644
									],
									[
										2714,
										2725
									],
									[
										3087,
										3098
									],
									[
										3147,
										3158
									],
									[
										3299,
										3310
									],
									[
										3564,
										3575
									],
									[
										3590,
										3601
									],
									[
										3759,
										3770
									],
									[
										3785,
										3796
									],
									[
										3954,
										3965
									],
									[
										3980,
										3991
									],
									[
										4095,
										4106
									],
									[
										4340,
										4351
									],
									[
										4555,
										4566
									],
									[
										4568,
										4579
									],
									[
										4674,
										4685
									],
									[
										4688,
										4699
									],
									[
										4841,
										4852
									],
									[
										4948,
										4959
									],
									[
										5142,
										5153
									],
									[
										5295,
										5306
									],
									[
										5519,
										5530
									],
									[
										5680,
										5691
									],
									[
										5926,
										5937
									],
									[
										6174,
										6185
									],
									[
										6413,
										6424
									],
									[
										6665,
										6676
									],
									[
										6907,
										6918
									],
									[
										7224,
										7235
									],
									[
										7458,
										7469
									],
									[
										7667,
										7678
									],
									[
										8040,
										8051
									],
									[
										8237,
										8248
									],
									[
										8475,
										8486
									],
									[
										8687,
										8698
									],
									[
										8882,
										8893
									],
									[
										9132,
										9143
									],
									[
										9332,
										9343
									],
									[
										9581,
										9592
									],
									[
										9840,
										9851
									],
									[
										10050,
										10061
									],
									[
										10252,
										10263
									],
									[
										10486,
										10497
									],
									[
										10658,
										10669
									],
									[
										10881,
										10892
									],
									[
										11098,
										11109
									],
									[
										11289,
										11300
									],
									[
										11513,
										11524
									],
									[
										11688,
										11699
									],
									[
										11914,
										11925
									],
									[
										12241,
										12252
									],
									[
										12458,
										12469
									],
									[
										12649,
										12660
									],
									[
										12877,
										12888
									],
									[
										13113,
										13124
									],
									[
										13311,
										13322
									],
									[
										13584,
										13595
									],
									[
										13654,
										13665
									],
									[
										13878,
										13889
									],
									[
										14038,
										14049
									],
									[
										14235,
										14246
									],
									[
										14426,
										14437
									],
									[
										14653,
										14664
									],
									[
										14792,
										14803
									],
									[
										14890,
										14901
									],
									[
										15030,
										15041
									],
									[
										15132,
										15143
									],
									[
										15253,
										15264
									],
									[
										15554,
										15565
									],
									[
										15866,
										15877
									],
									[
										16206,
										16217
									],
									[
										16532,
										16543
									],
									[
										16602,
										16613
									],
									[
										16828,
										16839
									],
									[
										17145,
										17156
									],
									[
										17215,
										17226
									],
									[
										17442,
										17453
									],
									[
										17651,
										17662
									],
									[
										17880,
										17891
									],
									[
										18125,
										18136
									],
									[
										18348,
										18359
									],
									[
										18572,
										18583
									],
									[
										18775,
										18786
									],
									[
										19003,
										19014
									],
									[
										19219,
										19230
									],
									[
										19452,
										19463
									],
									[
										19650,
										19661
									],
									[
										19946,
										19957
									],
									[
										20035,
										20046
									],
									[
										20227,
										20238
									],
									[
										20520,
										20531
									],
									[
										20767,
										20778
									],
									[
										20944,
										20955
									],
									[
										21221,
										21232
									],
									[
										21416,
										21427
									],
									[
										21668,
										21679
									],
									[
										21854,
										21865
									],
									[
										22126,
										22137
									],
									[
										22319,
										22330
									],
									[
										22530,
										22541
									],
									[
										22663,
										22674
									],
									[
										22863,
										22874
									],
									[
										23137,
										23148
									],
									[
										23326,
										23337
									],
									[
										23446,
										23457
									],
									[
										23681,
										23692
									],
									[
										23871,
										23882
									],
									[
										24210,
										24221
									],
									[
										24308,
										24319
									],
									[
										24386,
										24397
									],
									[
										24547,
										24558
									],
									[
										24754,
										24765
									],
									[
										24988,
										24999
									],
									[
										25178,
										25189
									],
									[
										25413,
										25424
									],
									[
										25728,
										25739
									],
									[
										26077,
										26088
									],
									[
										26337,
										26348
									],
									[
										26627,
										26638
									],
									[
										26852,
										26863
									],
									[
										27100,
										27111
									],
									[
										27328,
										27339
									],
									[
										27494,
										27505
									],
									[
										27811,
										27822
									],
									[
										27850,
										27861
									],
									[
										27883,
										27894
									],
									[
										28095,
										28106
									],
									[
										28478,
										28489
									],
									[
										28550,
										28561
									],
									[
										28968,
										28979
									],
									[
										29040,
										29051
									],
									[
										29452,
										29463
									],
									[
										29524,
										29535
									],
									[
										29867,
										29878
									],
									[
										30258,
										30269
									],
									[
										30526,
										30537
									],
									[
										30668,
										30679
									],
									[
										30838,
										30849
									],
									[
										31013,
										31024
									],
									[
										31122,
										31133
									],
									[
										31145,
										31156
									],
									[
										31196,
										31207
									],
									[
										31257,
										31268
									],
									[
										31275,
										31286
									],
									[
										31381,
										31392
									],
									[
										31408,
										31419
									],
									[
										31552,
										31563
									],
									[
										31576,
										31587
									],
									[
										31718,
										31729
									],
									[
										31742,
										31753
									],
									[
										31862,
										31873
									],
									[
										31887,
										31898
									],
									[
										32014,
										32025
									],
									[
										32039,
										32050
									],
									[
										32159,
										32170
									],
									[
										32191,
										32202
									],
									[
										32326,
										32337
									],
									[
										32349,
										32360
									],
									[
										32468,
										32479
									],
									[
										32493,
										32504
									],
									[
										32629,
										32640
									],
									[
										32652,
										32663
									],
									[
										32834,
										32845
									],
									[
										32862,
										32873
									],
									[
										33044,
										33055
									],
									[
										33076,
										33087
									],
									[
										33254,
										33265
									],
									[
										33287,
										33298
									],
									[
										33429,
										33440
									],
									[
										33464,
										33475
									],
									[
										33655,
										33666
									],
									[
										33690,
										33701
									],
									[
										33837,
										33848
									],
									[
										33869,
										33880
									],
									[
										33996,
										34007
									],
									[
										34034,
										34045
									],
									[
										34184,
										34195
									],
									[
										34215,
										34226
									],
									[
										34396,
										34407
									],
									[
										34413,
										34424
									],
									[
										34669,
										34680
									],
									[
										34686,
										34697
									],
									[
										34917,
										34928
									],
									[
										34934,
										34945
									],
									[
										35135,
										35146
									],
									[
										35152,
										35163
									],
									[
										35333,
										35344
									],
									[
										35375,
										35386
									],
									[
										35509,
										35520
									],
									[
										35553,
										35564
									],
									[
										35683,
										35694
									],
									[
										35730,
										35741
									],
									[
										35857,
										35868
									],
									[
										35880,
										35891
									],
									[
										36061,
										36072
									],
									[
										36091,
										36102
									],
									[
										36210,
										36221
									],
									[
										36236,
										36247
									],
									[
										36381,
										36392
									],
									[
										36412,
										36423
									],
									[
										36562,
										36573
									],
									[
										36588,
										36599
									],
									[
										36740,
										36751
									],
									[
										36772,
										36783
									],
									[
										36895,
										36906
									],
									[
										36911,
										36922
									],
									[
										37209,
										37220
									],
									[
										37244,
										37255
									],
									[
										37368,
										37379
									],
									[
										37388,
										37399
									],
									[
										37625,
										37636
									],
									[
										37646,
										37657
									],
									[
										37788,
										37799
									],
									[
										37819,
										37830
									],
									[
										37951,
										37962
									],
									[
										37975,
										37986
									],
									[
										38154,
										38165
									],
									[
										38180,
										38191
									],
									[
										38348,
										38359
									],
									[
										38379,
										38390
									],
									[
										38514,
										38525
									],
									[
										38536,
										38547
									],
									[
										38686,
										38697
									],
									[
										38710,
										38721
									],
									[
										38888,
										38899
									],
									[
										38913,
										38924
									],
									[
										39174,
										39185
									],
									[
										39195,
										39206
									],
									[
										39370,
										39381
									],
									[
										39390,
										39401
									],
									[
										39538,
										39549
									],
									[
										39572,
										39583
									],
									[
										39730,
										39741
									],
									[
										39760,
										39771
									],
									[
										40035,
										40046
									],
									[
										40069,
										40080
									],
									[
										40428,
										40439
									],
									[
										40476,
										40487
									],
									[
										40614,
										40625
									],
									[
										40633,
										40644
									],
									[
										40784,
										40795
									],
									[
										40809,
										40820
									],
									[
										40929,
										40940
									],
									[
										40950,
										40961
									],
									[
										41094,
										41105
									],
									[
										41126,
										41137
									],
									[
										41283,
										41294
									],
									[
										41307,
										41318
									],
									[
										41507,
										41518
									],
									[
										41532,
										41543
									],
									[
										41773,
										41784
									],
									[
										41796,
										41807
									],
									[
										42028,
										42039
									],
									[
										42052,
										42063
									],
									[
										42329,
										42340
									],
									[
										42352,
										42363
									],
									[
										42487,
										42498
									],
									[
										42517,
										42528
									],
									[
										42644,
										42655
									],
									[
										42667,
										42678
									],
									[
										42787,
										42798
									],
									[
										42810,
										42821
									],
									[
										42958,
										42969
									],
									[
										42980,
										42991
									],
									[
										43127,
										43138
									],
									[
										43150,
										43161
									],
									[
										43268,
										43279
									],
									[
										43292,
										43303
									],
									[
										43412,
										43423
									],
									[
										43442,
										43453
									],
									[
										43568,
										43579
									],
									[
										43594,
										43605
									],
									[
										43787,
										43798
									],
									[
										43804,
										43815
									],
									[
										43910,
										43921
									],
									[
										43925,
										43936
									],
									[
										44028,
										44039
									],
									[
										44051,
										44062
									],
									[
										44192,
										44203
									],
									[
										44220,
										44231
									],
									[
										44415,
										44426
									],
									[
										44438,
										44449
									],
									[
										44568,
										44579
									],
									[
										44600,
										44611
									],
									[
										44721,
										44732
									],
									[
										44760,
										44771
									],
									[
										44921,
										44932
									],
									[
										44941,
										44952
									],
									[
										45099,
										45110
									],
									[
										45129,
										45140
									],
									[
										45462,
										45473
									],
									[
										45572,
										45583
									],
									[
										45605,
										45616
									],
									[
										45861,
										45872
									],
									[
										45883,
										45894
									],
									[
										46038,
										46049
									],
									[
										46063,
										46074
									],
									[
										46185,
										46196
									],
									[
										46211,
										46222
									],
									[
										46426,
										46437
									],
									[
										46603,
										46614
									],
									[
										46762,
										46773
									],
									[
										46887,
										46898
									],
									[
										46908,
										46919
									],
									[
										47019,
										47030
									],
									[
										47048,
										47059
									],
									[
										47207,
										47218
									],
									[
										47243,
										47254
									],
									[
										47369,
										47380
									],
									[
										47404,
										47415
									],
									[
										47585,
										47596
									],
									[
										47802,
										47813
									],
									[
										47838,
										47849
									],
									[
										48170,
										48181
									],
									[
										48182,
										48193
									],
									[
										48461,
										48472
									],
									[
										48473,
										48484
									],
									[
										48896,
										48907
									],
									[
										49003,
										49014
									],
									[
										49290,
										49301
									],
									[
										49335,
										49346
									],
									[
										49388,
										49399
									],
									[
										49406,
										49417
									],
									[
										49469,
										49480
									],
									[
										49496,
										49507
									],
									[
										49573,
										49584
									],
									[
										49598,
										49609
									],
									[
										49676,
										49687
									],
									[
										49700,
										49711
									],
									[
										49762,
										49773
									],
									[
										49787,
										49798
									],
									[
										49865,
										49876
									],
									[
										49890,
										49901
									],
									[
										49952,
										49963
									],
									[
										49984,
										49995
									],
									[
										50044,
										50055
									],
									[
										50067,
										50078
									],
									[
										50129,
										50140
									],
									[
										50154,
										50165
									],
									[
										50234,
										50245
									],
									[
										50257,
										50268
									],
									[
										50348,
										50359
									],
									[
										50376,
										50387
									],
									[
										50475,
										50486
									],
									[
										50510,
										50521
									],
									[
										50594,
										50605
									],
									[
										50629,
										50640
									],
									[
										50714,
										50725
									],
									[
										50749,
										50760
									],
									[
										50864,
										50875
									],
									[
										50899,
										50910
									],
									[
										50979,
										50990
									],
									[
										51017,
										51028
									],
									[
										51081,
										51092
									],
									[
										51119,
										51130
									],
									[
										51235,
										51246
									],
									[
										51266,
										51277
									],
									[
										51413,
										51424
									],
									[
										51429,
										51440
									],
									[
										51868,
										51879
									],
									[
										51885,
										51896
									],
									[
										52089,
										52100
									],
									[
										52106,
										52117
									],
									[
										52227,
										52238
									],
									[
										52244,
										52255
									],
									[
										52348,
										52359
									],
									[
										52365,
										52376
									],
									[
										52644,
										52655
									],
									[
										52686,
										52697
									],
									[
										52763,
										52774
									],
									[
										52807,
										52818
									],
									[
										52884,
										52895
									],
									[
										52931,
										52942
									],
									[
										52993,
										53004
									],
									[
										53016,
										53027
									],
									[
										53114,
										53125
									],
									[
										53144,
										53155
									],
									[
										53206,
										53217
									],
									[
										53232,
										53243
									],
									[
										53308,
										53319
									],
									[
										53339,
										53350
									],
									[
										53423,
										53434
									],
									[
										53449,
										53460
									],
									[
										53557,
										53568
									],
									[
										53589,
										53600
									],
									[
										53651,
										53662
									],
									[
										53667,
										53678
									],
									[
										53940,
										53951
									],
									[
										53975,
										53986
									],
									[
										54037,
										54048
									],
									[
										54057,
										54068
									],
									[
										54259,
										54270
									],
									[
										54280,
										54291
									],
									[
										54364,
										54375
									],
									[
										54395,
										54406
									],
									[
										54466,
										54477
									],
									[
										54490,
										54501
									],
									[
										54634,
										54645
									],
									[
										54660,
										54671
									],
									[
										54799,
										54810
									],
									[
										54833,
										54844
									],
									[
										54916,
										54927
									],
									[
										54950,
										54961
									],
									[
										55053,
										55064
									],
									[
										55087,
										55098
									],
									[
										55206,
										55217
									],
									[
										55240,
										55251
									],
									[
										55506,
										55517
									],
									[
										55540,
										55551
									],
									[
										55659,
										55670
									],
									[
										55693,
										55704
									],
									[
										55796,
										55807
									],
									[
										55830,
										55841
									],
									[
										55931,
										55942
									],
									[
										55965,
										55976
									],
									[
										56207,
										56218
									],
									[
										56241,
										56252
									],
									[
										56588,
										56599
									],
									[
										56636,
										56647
									],
									[
										56698,
										56709
									],
									[
										56717,
										56728
									],
									[
										56835,
										56846
									],
									[
										56860,
										56871
									],
									[
										56922,
										56933
									],
									[
										56943,
										56954
									],
									[
										57018,
										57029
									],
									[
										57050,
										57061
									],
									[
										57125,
										57136
									],
									[
										57149,
										57160
									],
									[
										57318,
										57329
									],
									[
										57343,
										57354
									],
									[
										57554,
										57565
									],
									[
										57577,
										57588
									],
									[
										57778,
										57789
									],
									[
										57802,
										57813
									],
									[
										58078,
										58089
									],
									[
										58101,
										58112
									],
									[
										58192,
										58203
									],
									[
										58222,
										58233
									],
									[
										58284,
										58295
									],
									[
										58307,
										58318
									],
									[
										58361,
										58372
									],
									[
										58384,
										58395
									],
									[
										58455,
										58466
									],
									[
										58477,
										58488
									],
									[
										58548,
										58559
									],
									[
										58571,
										58582
									],
									[
										58625,
										58636
									],
									[
										58649,
										58660
									],
									[
										58703,
										58714
									],
									[
										58733,
										58744
									],
									[
										58787,
										58798
									],
									[
										58813,
										58824
									],
									[
										58918,
										58929
									],
									[
										58935,
										58946
									],
									[
										58989,
										59000
									],
									[
										59004,
										59015
									],
									[
										59066,
										59077
									],
									[
										59089,
										59100
									],
									[
										59161,
										59172
									],
									[
										59189,
										59200
									],
									[
										59326,
										59337
									],
									[
										59349,
										59360
									],
									[
										59419,
										59430
									],
									[
										59451,
										59462
									],
									[
										59505,
										59516
									],
									[
										59544,
										59555
									],
									[
										59638,
										59649
									],
									[
										59668,
										59679
									],
									[
										59745,
										59756
									],
									[
										59765,
										59776
									],
									[
										59847,
										59858
									],
									[
										59877,
										59888
									],
									[
										60206,
										60217
									],
									[
										60239,
										60250
									],
									[
										60503,
										60514
									],
									[
										60525,
										60536
									],
									[
										60675,
										60686
									],
									[
										60700,
										60711
									],
									[
										60761,
										60772
									],
									[
										60787,
										60798
									],
									[
										60911,
										60922
									],
									[
										60932,
										60943
									],
									[
										60986,
										60997
									],
									[
										61015,
										61026
									],
									[
										61137,
										61148
									],
									[
										61173,
										61184
									],
									[
										61249,
										61260
									],
									[
										61284,
										61295
									],
									[
										61426,
										61437
									],
									[
										61566,
										61577
									],
									[
										61602,
										61613
									],
									[
										61814,
										61825
									],
									[
										62043,
										62054
									],
									[
										62297,
										62308
									],
									[
										62444,
										62455
									],
									[
										62598,
										62609
									],
									[
										62718,
										62729
									],
									[
										62878,
										62889
									],
									[
										63060,
										63071
									],
									[
										63235,
										63246
									],
									[
										63616,
										63627
									],
									[
										63736,
										63747
									],
									[
										63957,
										63968
									],
									[
										64288,
										64299
									],
									[
										64443,
										64454
									],
									[
										64604,
										64615
									],
									[
										64765,
										64776
									],
									[
										64910,
										64921
									],
									[
										65069,
										65080
									],
									[
										65214,
										65225
									],
									[
										65395,
										65406
									],
									[
										65621,
										65632
									],
									[
										65837,
										65848
									],
									[
										65945,
										65956
									],
									[
										66181,
										66192
									],
									[
										66455,
										66466
									],
									[
										66555,
										66566
									],
									[
										66893,
										66904
									],
									[
										66952,
										66963
									],
									[
										67401,
										67412
									],
									[
										67471,
										67482
									],
									[
										67877,
										67888
									],
									[
										68246,
										68257
									],
									[
										68305,
										68316
									],
									[
										68737,
										68748
									],
									[
										68807,
										68818
									],
									[
										69301,
										69312
									],
									[
										69371,
										69382
									],
									[
										69777,
										69788
									],
									[
										70132,
										70143
									],
									[
										70767,
										70778
									],
									[
										71405,
										71416
									],
									[
										71732,
										71743
									],
									[
										72015,
										72026
									],
									[
										72057,
										72068
									],
									[
										72137,
										72148
									],
									[
										72263,
										72274
									],
									[
										72841,
										72852
									],
									[
										73504,
										73515
									],
									[
										73801,
										73812
									],
									[
										74100,
										74111
									],
									[
										74441,
										74452
									],
									[
										74649,
										74660
									],
									[
										74959,
										74970
									],
									[
										75250,
										75261
									],
									[
										75380,
										75391
									],
									[
										75597,
										75608
									],
									[
										75815,
										75826
									],
									[
										76035,
										76046
									],
									[
										76329,
										76340
									],
									[
										76633,
										76644
									],
									[
										76881,
										76892
									],
									[
										77194,
										77205
									],
									[
										77502,
										77513
									],
									[
										77809,
										77820
									],
									[
										78032,
										78043
									],
									[
										78239,
										78250
									],
									[
										78470,
										78481
									],
									[
										78707,
										78718
									],
									[
										79018,
										79029
									],
									[
										79226,
										79237
									],
									[
										79430,
										79441
									],
									[
										79729,
										79740
									],
									[
										80041,
										80052
									],
									[
										80259,
										80270
									],
									[
										80481,
										80492
									],
									[
										80697,
										80708
									],
									[
										80911,
										80922
									],
									[
										81121,
										81132
									],
									[
										81358,
										81369
									],
									[
										81590,
										81601
									],
									[
										81899,
										81910
									],
									[
										82211,
										82222
									],
									[
										82658,
										82669
									],
									[
										82935,
										82946
									],
									[
										83164,
										83175
									],
									[
										83328,
										83339
									],
									[
										83374,
										83385
									],
									[
										83492,
										83503
									],
									[
										83674,
										83685
									],
									[
										83964,
										83975
									],
									[
										84339,
										84350
									],
									[
										84754,
										84758
									],
									[
										85126,
										85130
									],
									[
										85497,
										85501
									],
									[
										85791,
										85795
									],
									[
										86022,
										86026
									],
									[
										86250,
										86254
									],
									[
										86432,
										86436
									],
									[
										86752,
										86756
									],
									[
										86953,
										86957
									],
									[
										87151,
										87155
									],
									[
										87477,
										87481
									],
									[
										87839,
										87843
									],
									[
										88212,
										88216
									],
									[
										88441,
										88445
									],
									[
										88569,
										88573
									],
									[
										88822,
										88826
									],
									[
										89128,
										89132
									],
									[
										89471,
										89475
									],
									[
										89811,
										89815
									],
									[
										90151,
										90155
									],
									[
										90439,
										90443
									],
									[
										90758,
										90762
									],
									[
										90995,
										90999
									],
									[
										91387,
										91391
									],
									[
										91503,
										91507
									],
									[
										91593,
										91597
									],
									[
										91834,
										91838
									],
									[
										92100,
										92104
									],
									[
										92493,
										92497
									],
									[
										92575,
										92579
									],
									[
										92715,
										92719
									],
									[
										92886,
										92890
									],
									[
										93188,
										93192
									],
									[
										93276,
										93280
									],
									[
										93359,
										93363
									],
									[
										93428,
										93432
									],
									[
										93654,
										93658
									],
									[
										93790,
										93794
									],
									[
										94051,
										94055
									],
									[
										94440,
										94444
									],
									[
										94666,
										94670
									],
									[
										95019,
										95023
									],
									[
										95369,
										95373
									],
									[
										95719,
										95723
									],
									[
										96017,
										96021
									],
									[
										96332,
										96336
									],
									[
										96551,
										96555
									],
									[
										96772,
										96776
									],
									[
										97016,
										97020
									],
									[
										97276,
										97280
									],
									[
										97471,
										97475
									],
									[
										97685,
										97689
									],
									[
										98008,
										98012
									],
									[
										98415,
										98419
									],
									[
										98922,
										98926
									],
									[
										99299,
										99303
									],
									[
										99789,
										99793
									],
									[
										100283,
										100287
									],
									[
										100615,
										100619
									],
									[
										100836,
										100840
									],
									[
										101064,
										101068
									],
									[
										101391,
										101395
									],
									[
										101551,
										101555
									],
									[
										101909,
										101913
									],
									[
										102043,
										102047
									],
									[
										102321,
										102325
									],
									[
										102690,
										102694
									],
									[
										102973,
										102977
									],
									[
										103064,
										103068
									],
									[
										103296,
										103300
									],
									[
										103552,
										103556
									],
									[
										103836,
										103840
									],
									[
										103945,
										103949
									],
									[
										104230,
										104234
									],
									[
										104474,
										104478
									],
									[
										104788,
										104792
									],
									[
										105110,
										105114
									],
									[
										105383,
										105387
									],
									[
										105578,
										105582
									],
									[
										105909,
										105913
									],
									[
										106030,
										106034
									],
									[
										106281,
										106285
									],
									[
										106506,
										106510
									],
									[
										106823,
										106827
									],
									[
										107100,
										107104
									],
									[
										107376,
										107380
									],
									[
										107638,
										107642
									],
									[
										107771,
										107775
									],
									[
										107993,
										107997
									],
									[
										108289,
										108293
									],
									[
										109079,
										109083
									],
									[
										109692,
										109696
									],
									[
										109965,
										109969
									],
									[
										110242,
										110246
									],
									[
										110601,
										110605
									],
									[
										110976,
										110980
									],
									[
										111236,
										111240
									],
									[
										111532,
										111536
									],
									[
										111917,
										111921
									],
									[
										112110,
										112114
									],
									[
										112375,
										112379
									],
									[
										112737,
										112741
									],
									[
										113027,
										113031
									],
									[
										113345,
										113349
									],
									[
										113828,
										113832
									],
									[
										114094,
										114098
									],
									[
										114390,
										114394
									],
									[
										114734,
										114738
									],
									[
										114980,
										114984
									],
									[
										115241,
										115245
									],
									[
										115455,
										115459
									],
									[
										115749,
										115753
									],
									[
										116073,
										116077
									],
									[
										116407,
										116411
									],
									[
										116626,
										116630
									],
									[
										116994,
										116998
									],
									[
										117232,
										117236
									],
									[
										117537,
										117541
									],
									[
										117812,
										117816
									],
									[
										118018,
										118022
									],
									[
										118432,
										118436
									],
									[
										118690,
										118694
									],
									[
										118740,
										118744
									],
									[
										118918,
										118922
									],
									[
										119133,
										119137
									],
									[
										119231,
										119235
									],
									[
										119548,
										119552
									],
									[
										119633,
										119637
									],
									[
										119935,
										119939
									],
									[
										119990,
										119994
									],
									[
										120211,
										120215
									],
									[
										120476,
										120480
									],
									[
										120611,
										120615
									],
									[
										120748,
										120752
									],
									[
										120881,
										120885
									],
									[
										121014,
										121018
									],
									[
										121150,
										121154
									],
									[
										121279,
										121283
									],
									[
										121406,
										121410
									],
									[
										121443,
										121447
									],
									[
										121738,
										121742
									],
									[
										121952,
										121956
									],
									[
										122154,
										122158
									],
									[
										122396,
										122400
									],
									[
										122712,
										122716
									],
									[
										122880,
										122884
									],
									[
										123090,
										123094
									],
									[
										123340,
										123344
									],
									[
										123605,
										123609
									],
									[
										123893,
										123897
									],
									[
										124143,
										124147
									],
									[
										124314,
										124318
									],
									[
										124545,
										124549
									],
									[
										124809,
										124813
									],
									[
										125043,
										125047
									],
									[
										125244,
										125248
									],
									[
										125350,
										125354
									],
									[
										125692,
										125696
									],
									[
										125777,
										125781
									],
									[
										126106,
										126110
									],
									[
										126303,
										126307
									],
									[
										126530,
										126534
									],
									[
										126749,
										126753
									],
									[
										126900,
										126904
									],
									[
										127104,
										127108
									],
									[
										127366,
										127370
									],
									[
										127565,
										127569
									],
									[
										127692,
										127696
									],
									[
										127994,
										127998
									],
									[
										128289,
										128293
									],
									[
										128585,
										128589
									],
									[
										128927,
										128931
									],
									[
										129248,
										129252
									],
									[
										129538,
										129542
									],
									[
										129814,
										129818
									],
									[
										130064,
										130068
									],
									[
										130159,
										130163
									],
									[
										130447,
										130451
									],
									[
										130669,
										130673
									],
									[
										130692,
										130696
									],
									[
										130967,
										130971
									],
									[
										131048,
										131052
									],
									[
										131293,
										131297
									],
									[
										131981,
										131985
									],
									[
										132564,
										132568
									],
									[
										132882,
										132886
									],
									[
										133118,
										133122
									],
									[
										133359,
										133363
									],
									[
										133594,
										133598
									],
									[
										133677,
										133681
									],
									[
										133834,
										133838
									],
									[
										134272,
										134276
									],
									[
										134557,
										134561
									],
									[
										134864,
										134868
									],
									[
										135109,
										135113
									],
									[
										135345,
										135349
									],
									[
										135530,
										135534
									],
									[
										135777,
										135781
									],
									[
										135934,
										135938
									],
									[
										136081,
										136085
									],
									[
										136286,
										136290
									],
									[
										136464,
										136468
									],
									[
										136601,
										136605
									],
									[
										136819,
										136823
									],
									[
										137050,
										137054
									],
									[
										137394,
										137398
									],
									[
										137673,
										137677
									],
									[
										137977,
										137981
									],
									[
										138396,
										138400
									],
									[
										138646,
										138650
									],
									[
										138928,
										138932
									],
									[
										139377,
										139381
									],
									[
										139729,
										139733
									],
									[
										140009,
										140013
									],
									[
										140182,
										140186
									],
									[
										140405,
										140409
									],
									[
										140589,
										140593
									],
									[
										140663,
										140667
									],
									[
										140735,
										140739
									],
									[
										140799,
										140803
									],
									[
										140861,
										140865
									],
									[
										140990,
										140994
									],
									[
										141266,
										141270
									],
									[
										141574,
										141578
									],
									[
										141652,
										141656
									],
									[
										141834,
										141838
									],
									[
										142097,
										142101
									],
									[
										142354,
										142358
									],
									[
										142544,
										142548
									],
									[
										142808,
										142812
									],
									[
										143253,
										143257
									],
									[
										143673,
										143677
									],
									[
										143956,
										143960
									],
									[
										144278,
										144282
									],
									[
										144637,
										144641
									],
									[
										144814,
										144818
									],
									[
										145189,
										145193
									],
									[
										145524,
										145528
									],
									[
										145779,
										145783
									],
									[
										146073,
										146077
									],
									[
										146341,
										146345
									],
									[
										146543,
										146547
									],
									[
										147061,
										147065
									],
									[
										147327,
										147331
									],
									[
										147411,
										147415
									],
									[
										147541,
										147545
									],
									[
										147777,
										147781
									],
									[
										148147,
										148152
									],
									[
										148523,
										148528
									],
									[
										148785,
										148790
									],
									[
										149065,
										149070
									],
									[
										149330,
										149335
									],
									[
										149695,
										149700
									],
									[
										149941,
										149946
									],
									[
										150202,
										150207
									],
									[
										150416,
										150421
									],
									[
										150710,
										150715
									],
									[
										151034,
										151039
									],
									[
										151368,
										151373
									],
									[
										151579,
										151584
									],
									[
										151854,
										151859
									],
									[
										152060,
										152065
									],
									[
										152412,
										152417
									],
									[
										152699,
										152704
									],
									[
										152952,
										152957
									],
									[
										153183,
										153188
									],
									[
										153527,
										153532
									],
									[
										153806,
										153811
									],
									[
										154110,
										154115
									],
									[
										154498,
										154503
									],
									[
										154572,
										154577
									],
									[
										154644,
										154649
									],
									[
										154708,
										154713
									],
									[
										154770,
										154775
									],
									[
										154899,
										154904
									],
									[
										155196,
										155201
									],
									[
										155584,
										155589
									],
									[
										156025,
										156030
									],
									[
										156308,
										156313
									],
									[
										156630,
										156635
									],
									[
										156960,
										156965
									],
									[
										157228,
										157233
									],
									[
										157430,
										157435
									],
									[
										157830,
										157836
									],
									[
										158074,
										158080
									],
									[
										158334,
										158340
									],
									[
										158529,
										158535
									],
									[
										158832,
										158838
									],
									[
										159088,
										159094
									],
									[
										159389,
										159395
									],
									[
										159722,
										159728
									],
									[
										160032,
										160038
									],
									[
										160352,
										160358
									],
									[
										160676,
										160691
									],
									[
										160949,
										160964
									],
									[
										161197,
										161212
									],
									[
										161415,
										161430
									],
									[
										161611,
										161626
									],
									[
										161815,
										161830
									],
									[
										161970,
										161985
									],
									[
										162268,
										162283
									],
									[
										162723,
										162738
									],
									[
										162944,
										162959
									],
									[
										163082,
										163097
									],
									[
										163203,
										163218
									],
									[
										163572,
										163587
									],
									[
										163693,
										163708
									],
									[
										164002,
										164017
									],
									[
										164309,
										164324
									],
									[
										164743,
										164754
									],
									[
										164896,
										164907
									],
									[
										164909,
										164920
									],
									[
										165065,
										165076
									],
									[
										165083,
										165094
									],
									[
										165266,
										165277
									],
									[
										165386,
										165397
									],
									[
										165469,
										165480
									],
									[
										165518,
										165529
									],
									[
										165719,
										165730
									],
									[
										165849,
										165860
									],
									[
										165912,
										165923
									],
									[
										165979,
										165990
									],
									[
										166030,
										166041
									],
									[
										166177,
										166188
									],
									[
										166459,
										166470
									],
									[
										166696,
										166707
									],
									[
										166952,
										166963
									],
									[
										167074,
										167085
									],
									[
										167155,
										167166
									],
									[
										167528,
										167539
									],
									[
										167588,
										167599
									],
									[
										167740,
										167751
									],
									[
										168005,
										168016
									],
									[
										168031,
										168042
									],
									[
										168200,
										168211
									],
									[
										168226,
										168237
									],
									[
										168395,
										168406
									],
									[
										168421,
										168432
									],
									[
										168536,
										168547
									],
									[
										168781,
										168792
									],
									[
										168996,
										169007
									],
									[
										169009,
										169020
									],
									[
										169115,
										169126
									],
									[
										169129,
										169140
									],
									[
										169282,
										169293
									],
									[
										169389,
										169400
									],
									[
										169583,
										169594
									],
									[
										169736,
										169747
									],
									[
										169960,
										169971
									],
									[
										170121,
										170132
									],
									[
										170367,
										170378
									],
									[
										170615,
										170626
									],
									[
										170854,
										170865
									],
									[
										171106,
										171117
									],
									[
										171348,
										171359
									],
									[
										171665,
										171676
									],
									[
										171899,
										171910
									],
									[
										172108,
										172119
									],
									[
										172481,
										172492
									],
									[
										172678,
										172689
									],
									[
										172916,
										172927
									],
									[
										173128,
										173139
									],
									[
										173323,
										173334
									],
									[
										173573,
										173584
									],
									[
										173773,
										173784
									],
									[
										174022,
										174033
									],
									[
										174281,
										174292
									],
									[
										174491,
										174502
									],
									[
										174693,
										174704
									],
									[
										174927,
										174938
									],
									[
										175099,
										175110
									],
									[
										175322,
										175333
									],
									[
										175539,
										175550
									],
									[
										175730,
										175741
									],
									[
										175954,
										175965
									],
									[
										176129,
										176140
									],
									[
										176355,
										176366
									],
									[
										176682,
										176693
									],
									[
										176899,
										176910
									],
									[
										177090,
										177101
									],
									[
										177318,
										177329
									],
									[
										177554,
										177565
									],
									[
										177752,
										177763
									],
									[
										178025,
										178036
									],
									[
										178095,
										178106
									],
									[
										178319,
										178330
									],
									[
										178479,
										178490
									],
									[
										178676,
										178687
									],
									[
										178867,
										178878
									],
									[
										179094,
										179105
									],
									[
										179233,
										179244
									],
									[
										179331,
										179342
									],
									[
										179471,
										179482
									],
									[
										179573,
										179584
									],
									[
										179694,
										179705
									],
									[
										179995,
										180006
									],
									[
										180307,
										180318
									],
									[
										180647,
										180658
									],
									[
										180973,
										180984
									],
									[
										181043,
										181054
									],
									[
										181269,
										181280
									],
									[
										181586,
										181597
									],
									[
										181656,
										181667
									],
									[
										181883,
										181894
									],
									[
										182092,
										182103
									],
									[
										182321,
										182332
									],
									[
										182566,
										182577
									],
									[
										182789,
										182800
									],
									[
										183013,
										183024
									],
									[
										183216,
										183227
									],
									[
										183444,
										183455
									],
									[
										183660,
										183671
									],
									[
										183893,
										183904
									],
									[
										184091,
										184102
									],
									[
										184387,
										184398
									],
									[
										184476,
										184487
									],
									[
										184668,
										184679
									],
									[
										184961,
										184972
									],
									[
										185208,
										185219
									],
									[
										185385,
										185396
									],
									[
										185662,
										185673
									],
									[
										185857,
										185868
									],
									[
										186109,
										186120
									],
									[
										186295,
										186306
									],
									[
										186567,
										186578
									],
									[
										186760,
										186771
									],
									[
										186971,
										186982
									],
									[
										187104,
										187115
									],
									[
										187304,
										187315
									],
									[
										187578,
										187589
									],
									[
										187767,
										187778
									],
									[
										187887,
										187898
									],
									[
										188122,
										188133
									],
									[
										188312,
										188323
									],
									[
										188651,
										188662
									],
									[
										188749,
										188760
									],
									[
										188827,
										188838
									],
									[
										188988,
										188999
									],
									[
										189195,
										189206
									],
									[
										189429,
										189440
									],
									[
										189619,
										189630
									],
									[
										189854,
										189865
									],
									[
										190169,
										190180
									],
									[
										190518,
										190529
									],
									[
										190778,
										190789
									],
									[
										191068,
										191079
									],
									[
										191293,
										191304
									],
									[
										191541,
										191552
									],
									[
										191769,
										191780
									],
									[
										191935,
										191946
									],
									[
										192252,
										192263
									],
									[
										192291,
										192302
									],
									[
										192324,
										192335
									],
									[
										192536,
										192547
									],
									[
										192919,
										192930
									],
									[
										192991,
										193002
									],
									[
										193409,
										193420
									],
									[
										193481,
										193492
									],
									[
										193893,
										193904
									],
									[
										193965,
										193976
									],
									[
										194308,
										194319
									],
									[
										194699,
										194710
									],
									[
										194967,
										194978
									],
									[
										195109,
										195120
									],
									[
										195279,
										195290
									],
									[
										195454,
										195465
									],
									[
										195563,
										195574
									],
									[
										195586,
										195597
									],
									[
										195637,
										195648
									],
									[
										195698,
										195709
									],
									[
										195716,
										195727
									],
									[
										195822,
										195833
									],
									[
										195849,
										195860
									],
									[
										195993,
										196004
									],
									[
										196017,
										196028
									],
									[
										196159,
										196170
									],
									[
										196183,
										196194
									],
									[
										196303,
										196314
									],
									[
										196328,
										196339
									],
									[
										196455,
										196466
									],
									[
										196480,
										196491
									],
									[
										196600,
										196611
									],
									[
										196632,
										196643
									],
									[
										196767,
										196778
									],
									[
										196790,
										196801
									],
									[
										196909,
										196920
									],
									[
										196934,
										196945
									],
									[
										197070,
										197081
									],
									[
										197093,
										197104
									],
									[
										197275,
										197286
									],
									[
										197303,
										197314
									],
									[
										197485,
										197496
									],
									[
										197517,
										197528
									],
									[
										197695,
										197706
									],
									[
										197728,
										197739
									],
									[
										197870,
										197881
									],
									[
										197905,
										197916
									],
									[
										198096,
										198107
									],
									[
										198131,
										198142
									],
									[
										198278,
										198289
									],
									[
										198310,
										198321
									],
									[
										198437,
										198448
									],
									[
										198475,
										198486
									],
									[
										198625,
										198636
									],
									[
										198656,
										198667
									],
									[
										198837,
										198848
									],
									[
										198854,
										198865
									],
									[
										199110,
										199121
									],
									[
										199127,
										199138
									],
									[
										199358,
										199369
									],
									[
										199375,
										199386
									],
									[
										199576,
										199587
									],
									[
										199593,
										199604
									],
									[
										199774,
										199785
									],
									[
										199816,
										199827
									],
									[
										199950,
										199961
									],
									[
										199994,
										200005
									],
									[
										200124,
										200135
									],
									[
										200171,
										200182
									],
									[
										200298,
										200309
									],
									[
										200321,
										200332
									],
									[
										200502,
										200513
									],
									[
										200532,
										200543
									],
									[
										200651,
										200662
									],
									[
										200677,
										200688
									],
									[
										200822,
										200833
									],
									[
										200853,
										200864
									],
									[
										201003,
										201014
									],
									[
										201029,
										201040
									],
									[
										201181,
										201192
									],
									[
										201213,
										201224
									],
									[
										201336,
										201347
									],
									[
										201352,
										201363
									],
									[
										201650,
										201661
									],
									[
										201685,
										201696
									],
									[
										201809,
										201820
									],
									[
										201829,
										201840
									],
									[
										202066,
										202077
									],
									[
										202087,
										202098
									],
									[
										202229,
										202240
									],
									[
										202260,
										202271
									],
									[
										202392,
										202403
									],
									[
										202416,
										202427
									],
									[
										202595,
										202606
									],
									[
										202621,
										202632
									],
									[
										202789,
										202800
									],
									[
										202820,
										202831
									],
									[
										202955,
										202966
									],
									[
										202977,
										202988
									],
									[
										203127,
										203138
									],
									[
										203151,
										203162
									],
									[
										203329,
										203340
									],
									[
										203354,
										203365
									],
									[
										203615,
										203626
									],
									[
										203636,
										203647
									],
									[
										203811,
										203822
									],
									[
										203831,
										203842
									],
									[
										203979,
										203990
									],
									[
										204013,
										204024
									],
									[
										204171,
										204182
									],
									[
										204201,
										204212
									],
									[
										204476,
										204487
									],
									[
										204510,
										204521
									],
									[
										204869,
										204880
									],
									[
										204917,
										204928
									],
									[
										205055,
										205066
									],
									[
										205074,
										205085
									],
									[
										205225,
										205236
									],
									[
										205250,
										205261
									],
									[
										205370,
										205381
									],
									[
										205391,
										205402
									],
									[
										205535,
										205546
									],
									[
										205567,
										205578
									],
									[
										205724,
										205735
									],
									[
										205748,
										205759
									],
									[
										205948,
										205959
									],
									[
										205973,
										205984
									],
									[
										206214,
										206225
									],
									[
										206237,
										206248
									],
									[
										206469,
										206480
									],
									[
										206493,
										206504
									],
									[
										206770,
										206781
									],
									[
										206793,
										206804
									],
									[
										206928,
										206939
									],
									[
										206958,
										206969
									],
									[
										207085,
										207096
									],
									[
										207108,
										207119
									],
									[
										207228,
										207239
									],
									[
										207251,
										207262
									],
									[
										207399,
										207410
									],
									[
										207421,
										207432
									],
									[
										207568,
										207579
									],
									[
										207591,
										207602
									],
									[
										207709,
										207720
									],
									[
										207733,
										207744
									],
									[
										207853,
										207864
									],
									[
										207883,
										207894
									],
									[
										208009,
										208020
									],
									[
										208035,
										208046
									],
									[
										208228,
										208239
									],
									[
										208245,
										208256
									],
									[
										208351,
										208362
									],
									[
										208366,
										208377
									],
									[
										208469,
										208480
									],
									[
										208492,
										208503
									],
									[
										208633,
										208644
									],
									[
										208661,
										208672
									],
									[
										208856,
										208867
									],
									[
										208879,
										208890
									],
									[
										209009,
										209020
									],
									[
										209041,
										209052
									],
									[
										209162,
										209173
									],
									[
										209201,
										209212
									],
									[
										209362,
										209373
									],
									[
										209382,
										209393
									],
									[
										209540,
										209551
									],
									[
										209570,
										209581
									],
									[
										209903,
										209914
									],
									[
										210013,
										210024
									],
									[
										210046,
										210057
									],
									[
										210302,
										210313
									],
									[
										210324,
										210335
									],
									[
										210479,
										210490
									],
									[
										210504,
										210515
									],
									[
										210626,
										210637
									],
									[
										210652,
										210663
									],
									[
										210867,
										210878
									],
									[
										211044,
										211055
									],
									[
										211203,
										211214
									],
									[
										211328,
										211339
									],
									[
										211349,
										211360
									],
									[
										211460,
										211471
									],
									[
										211489,
										211500
									],
									[
										211648,
										211659
									],
									[
										211684,
										211695
									],
									[
										211810,
										211821
									],
									[
										211845,
										211856
									],
									[
										212026,
										212037
									],
									[
										212243,
										212254
									],
									[
										212279,
										212290
									],
									[
										212611,
										212622
									],
									[
										212623,
										212634
									],
									[
										212902,
										212913
									],
									[
										212914,
										212925
									],
									[
										213337,
										213348
									],
									[
										213444,
										213455
									],
									[
										213731,
										213742
									],
									[
										213776,
										213787
									],
									[
										213829,
										213840
									],
									[
										213847,
										213858
									],
									[
										213910,
										213921
									],
									[
										213937,
										213948
									],
									[
										214014,
										214025
									],
									[
										214039,
										214050
									],
									[
										214117,
										214128
									],
									[
										214141,
										214152
									],
									[
										214203,
										214214
									],
									[
										214228,
										214239
									],
									[
										214306,
										214317
									],
									[
										214331,
										214342
									],
									[
										214393,
										214404
									],
									[
										214425,
										214436
									],
									[
										214485,
										214496
									],
									[
										214508,
										214519
									],
									[
										214570,
										214581
									],
									[
										214595,
										214606
									],
									[
										214675,
										214686
									],
									[
										214698,
										214709
									],
									[
										214789,
										214800
									],
									[
										214817,
										214828
									],
									[
										214916,
										214927
									],
									[
										214951,
										214962
									],
									[
										215035,
										215046
									],
									[
										215070,
										215081
									],
									[
										215155,
										215166
									],
									[
										215190,
										215201
									],
									[
										215305,
										215316
									],
									[
										215340,
										215351
									],
									[
										215420,
										215431
									],
									[
										215458,
										215469
									],
									[
										215522,
										215533
									],
									[
										215560,
										215571
									],
									[
										215676,
										215687
									],
									[
										215707,
										215718
									],
									[
										215854,
										215865
									],
									[
										215870,
										215881
									],
									[
										216309,
										216320
									],
									[
										216326,
										216337
									],
									[
										216530,
										216541
									],
									[
										216547,
										216558
									],
									[
										216668,
										216679
									],
									[
										216685,
										216696
									],
									[
										216789,
										216800
									],
									[
										216806,
										216817
									],
									[
										217085,
										217096
									],
									[
										217127,
										217138
									],
									[
										217204,
										217215
									],
									[
										217248,
										217259
									],
									[
										217325,
										217336
									],
									[
										217372,
										217383
									],
									[
										217434,
										217445
									],
									[
										217457,
										217468
									],
									[
										217555,
										217566
									],
									[
										217585,
										217596
									],
									[
										217647,
										217658
									],
									[
										217673,
										217684
									],
									[
										217749,
										217760
									],
									[
										217780,
										217791
									],
									[
										217864,
										217875
									],
									[
										217890,
										217901
									],
									[
										217998,
										218009
									],
									[
										218030,
										218041
									],
									[
										218092,
										218103
									],
									[
										218108,
										218119
									],
									[
										218381,
										218392
									],
									[
										218416,
										218427
									],
									[
										218478,
										218489
									],
									[
										218498,
										218509
									],
									[
										218700,
										218711
									],
									[
										218721,
										218732
									],
									[
										218805,
										218816
									],
									[
										218836,
										218847
									],
									[
										218907,
										218918
									],
									[
										218931,
										218942
									],
									[
										219075,
										219086
									],
									[
										219101,
										219112
									],
									[
										219240,
										219251
									],
									[
										219274,
										219285
									],
									[
										219357,
										219368
									],
									[
										219391,
										219402
									],
									[
										219494,
										219505
									],
									[
										219528,
										219539
									],
									[
										219647,
										219658
									],
									[
										219681,
										219692
									],
									[
										219947,
										219958
									],
									[
										219981,
										219992
									],
									[
										220100,
										220111
									],
									[
										220134,
										220145
									],
									[
										220237,
										220248
									],
									[
										220271,
										220282
									],
									[
										220372,
										220383
									],
									[
										220406,
										220417
									],
									[
										220648,
										220659
									],
									[
										220682,
										220693
									],
									[
										221029,
										221040
									],
									[
										221077,
										221088
									],
									[
										221139,
										221150
									],
									[
										221158,
										221169
									],
									[
										221276,
										221287
									],
									[
										221301,
										221312
									],
									[
										221363,
										221374
									],
									[
										221384,
										221395
									],
									[
										221459,
										221470
									],
									[
										221491,
										221502
									],
									[
										221566,
										221577
									],
									[
										221590,
										221601
									],
									[
										221759,
										221770
									],
									[
										221784,
										221795
									],
									[
										221995,
										222006
									],
									[
										222018,
										222029
									],
									[
										222219,
										222230
									],
									[
										222243,
										222254
									],
									[
										222519,
										222530
									],
									[
										222542,
										222553
									],
									[
										222633,
										222644
									],
									[
										222663,
										222674
									],
									[
										222725,
										222736
									],
									[
										222748,
										222759
									],
									[
										222802,
										222813
									],
									[
										222825,
										222836
									],
									[
										222896,
										222907
									],
									[
										222918,
										222929
									],
									[
										222989,
										223000
									],
									[
										223012,
										223023
									],
									[
										223066,
										223077
									],
									[
										223090,
										223101
									],
									[
										223144,
										223155
									],
									[
										223174,
										223185
									],
									[
										223228,
										223239
									],
									[
										223254,
										223265
									],
									[
										223359,
										223370
									],
									[
										223376,
										223387
									],
									[
										223430,
										223441
									],
									[
										223445,
										223456
									],
									[
										223507,
										223518
									],
									[
										223530,
										223541
									],
									[
										223602,
										223613
									],
									[
										223630,
										223641
									],
									[
										223767,
										223778
									],
									[
										223790,
										223801
									],
									[
										223860,
										223871
									],
									[
										223892,
										223903
									],
									[
										223946,
										223957
									],
									[
										223985,
										223996
									],
									[
										224079,
										224090
									],
									[
										224109,
										224120
									],
									[
										224186,
										224197
									],
									[
										224206,
										224217
									],
									[
										224288,
										224299
									],
									[
										224318,
										224329
									],
									[
										224647,
										224658
									],
									[
										224680,
										224691
									],
									[
										224944,
										224955
									],
									[
										224966,
										224977
									],
									[
										225116,
										225127
									],
									[
										225141,
										225152
									],
									[
										225202,
										225213
									],
									[
										225228,
										225239
									],
									[
										225352,
										225363
									],
									[
										225373,
										225384
									],
									[
										225427,
										225438
									],
									[
										225456,
										225467
									],
									[
										225578,
										225589
									],
									[
										225614,
										225625
									],
									[
										225690,
										225701
									],
									[
										225725,
										225736
									],
									[
										225867,
										225878
									],
									[
										226007,
										226018
									],
									[
										226043,
										226054
									],
									[
										226255,
										226266
									],
									[
										226484,
										226495
									],
									[
										226738,
										226749
									],
									[
										226885,
										226896
									],
									[
										227039,
										227050
									],
									[
										227159,
										227170
									],
									[
										227319,
										227330
									],
									[
										227501,
										227512
									],
									[
										227676,
										227687
									],
									[
										228057,
										228068
									],
									[
										228177,
										228188
									],
									[
										228398,
										228409
									],
									[
										228729,
										228740
									],
									[
										228884,
										228895
									],
									[
										229045,
										229056
									],
									[
										229206,
										229217
									],
									[
										229351,
										229362
									],
									[
										229510,
										229521
									],
									[
										229655,
										229666
									],
									[
										229836,
										229847
									],
									[
										230062,
										230073
									],
									[
										230278,
										230289
									],
									[
										230386,
										230397
									],
									[
										230622,
										230633
									],
									[
										230896,
										230907
									],
									[
										230996,
										231007
									],
									[
										231334,
										231345
									],
									[
										231393,
										231404
									],
									[
										231842,
										231853
									],
									[
										231912,
										231923
									],
									[
										232318,
										232329
									],
									[
										232687,
										232698
									],
									[
										232746,
										232757
									],
									[
										233178,
										233189
									],
									[
										233248,
										233259
									],
									[
										233742,
										233753
									],
									[
										233812,
										233823
									],
									[
										234218,
										234229
									],
									[
										234573,
										234584
									],
									[
										235208,
										235219
									],
									[
										235846,
										235857
									],
									[
										236173,
										236184
									],
									[
										236456,
										236467
									],
									[
										236498,
										236509
									],
									[
										236578,
										236589
									],
									[
										236704,
										236715
									],
									[
										237282,
										237293
									],
									[
										237945,
										237956
									],
									[
										238242,
										238253
									],
									[
										238541,
										238552
									],
									[
										238882,
										238893
									],
									[
										239090,
										239101
									],
									[
										239400,
										239411
									],
									[
										239691,
										239702
									],
									[
										239821,
										239832
									],
									[
										240038,
										240049
									],
									[
										240256,
										240267
									],
									[
										240476,
										240487
									],
									[
										240770,
										240781
									],
									[
										241074,
										241085
									],
									[
										241322,
										241333
									],
									[
										241635,
										241646
									],
									[
										241943,
										241954
									],
									[
										242250,
										242261
									],
									[
										242473,
										242484
									],
									[
										242680,
										242691
									],
									[
										242911,
										242922
									],
									[
										243148,
										243159
									],
									[
										243459,
										243470
									],
									[
										243667,
										243678
									],
									[
										243871,
										243882
									],
									[
										244170,
										244181
									],
									[
										244482,
										244493
									],
									[
										244700,
										244711
									],
									[
										244922,
										244933
									],
									[
										245138,
										245149
									],
									[
										245352,
										245363
									],
									[
										245562,
										245573
									],
									[
										245799,
										245810
									],
									[
										246031,
										246042
									],
									[
										246340,
										246351
									],
									[
										246652,
										246663
									],
									[
										247099,
										247110
									],
									[
										247376,
										247387
									],
									[
										247605,
										247616
									],
									[
										247769,
										247780
									],
									[
										247815,
										247826
									],
									[
										247933,
										247944
									],
									[
										248115,
										248126
									],
									[
										248405,
										248416
									],
									[
										248780,
										248791
									],
									[
										249228,
										249239
									],
									[
										249381,
										249392
									],
									[
										249394,
										249405
									],
									[
										249550,
										249561
									],
									[
										249568,
										249579
									],
									[
										249751,
										249762
									],
									[
										249871,
										249882
									],
									[
										249954,
										249965
									],
									[
										250003,
										250014
									],
									[
										250204,
										250215
									],
									[
										250334,
										250345
									],
									[
										250397,
										250408
									],
									[
										250464,
										250475
									],
									[
										250515,
										250526
									],
									[
										250662,
										250673
									],
									[
										250944,
										250955
									],
									[
										251181,
										251192
									],
									[
										251437,
										251448
									],
									[
										251559,
										251570
									],
									[
										251640,
										251651
									],
									[
										252013,
										252024
									],
									[
										252073,
										252084
									],
									[
										252225,
										252236
									],
									[
										252490,
										252501
									],
									[
										252516,
										252527
									],
									[
										252685,
										252696
									],
									[
										252711,
										252722
									],
									[
										252880,
										252891
									],
									[
										252906,
										252917
									],
									[
										253021,
										253032
									],
									[
										253266,
										253277
									],
									[
										253481,
										253492
									],
									[
										253494,
										253505
									],
									[
										253600,
										253611
									],
									[
										253614,
										253625
									],
									[
										253767,
										253778
									],
									[
										253874,
										253885
									],
									[
										254068,
										254079
									],
									[
										254221,
										254232
									],
									[
										254445,
										254456
									],
									[
										254606,
										254617
									],
									[
										254852,
										254863
									],
									[
										255100,
										255111
									],
									[
										255339,
										255350
									],
									[
										255591,
										255602
									],
									[
										255833,
										255844
									],
									[
										256150,
										256161
									],
									[
										256384,
										256395
									],
									[
										256593,
										256604
									],
									[
										256966,
										256977
									],
									[
										257163,
										257174
									],
									[
										257401,
										257412
									],
									[
										257613,
										257624
									],
									[
										257808,
										257819
									],
									[
										258058,
										258069
									],
									[
										258258,
										258269
									],
									[
										258507,
										258518
									],
									[
										258766,
										258777
									],
									[
										258976,
										258987
									],
									[
										259178,
										259189
									],
									[
										259412,
										259423
									],
									[
										259584,
										259595
									],
									[
										259807,
										259818
									],
									[
										260024,
										260035
									],
									[
										260215,
										260226
									],
									[
										260439,
										260450
									],
									[
										260614,
										260625
									],
									[
										260840,
										260851
									],
									[
										261167,
										261178
									],
									[
										261384,
										261395
									],
									[
										261575,
										261586
									],
									[
										261803,
										261814
									],
									[
										262039,
										262050
									],
									[
										262237,
										262248
									],
									[
										262510,
										262521
									],
									[
										262580,
										262591
									],
									[
										262804,
										262815
									],
									[
										262964,
										262975
									],
									[
										263161,
										263172
									],
									[
										263352,
										263363
									],
									[
										263579,
										263590
									],
									[
										263718,
										263729
									],
									[
										263816,
										263827
									],
									[
										263956,
										263967
									],
									[
										264058,
										264069
									],
									[
										264179,
										264190
									],
									[
										264480,
										264491
									],
									[
										264792,
										264803
									],
									[
										265132,
										265143
									],
									[
										265458,
										265469
									],
									[
										265528,
										265539
									],
									[
										265754,
										265765
									],
									[
										266071,
										266082
									],
									[
										266141,
										266152
									],
									[
										266368,
										266379
									],
									[
										266577,
										266588
									],
									[
										266806,
										266817
									],
									[
										267051,
										267062
									],
									[
										267274,
										267285
									],
									[
										267498,
										267509
									],
									[
										267701,
										267712
									],
									[
										267929,
										267940
									],
									[
										268145,
										268156
									],
									[
										268378,
										268389
									],
									[
										268576,
										268587
									],
									[
										268872,
										268883
									],
									[
										268961,
										268972
									],
									[
										269153,
										269164
									],
									[
										269446,
										269457
									],
									[
										269693,
										269704
									],
									[
										269870,
										269881
									],
									[
										270147,
										270158
									],
									[
										270342,
										270353
									],
									[
										270594,
										270605
									],
									[
										270780,
										270791
									],
									[
										271052,
										271063
									],
									[
										271245,
										271256
									],
									[
										271456,
										271467
									],
									[
										271589,
										271600
									],
									[
										271789,
										271800
									],
									[
										272063,
										272074
									],
									[
										272252,
										272263
									],
									[
										272372,
										272383
									],
									[
										272607,
										272618
									],
									[
										272797,
										272808
									],
									[
										273136,
										273147
									],
									[
										273234,
										273245
									],
									[
										273312,
										273323
									],
									[
										273473,
										273484
									],
									[
										273680,
										273691
									],
									[
										273914,
										273925
									],
									[
										274104,
										274115
									],
									[
										274339,
										274350
									],
									[
										274654,
										274665
									],
									[
										275003,
										275014
									],
									[
										275263,
										275274
									],
									[
										275553,
										275564
									],
									[
										275778,
										275789
									],
									[
										276026,
										276037
									],
									[
										276254,
										276265
									],
									[
										276420,
										276431
									],
									[
										276737,
										276748
									],
									[
										276776,
										276787
									],
									[
										276809,
										276820
									],
									[
										277021,
										277032
									],
									[
										277404,
										277415
									],
									[
										277476,
										277487
									],
									[
										277894,
										277905
									],
									[
										277966,
										277977
									],
									[
										278378,
										278389
									],
									[
										278450,
										278461
									],
									[
										278793,
										278804
									],
									[
										279184,
										279195
									],
									[
										279452,
										279463
									],
									[
										279594,
										279605
									],
									[
										279764,
										279775
									],
									[
										279939,
										279950
									],
									[
										280048,
										280059
									],
									[
										280071,
										280082
									],
									[
										280122,
										280133
									],
									[
										280183,
										280194
									],
									[
										280201,
										280212
									],
									[
										280307,
										280318
									],
									[
										280334,
										280345
									],
									[
										280478,
										280489
									],
									[
										280502,
										280513
									],
									[
										280644,
										280655
									],
									[
										280668,
										280679
									],
									[
										280788,
										280799
									],
									[
										280813,
										280824
									],
									[
										280940,
										280951
									],
									[
										280965,
										280976
									],
									[
										281085,
										281096
									],
									[
										281117,
										281128
									],
									[
										281252,
										281263
									],
									[
										281275,
										281286
									],
									[
										281394,
										281405
									],
									[
										281419,
										281430
									],
									[
										281555,
										281566
									],
									[
										281578,
										281589
									],
									[
										281760,
										281771
									],
									[
										281788,
										281799
									],
									[
										281970,
										281981
									],
									[
										282002,
										282013
									],
									[
										282180,
										282191
									],
									[
										282213,
										282224
									],
									[
										282355,
										282366
									],
									[
										282390,
										282401
									],
									[
										282581,
										282592
									],
									[
										282616,
										282627
									],
									[
										282763,
										282774
									],
									[
										282795,
										282806
									],
									[
										282922,
										282933
									],
									[
										282960,
										282971
									],
									[
										283110,
										283121
									],
									[
										283141,
										283152
									],
									[
										283322,
										283333
									],
									[
										283339,
										283350
									],
									[
										283595,
										283606
									],
									[
										283612,
										283623
									],
									[
										283843,
										283854
									],
									[
										283860,
										283871
									],
									[
										284061,
										284072
									],
									[
										284078,
										284089
									],
									[
										284259,
										284270
									],
									[
										284301,
										284312
									],
									[
										284435,
										284446
									],
									[
										284479,
										284490
									],
									[
										284609,
										284620
									],
									[
										284656,
										284667
									],
									[
										284783,
										284794
									],
									[
										284806,
										284817
									],
									[
										284987,
										284998
									],
									[
										285017,
										285028
									],
									[
										285136,
										285147
									],
									[
										285162,
										285173
									],
									[
										285307,
										285318
									],
									[
										285338,
										285349
									],
									[
										285488,
										285499
									],
									[
										285514,
										285525
									],
									[
										285666,
										285677
									],
									[
										285698,
										285709
									],
									[
										285821,
										285832
									],
									[
										285837,
										285848
									],
									[
										286135,
										286146
									],
									[
										286170,
										286181
									],
									[
										286294,
										286305
									],
									[
										286314,
										286325
									],
									[
										286551,
										286562
									],
									[
										286572,
										286583
									],
									[
										286714,
										286725
									],
									[
										286745,
										286756
									],
									[
										286877,
										286888
									],
									[
										286901,
										286912
									],
									[
										287080,
										287091
									],
									[
										287106,
										287117
									],
									[
										287274,
										287285
									],
									[
										287305,
										287316
									],
									[
										287440,
										287451
									],
									[
										287462,
										287473
									],
									[
										287612,
										287623
									],
									[
										287636,
										287647
									],
									[
										287814,
										287825
									],
									[
										287839,
										287850
									],
									[
										288100,
										288111
									],
									[
										288121,
										288132
									],
									[
										288296,
										288307
									],
									[
										288316,
										288327
									],
									[
										288464,
										288475
									],
									[
										288498,
										288509
									],
									[
										288656,
										288667
									],
									[
										288686,
										288697
									],
									[
										288961,
										288972
									],
									[
										288995,
										289006
									],
									[
										289354,
										289365
									],
									[
										289402,
										289413
									],
									[
										289540,
										289551
									],
									[
										289559,
										289570
									],
									[
										289710,
										289721
									],
									[
										289735,
										289746
									],
									[
										289855,
										289866
									],
									[
										289876,
										289887
									],
									[
										290020,
										290031
									],
									[
										290052,
										290063
									],
									[
										290209,
										290220
									],
									[
										290233,
										290244
									],
									[
										290433,
										290444
									],
									[
										290458,
										290469
									],
									[
										290699,
										290710
									],
									[
										290722,
										290733
									],
									[
										290954,
										290965
									],
									[
										290978,
										290989
									],
									[
										291255,
										291266
									],
									[
										291278,
										291289
									],
									[
										291413,
										291424
									],
									[
										291443,
										291454
									],
									[
										291570,
										291581
									],
									[
										291593,
										291604
									],
									[
										291713,
										291724
									],
									[
										291736,
										291747
									],
									[
										291884,
										291895
									],
									[
										291906,
										291917
									],
									[
										292053,
										292064
									],
									[
										292076,
										292087
									],
									[
										292194,
										292205
									],
									[
										292218,
										292229
									],
									[
										292338,
										292349
									],
									[
										292368,
										292379
									],
									[
										292494,
										292505
									],
									[
										292520,
										292531
									],
									[
										292713,
										292724
									],
									[
										292730,
										292741
									],
									[
										292836,
										292847
									],
									[
										292851,
										292862
									],
									[
										292954,
										292965
									],
									[
										292977,
										292988
									],
									[
										293118,
										293129
									],
									[
										293146,
										293157
									],
									[
										293341,
										293352
									],
									[
										293364,
										293375
									],
									[
										293494,
										293505
									],
									[
										293526,
										293537
									],
									[
										293647,
										293658
									],
									[
										293686,
										293697
									],
									[
										293847,
										293858
									],
									[
										293867,
										293878
									],
									[
										294025,
										294036
									],
									[
										294055,
										294066
									],
									[
										294388,
										294399
									],
									[
										294498,
										294509
									],
									[
										294531,
										294542
									],
									[
										294787,
										294798
									],
									[
										294809,
										294820
									],
									[
										294964,
										294975
									],
									[
										294989,
										295000
									],
									[
										295111,
										295122
									],
									[
										295137,
										295148
									],
									[
										295352,
										295363
									],
									[
										295529,
										295540
									],
									[
										295688,
										295699
									],
									[
										295813,
										295824
									],
									[
										295834,
										295845
									],
									[
										295945,
										295956
									],
									[
										295974,
										295985
									],
									[
										296133,
										296144
									],
									[
										296169,
										296180
									],
									[
										296295,
										296306
									],
									[
										296330,
										296341
									],
									[
										296511,
										296522
									],
									[
										296728,
										296739
									],
									[
										296764,
										296775
									],
									[
										297096,
										297107
									],
									[
										297108,
										297119
									],
									[
										297387,
										297398
									],
									[
										297399,
										297410
									],
									[
										297822,
										297833
									],
									[
										297929,
										297940
									],
									[
										298216,
										298227
									],
									[
										298261,
										298272
									],
									[
										298314,
										298325
									],
									[
										298332,
										298343
									],
									[
										298395,
										298406
									],
									[
										298422,
										298433
									],
									[
										298499,
										298510
									],
									[
										298524,
										298535
									],
									[
										298602,
										298613
									],
									[
										298626,
										298637
									],
									[
										298688,
										298699
									],
									[
										298713,
										298724
									],
									[
										298791,
										298802
									],
									[
										298816,
										298827
									],
									[
										298878,
										298889
									],
									[
										298910,
										298921
									],
									[
										298970,
										298981
									],
									[
										298993,
										299004
									],
									[
										299055,
										299066
									],
									[
										299080,
										299091
									],
									[
										299160,
										299171
									],
									[
										299183,
										299194
									],
									[
										299274,
										299285
									],
									[
										299302,
										299313
									],
									[
										299401,
										299412
									],
									[
										299436,
										299447
									],
									[
										299520,
										299531
									],
									[
										299555,
										299566
									],
									[
										299640,
										299651
									],
									[
										299675,
										299686
									],
									[
										299790,
										299801
									],
									[
										299825,
										299836
									],
									[
										299905,
										299916
									],
									[
										299943,
										299954
									],
									[
										300007,
										300018
									],
									[
										300045,
										300056
									],
									[
										300161,
										300172
									],
									[
										300192,
										300203
									],
									[
										300339,
										300350
									],
									[
										300355,
										300366
									],
									[
										300794,
										300805
									],
									[
										300811,
										300822
									],
									[
										301015,
										301026
									],
									[
										301032,
										301043
									],
									[
										301153,
										301164
									],
									[
										301170,
										301181
									],
									[
										301274,
										301285
									],
									[
										301291,
										301302
									],
									[
										301570,
										301581
									],
									[
										301612,
										301623
									],
									[
										301689,
										301700
									],
									[
										301733,
										301744
									],
									[
										301810,
										301821
									],
									[
										301857,
										301868
									],
									[
										301919,
										301930
									],
									[
										301942,
										301953
									],
									[
										302040,
										302051
									],
									[
										302070,
										302081
									],
									[
										302132,
										302143
									],
									[
										302158,
										302169
									],
									[
										302234,
										302245
									],
									[
										302265,
										302276
									],
									[
										302349,
										302360
									],
									[
										302375,
										302386
									],
									[
										302483,
										302494
									],
									[
										302515,
										302526
									],
									[
										302577,
										302588
									],
									[
										302593,
										302604
									],
									[
										302866,
										302877
									],
									[
										302901,
										302912
									],
									[
										302963,
										302974
									],
									[
										302983,
										302994
									],
									[
										303185,
										303196
									],
									[
										303206,
										303217
									],
									[
										303290,
										303301
									],
									[
										303321,
										303332
									],
									[
										303392,
										303403
									],
									[
										303416,
										303427
									],
									[
										303560,
										303571
									],
									[
										303586,
										303597
									],
									[
										303725,
										303736
									],
									[
										303759,
										303770
									],
									[
										303842,
										303853
									],
									[
										303876,
										303887
									],
									[
										303979,
										303990
									],
									[
										304013,
										304024
									],
									[
										304132,
										304143
									],
									[
										304166,
										304177
									],
									[
										304432,
										304443
									],
									[
										304466,
										304477
									],
									[
										304585,
										304596
									],
									[
										304619,
										304630
									],
									[
										304722,
										304733
									],
									[
										304756,
										304767
									],
									[
										304857,
										304868
									],
									[
										304891,
										304902
									],
									[
										305133,
										305144
									],
									[
										305167,
										305178
									],
									[
										305514,
										305525
									],
									[
										305562,
										305573
									],
									[
										305624,
										305635
									],
									[
										305643,
										305654
									],
									[
										305761,
										305772
									],
									[
										305786,
										305797
									],
									[
										305848,
										305859
									],
									[
										305869,
										305880
									],
									[
										305944,
										305955
									],
									[
										305976,
										305987
									],
									[
										306051,
										306062
									],
									[
										306075,
										306086
									],
									[
										306244,
										306255
									],
									[
										306269,
										306280
									],
									[
										306480,
										306491
									],
									[
										306503,
										306514
									],
									[
										306704,
										306715
									],
									[
										306728,
										306739
									],
									[
										307004,
										307015
									],
									[
										307027,
										307038
									],
									[
										307118,
										307129
									],
									[
										307148,
										307159
									],
									[
										307210,
										307221
									],
									[
										307233,
										307244
									],
									[
										307287,
										307298
									],
									[
										307310,
										307321
									],
									[
										307381,
										307392
									],
									[
										307403,
										307414
									],
									[
										307474,
										307485
									],
									[
										307497,
										307508
									],
									[
										307551,
										307562
									],
									[
										307575,
										307586
									],
									[
										307629,
										307640
									],
									[
										307659,
										307670
									],
									[
										307713,
										307724
									],
									[
										307739,
										307750
									],
									[
										307844,
										307855
									],
									[
										307861,
										307872
									],
									[
										307915,
										307926
									],
									[
										307930,
										307941
									],
									[
										307992,
										308003
									],
									[
										308015,
										308026
									],
									[
										308087,
										308098
									],
									[
										308115,
										308126
									],
									[
										308252,
										308263
									],
									[
										308275,
										308286
									],
									[
										308345,
										308356
									],
									[
										308377,
										308388
									],
									[
										308431,
										308442
									],
									[
										308470,
										308481
									],
									[
										308564,
										308575
									],
									[
										308594,
										308605
									],
									[
										308671,
										308682
									],
									[
										308691,
										308702
									],
									[
										308773,
										308784
									],
									[
										308803,
										308814
									],
									[
										309132,
										309143
									],
									[
										309165,
										309176
									],
									[
										309429,
										309440
									],
									[
										309451,
										309462
									],
									[
										309601,
										309612
									],
									[
										309626,
										309637
									],
									[
										309687,
										309698
									],
									[
										309713,
										309724
									],
									[
										309837,
										309848
									],
									[
										309858,
										309869
									],
									[
										309912,
										309923
									],
									[
										309941,
										309952
									],
									[
										310063,
										310074
									],
									[
										310099,
										310110
									],
									[
										310175,
										310186
									],
									[
										310210,
										310221
									],
									[
										310352,
										310363
									],
									[
										310492,
										310503
									],
									[
										310528,
										310539
									],
									[
										310740,
										310751
									],
									[
										310969,
										310980
									],
									[
										311223,
										311234
									],
									[
										311370,
										311381
									],
									[
										311524,
										311535
									],
									[
										311644,
										311655
									],
									[
										311804,
										311815
									],
									[
										311986,
										311997
									],
									[
										312161,
										312172
									],
									[
										312542,
										312553
									],
									[
										312662,
										312673
									],
									[
										312883,
										312894
									],
									[
										313214,
										313225
									],
									[
										313369,
										313380
									],
									[
										313530,
										313541
									],
									[
										313691,
										313702
									],
									[
										313836,
										313847
									],
									[
										313995,
										314006
									],
									[
										314140,
										314151
									],
									[
										314321,
										314332
									],
									[
										314547,
										314558
									],
									[
										314763,
										314774
									],
									[
										314871,
										314882
									],
									[
										315107,
										315118
									],
									[
										315381,
										315392
									],
									[
										315481,
										315492
									],
									[
										315819,
										315830
									],
									[
										315878,
										315889
									],
									[
										316327,
										316338
									],
									[
										316397,
										316408
									],
									[
										316803,
										316814
									],
									[
										317172,
										317183
									],
									[
										317231,
										317242
									],
									[
										317663,
										317674
									],
									[
										317733,
										317744
									],
									[
										318227,
										318238
									],
									[
										318297,
										318308
									],
									[
										318703,
										318714
									],
									[
										319058,
										319069
									],
									[
										319693,
										319704
									],
									[
										320331,
										320342
									],
									[
										320658,
										320669
									],
									[
										320941,
										320952
									],
									[
										320983,
										320994
									],
									[
										321063,
										321074
									],
									[
										321189,
										321200
									],
									[
										321767,
										321778
									],
									[
										322430,
										322441
									],
									[
										322727,
										322738
									],
									[
										323026,
										323037
									],
									[
										323367,
										323378
									],
									[
										323575,
										323586
									],
									[
										323885,
										323896
									],
									[
										324176,
										324187
									],
									[
										324306,
										324317
									],
									[
										324523,
										324534
									],
									[
										324741,
										324752
									],
									[
										324961,
										324972
									],
									[
										325255,
										325266
									],
									[
										325559,
										325570
									],
									[
										325807,
										325818
									],
									[
										326120,
										326131
									],
									[
										326428,
										326439
									],
									[
										326735,
										326746
									],
									[
										326958,
										326969
									],
									[
										327165,
										327176
									],
									[
										327396,
										327407
									],
									[
										327633,
										327644
									],
									[
										327944,
										327955
									],
									[
										328152,
										328163
									],
									[
										328356,
										328367
									],
									[
										328655,
										328666
									],
									[
										328967,
										328978
									],
									[
										329185,
										329196
									],
									[
										329407,
										329418
									],
									[
										329623,
										329634
									],
									[
										329837,
										329848
									],
									[
										330047,
										330058
									],
									[
										330284,
										330295
									],
									[
										330516,
										330527
									],
									[
										330825,
										330836
									],
									[
										331137,
										331148
									],
									[
										331584,
										331595
									],
									[
										331861,
										331872
									],
									[
										332090,
										332101
									],
									[
										332254,
										332265
									],
									[
										332300,
										332311
									],
									[
										332418,
										332429
									],
									[
										332600,
										332611
									],
									[
										332890,
										332901
									],
									[
										333265,
										333276
									],
									[
										333728,
										333744
									],
									[
										333941,
										333957
									],
									[
										333959,
										333975
									],
									[
										334085,
										334101
									],
									[
										334108,
										334124
									],
									[
										334174,
										334190
									],
									[
										334388,
										334404
									],
									[
										334533,
										334549
									],
									[
										334662,
										334678
									],
									[
										334807,
										334823
									],
									[
										335050,
										335066
									],
									[
										335348,
										335364
									],
									[
										335413,
										335429
									],
									[
										335588,
										335604
									],
									[
										335925,
										335940
									],
									[
										336156,
										336171
									],
									[
										336561,
										336576
									],
									[
										336578,
										336593
									],
									[
										336757,
										336772
									],
									[
										336779,
										336794
									],
									[
										336818,
										336833
									],
									[
										336916,
										336931
									],
									[
										337128,
										337143
									],
									[
										337301,
										337316
									],
									[
										337464,
										337479
									],
									[
										337695,
										337710
									],
									[
										338012,
										338027
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								335931,
								335931
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"detect_indentation": false,
							"output_tag": 9,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"sublime_auto_complete": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 156800.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/LanguageManager.java",
					"settings":
					{
						"buffer_size": 4971,
						"regions":
						{
						},
						"selection":
						[
							[
								1517,
								1526
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 601.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/OcrService.java",
					"settings":
					{
						"buffer_size": 9771,
						"regions":
						{
						},
						"selection":
						[
							[
								2408,
								2423
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 983.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/src/com/googlecode/tesseract/android/TessBaseAPI.java",
					"settings":
					{
						"buffer_size": 20505,
						"regions":
						{
						},
						"selection":
						[
							[
								6308,
								6312
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2869.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/dev/eclipse/tess-two-master/eyes-two/src/com/googlecode/eyesfree/ocr/service/OcrTaskProcessor.java",
					"settings":
					{
						"buffer_size": 18777,
						"regions":
						{
						},
						"selection":
						[
							[
								1654,
								1670
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 861.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/contrib/tesseract-c_api-demo.py",
					"settings":
					{
						"buffer_size": 2182,
						"regions":
						{
						},
						"selection":
						[
							[
								1931,
								1946
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 523.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/api/capi.cpp",
					"settings":
					{
						"buffer_size": 24479,
						"regions":
						{
						},
						"selection":
						[
							[
								6552,
								6556
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4249.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/D/dev/eclipse/svg-viewer-android-master/src/biz/codefuture/svgviewer/MainActivity.java",
					"settings":
					{
						"buffer_size": 3552,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/api/tesseractmain.cpp",
					"settings":
					{
						"buffer_size": 12031,
						"regions":
						{
						},
						"selection":
						[
							[
								6378,
								6378
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2663.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/ccmain/tessedit.cpp",
					"settings":
					{
						"buffer_size": 18339,
						"regions":
						{
						},
						"selection":
						[
							[
								3658,
								3658
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 983.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/D/dev/eclipse/tess-two-master/tess-two/jni/com_googlecode_tesseract_android/src/training/ambiguous_words.cpp",
					"settings":
					{
						"buffer_size": 2739,
						"regions":
						{
						},
						"selection":
						[
							[
								2010,
								2014
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 683.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/VisualDebugger.h",
					"settings":
					{
						"buffer_size": 1163,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								14
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/D/dev/WhiteboardPhotoConverter/WFCTest/VisualDebugger.cpp",
					"settings":
					{
						"buffer_size": 18187,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 283.0,
	"status_bar_visible": true
}
